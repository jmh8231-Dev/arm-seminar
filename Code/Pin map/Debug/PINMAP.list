
PINMAP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800c944  0800c944  0000d944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c974  0800c974  0000e07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c974  0800c974  0000d974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c97c  0800c97c  0000e07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c97c  0800c97c  0000d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c980  0800c980  0000d980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800c984  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e07c  2**0
                  CONTENTS
 10 .bss          00000ce0  2000007c  2000007c  0000e07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d5c  20000d5c  0000e07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024ddb  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b3f  00000000  00000000  00032e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  000389c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001723  00000000  00000000  0003a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283ac  00000000  00000000  0003bee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a041  00000000  00000000  0006428f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000decff  00000000  00000000  0008e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016cfcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008124  00000000  00000000  0016d014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00175138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c92c 	.word	0x0800c92c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800c92c 	.word	0x0800c92c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_ADC1_Init+0x98>)
 8000508:	4a21      	ldr	r2, [pc, #132]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <MX_ADC1_Init+0x98>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800051a:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052e:	4b17      	ldr	r3, [pc, #92]	@ (800058c <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <MX_ADC1_Init+0x98>)
 8000536:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <MX_ADC1_Init+0xa0>)
 8000538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <MX_ADC1_Init+0x98>)
 8000542:	2201      	movs	r2, #1
 8000544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_ADC1_Init+0x98>)
 8000550:	2201      	movs	r2, #1
 8000552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <MX_ADC1_Init+0x98>)
 8000556:	f001 f94b 	bl	80017f0 <HAL_ADC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000560:	f000 fbde 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000564:	2303      	movs	r3, #3
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_ADC1_Init+0x98>)
 8000576:	f001 f97f 	bl	8001878 <HAL_ADC_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000580:	f000 fbce 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000098 	.word	0x20000098
 8000590:	40012000 	.word	0x40012000
 8000594:	0f000001 	.word	0x0f000001

08000598 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <MX_ADC2_Init+0x9c>)
 80005ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005da:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <MX_ADC2_Init+0xa0>)
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC2_Init+0x98>)
 80005fa:	f001 f8f9 	bl	80017f0 <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000604:	f000 fb8c 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000608:	230e      	movs	r3, #14
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_ADC2_Init+0x98>)
 800061a:	f001 f92d 	bl	8001878 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000624:	f000 fb7c 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000e0 	.word	0x200000e0
 8000634:	40012100 	.word	0x40012100
 8000638:	0f000001 	.word	0x0f000001

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <HAL_ADC_MspInit+0xd8>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d128      	bne.n	80006b0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066c:	6453      	str	r3, [r2, #68]	@ 0x44
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000696:	231c      	movs	r3, #28
 8000698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	481c      	ldr	r0, [pc, #112]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006aa:	f001 fd11 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006ae:	e02c      	b.n	800070a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <HAL_ADC_MspInit+0xe4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d127      	bne.n	800070a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006f2:	2310      	movs	r3, #16
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <HAL_ADC_MspInit+0xe8>)
 8000706:	f001 fce3 	bl	80020d0 <HAL_GPIO_Init>
}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	@ 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40012000 	.word	0x40012000
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40012100 	.word	0x40012100
 8000724:	40020800 	.word	0x40020800

08000728 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_CAN1_Init+0x60>)
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_CAN1_Init+0x64>)
 8000730:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000734:	2210      	movs	r2, #16
 8000736:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_CAN1_Init+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_CAN1_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000750:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_CAN1_Init+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <MX_CAN1_Init+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <MX_CAN1_Init+0x60>)
 8000776:	f001 fa9d 	bl	8001cb4 <HAL_CAN_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 face 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000128 	.word	0x20000128
 800078c:	40006400 	.word	0x40006400

08000790 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_CAN_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12b      	bne.n	800080a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_CAN_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ea:	2303      	movs	r3, #3
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007fa:	2309      	movs	r3, #9
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <HAL_CAN_MspInit+0x8c>)
 8000806:	f001 fc63 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	@ 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40006400 	.word	0x40006400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020c00 	.word	0x40020c00

08000820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b75      	ldr	r3, [pc, #468]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a74      	ldr	r2, [pc, #464]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b72      	ldr	r3, [pc, #456]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b6e      	ldr	r3, [pc, #440]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a6d      	ldr	r2, [pc, #436]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b6b      	ldr	r3, [pc, #428]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b67      	ldr	r3, [pc, #412]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a66      	ldr	r2, [pc, #408]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b64      	ldr	r3, [pc, #400]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b60      	ldr	r3, [pc, #384]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a5f      	ldr	r2, [pc, #380]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b59      	ldr	r3, [pc, #356]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a58      	ldr	r2, [pc, #352]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b56      	ldr	r3, [pc, #344]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b52      	ldr	r3, [pc, #328]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a51      	ldr	r2, [pc, #324]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a10 <MX_GPIO_Init+0x1f0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP8266_GPIO0_Pin|ESP8266_GPIO15_Pin|WiFi_Module_Reset_Pin|EEPROM_WP_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f241 0137 	movw	r1, #4151	@ 0x1037
 80008e4:	484b      	ldr	r0, [pc, #300]	@ (8000a14 <MX_GPIO_Init+0x1f4>)
 80008e6:	f001 fd8f 	bl	8002408 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VS1003_CS_Pin|VS1003_xRESET_Pin|VS1003_xDCS_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80008f0:	4849      	ldr	r0, [pc, #292]	@ (8000a18 <MX_GPIO_Init+0x1f8>)
 80008f2:	f001 fd89 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 80008fc:	4847      	ldr	r0, [pc, #284]	@ (8000a1c <MX_GPIO_Init+0x1fc>)
 80008fe:	f001 fd83 	bl	8002408 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PSO_GPIO_Port, OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000908:	4845      	ldr	r0, [pc, #276]	@ (8000a20 <MX_GPIO_Init+0x200>)
 800090a:	f001 fd7d 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           SDIO_INT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800090e:	238f      	movs	r3, #143	@ 0x8f
 8000910:	61fb      	str	r3, [r7, #28]
                          |SDIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4840      	ldr	r0, [pc, #256]	@ (8000a24 <MX_GPIO_Init+0x204>)
 8000924:	f001 fbd4 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP8266_GPIO0_Pin ESP8266_GPIO15_Pin WiFi_Module_Reset_Pin EEPROM_WP_Pin
                           PB4 PB5 */
  GPIO_InitStruct.Pin = ESP8266_GPIO0_Pin|ESP8266_GPIO15_Pin|WiFi_Module_Reset_Pin|EEPROM_WP_Pin
 8000928:	f241 0337 	movw	r3, #4151	@ 0x1037
 800092c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4834      	ldr	r0, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x1f4>)
 8000942:	f001 fbc5 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VS1003_CS_Pin VS1003_xRESET_Pin VS1003_xDCS_Pin */
  GPIO_InitStruct.Pin = VS1003_CS_Pin|VS1003_xRESET_Pin|VS1003_xDCS_Pin;
 8000946:	f44f 5350 	mov.w	r3, #13312	@ 0x3400
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	482e      	ldr	r0, [pc, #184]	@ (8000a18 <MX_GPIO_Init+0x1f8>)
 8000960:	f001 fbb6 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VS1003_DREQ_Pin */
  GPIO_InitStruct.Pin = VS1003_DREQ_Pin;
 8000964:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VS1003_DREQ_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4827      	ldr	r0, [pc, #156]	@ (8000a18 <MX_GPIO_Init+0x1f8>)
 800097a:	f001 fba9 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800097e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000982:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <MX_GPIO_Init+0x1fc>)
 8000998:	f001 fb9a 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_WP_Pin */
  GPIO_InitStruct.Pin = SDIO_WP_Pin;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDIO_WP_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <MX_GPIO_Init+0x204>)
 80009b0:	f001 fb8e 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PSO_Pin;
 80009b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PSO_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	@ (8000a20 <MX_GPIO_Init+0x200>)
 80009ce:	f001 fb7f 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <MX_GPIO_Init+0x200>)
 80009e8:	f001 fb72 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AS6221_INT1_Pin AS6221_INT2_Pin */
  GPIO_InitStruct.Pin = AS6221_INT1_Pin|AS6221_INT2_Pin;
 80009ec:	2330      	movs	r3, #48	@ 0x30
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <MX_GPIO_Init+0x1fc>)
 8000a02:	f001 fb65 	bl	80020d0 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020800 	.word	0x40020800

08000a28 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f003 fe13 	bl	8004690 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f956 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000150 	.word	0x20000150
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ad8 <MX_I2C2_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_I2C2_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <MX_I2C2_Init+0x50>)
 8000ac2:	f003 fde5 	bl	8004690 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 f928 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001a4 	.word	0x200001a4
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	@ 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <HAL_I2C_MspInit+0xe8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12c      	bne.n	8000b5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a30      	ldr	r2, [pc, #192]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1e:	23c0      	movs	r3, #192	@ 0xc0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4825      	ldr	r0, [pc, #148]	@ (8000bd0 <HAL_I2C_MspInit+0xf0>)
 8000b3a:	f001 fac9 	bl	80020d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b5a:	e031      	b.n	8000bc0 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <HAL_I2C_MspInit+0xf4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12c      	bne.n	8000bc0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b94:	2304      	movs	r3, #4
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <HAL_I2C_MspInit+0xf0>)
 8000ba0:	f001 fa96 	bl	80020d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_I2C_MspInit+0xec>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3730      	adds	r7, #48	@ 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40005800 	.word	0x40005800

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fd72 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f834 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f7ff fe1c 	bl	8000820 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000be8:	f7ff fc84 	bl	80004f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bec:	f7ff fcd4 	bl	8000598 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000bf0:	f7ff fd9a 	bl	8000728 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000bf4:	f7ff ff18 	bl	8000a28 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bf8:	f7ff ff44 	bl	8000a84 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000bfc:	f000 f896 	bl	8000d2c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000c00:	f000 f92c 	bl	8000e5c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c04:	f000 fa52 	bl	80010ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c08:	f000 faf0 	bl	80011ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0c:	f000 fb64 	bl	80012d8 <MX_TIM3_Init>
  MX_UART4_Init();
 8000c10:	f000 fc5c 	bl	80014cc <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000c14:	f000 fc84 	bl	8001520 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000c18:	f007 ffd0 	bl	8008bbc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000c1c:	f00b fa26 	bl	800c06c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c20:	2110      	movs	r1, #16
 8000c22:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <main+0x70>)
 8000c24:	f001 fc09 	bl	800243a <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2c:	f000 fdbc 	bl	80017a8 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000c30:	2120      	movs	r1, #32
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <main+0x70>)
 8000c34:	f001 fc01 	bl	800243a <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 8000c38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c3c:	f000 fdb4 	bl	80017a8 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c40:	f00b fa3a 	bl	800c0b8 <MX_USB_HOST_Process>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000c44:	bf00      	nop
 8000c46:	e7eb      	b.n	8000c20 <main+0x48>
 8000c48:	40020400 	.word	0x40020400

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	@ 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2230      	movs	r2, #48	@ 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00b fdca 	bl	800c7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <SystemClock_Config+0xcc>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	4a27      	ldr	r2, [pc, #156]	@ (8000d18 <SystemClock_Config+0xcc>)
 8000c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c80:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <SystemClock_Config+0xcc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <SystemClock_Config+0xd0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <SystemClock_Config+0xd0>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <SystemClock_Config+0xd0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cc0:	23a8      	movs	r3, #168	@ 0xa8
 8000cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f003 fe21 	bl	8004918 <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cdc:	f000 f820 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 f882 	bl	8004e08 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d0a:	f000 f809 	bl	8000d20 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	@ 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <MX_SDIO_SD_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000d5a:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d5c:	f004 fa34 	bl	80051c8 <HAL_SD_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000d66:	f7ff ffdb 	bl	8000d20 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000d6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_SDIO_SD_Init+0x58>)
 8000d70:	f004 fc76 	bl	8005660 <HAL_SD_ConfigWideBusOperation>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff ffd1 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001f8 	.word	0x200001f8
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a28      	ldr	r2, [pc, #160]	@ (8000e4c <HAL_SD_MspInit+0xc0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d14a      	bne.n	8000e44 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a26      	ldr	r2, [pc, #152]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_SD_MspInit+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e02:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e14:	230c      	movs	r3, #12
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <HAL_SD_MspInit+0xc8>)
 8000e20:	f001 f956 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e24:	2304      	movs	r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e34:	230c      	movs	r3, #12
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <HAL_SD_MspInit+0xcc>)
 8000e40:	f001 f946 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00

08000e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <MX_SPI1_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_SPI1_Init+0x64>)
 8000eae:	f004 ff3d 	bl	8005d2c <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f7ff ff32 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000027c 	.word	0x2000027c
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <HAL_SPI_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a17      	ldr	r2, [pc, #92]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23e0      	movs	r3, #224	@ 0xe0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f32:	2305      	movs	r3, #5
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	f001 f8c7 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 fbb3 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <OTG_FS_IRQHandler+0x10>)
 800100e:	f001 fceb 	bl	80029e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000834 	.word	0x20000834

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f00b fbea 	bl	800c824 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	200002d4 	.word	0x200002d4
 8001084:	20000d60 	.word	0x20000d60

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	@ 0x58
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00b fb85 	bl	800c7f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80010ec:	4a3e      	ldr	r2, [pc, #248]	@ (80011e8 <MX_TIM1_Init+0x13c>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f0:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80010fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110a:	4b36      	ldr	r3, [pc, #216]	@ (80011e4 <MX_TIM1_Init+0x138>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001116:	4833      	ldr	r0, [pc, #204]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001118:	f004 fe91 	bl	8005e3e <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001122:	f7ff fdfd 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001130:	4619      	mov	r1, r3
 8001132:	482c      	ldr	r0, [pc, #176]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001134:	f004 ffee 	bl	8006114 <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800113e:	f7ff fdef 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001142:	4828      	ldr	r0, [pc, #160]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001144:	f004 feca 	bl	8005edc <HAL_TIM_PWM_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800114e:	f7ff fde7 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800115e:	4619      	mov	r1, r3
 8001160:	4820      	ldr	r0, [pc, #128]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001162:	f005 fb8f 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800116c:	f7ff fdd8 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001170:	2360      	movs	r3, #96	@ 0x60
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	4813      	ldr	r0, [pc, #76]	@ (80011e4 <MX_TIM1_Init+0x138>)
 8001196:	f004 fefb 	bl	8005f90 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011a0:	f7ff fdbe 	bl	8000d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80011c8:	f005 fbd8 	bl	800697c <HAL_TIMEx_ConfigBreakDeadTime>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011d2:	f7ff fda5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d6:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MX_TIM1_Init+0x138>)
 80011d8:	f000 f918 	bl	800140c <HAL_TIM_MspPostInit>

}
 80011dc:	bf00      	nop
 80011de:	3758      	adds	r7, #88	@ 0x58
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002d8 	.word	0x200002d8
 80011e8:	40010000 	.word	0x40010000

080011ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	@ 0x38
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001244:	4823      	ldr	r0, [pc, #140]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001246:	f004 fdfa 	bl	8005e3e <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001250:	f7ff fd66 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125e:	4619      	mov	r1, r3
 8001260:	481c      	ldr	r0, [pc, #112]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001262:	f004 ff57 	bl	8006114 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800126c:	f7ff fd58 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001270:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001272:	f004 fe33 	bl	8005edc <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800127c:	f7ff fd50 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4619      	mov	r1, r3
 800128e:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 8001290:	f005 faf8 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800129a:	f7ff fd41 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2204      	movs	r2, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 80012b6:	f004 fe6b 	bl	8005f90 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012c0:	f7ff fd2e 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MX_TIM2_Init+0xe8>)
 80012c6:	f000 f8a1 	bl	800140c <HAL_TIM_MspPostInit>

}
 80012ca:	bf00      	nop
 80012cc:	3738      	adds	r7, #56	@ 0x38
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000320 	.word	0x20000320

080012d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM3_Init+0x94>)
 80012f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001370 <MX_TIM3_Init+0x98>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_TIM3_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM3_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_TIM3_Init+0x94>)
 8001308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM3_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM3_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM3_Init+0x94>)
 800131c:	f004 fd8f 	bl	8005e3e <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001326:	f7ff fcfb 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM3_Init+0x94>)
 8001338:	f004 feec 	bl	8006114 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001342:	f7ff fced 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM3_Init+0x94>)
 8001354:	f005 fa96 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800135e:	f7ff fcdf 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000368 	.word	0x20000368
 8001370:	40000400 	.word	0x40000400

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_TIM_Base_MspInit+0x8c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10e      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013a2:	e026      	b.n	80013f2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ac:	d10e      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
}
 80013ca:	e012      	b.n	80013f2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <HAL_TIM_Base_MspInit+0x94>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <HAL_TIM_Base_MspInit+0x90>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800
 8001408:	40000400 	.word	0x40000400

0800140c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a24      	ldr	r2, [pc, #144]	@ (80014bc <HAL_TIM_MspPostInit+0xb0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d11f      	bne.n	800146e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4817      	ldr	r0, [pc, #92]	@ (80014c4 <HAL_TIM_MspPostInit+0xb8>)
 8001468:	f000 fe32 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800146c:	e022      	b.n	80014b4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001476:	d11d      	bne.n	80014b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_TIM_MspPostInit+0xb4>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001494:	2308      	movs	r3, #8
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <HAL_TIM_MspPostInit+0xbc>)
 80014b0:	f000 fe0e 	bl	80020d0 <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40020400 	.word	0x40020400

080014cc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_UART4_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_UART4_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_UART4_Init+0x4c>)
 8001504:	f005 fa8c 	bl	8006a20 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800150e:	f7ff fc07 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003b0 	.word	0x200003b0
 800151c:	40004c00 	.word	0x40004c00

08001520 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <MX_USART3_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USART3_UART_Init+0x4c>)
 8001558:	f005 fa62 	bl	8006a20 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f7ff fbdd 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200003f8 	.word	0x200003f8
 8001570:	40004800 	.word	0x40004800

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_UART_MspInit+0xe8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_UART_MspInit+0xec>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a30      	ldr	r2, [pc, #192]	@ (8001660 <HAL_UART_MspInit+0xec>)
 80015a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_UART_MspInit+0xec>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_UART_MspInit+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <HAL_UART_MspInit+0xec>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_UART_MspInit+0xec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015de:	2308      	movs	r3, #8
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	481e      	ldr	r0, [pc, #120]	@ (8001664 <HAL_UART_MspInit+0xf0>)
 80015ea:	f000 fd71 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ee:	e031      	b.n	8001654 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_UART_MspInit+0xf4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_UART_MspInit+0xec>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_UART_MspInit+0xec>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_UART_MspInit+0xec>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_UART_MspInit+0xec>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_UART_MspInit+0xec>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_UART_MspInit+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001632:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <HAL_UART_MspInit+0xf8>)
 8001650:	f000 fd3e 	bl	80020d0 <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004c00 	.word	0x40004c00
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40004800 	.word	0x40004800
 800166c:	40020c00 	.word	0x40020c00

08001670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001674:	f7ff fd08 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	@ (80016b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	@ (80016bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800169e:	f00b f8c7 	bl	800c830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7ff fa99 	bl	8000bd8 <main>
  bx  lr    
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80016b4:	0800c984 	.word	0x0800c984
  ldr r2, =_sbss
 80016b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016bc:	20000d5c 	.word	0x20000d5c

080016c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <HAL_Init+0x40>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_Init+0x40>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_Init+0x40>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 fcad 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	200f      	movs	r0, #15
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fc2e 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fcc5 	bl	80020b6 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001744:	f000 fc8d 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000440 	.word	0x20000440

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000440 	.word	0x20000440

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e033      	b.n	800186e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe ff14 	bl	800063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f93a 	bl	8001abc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40
 800185e:	e001      	b.n	8001864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1c>
 8001890:	2302      	movs	r3, #2
 8001892:	e105      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x228>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d925      	bls.n	80018f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4403      	add	r3, r0
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	409a      	lsls	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	e022      	b.n	8001936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	2207      	movs	r2, #7
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	4603      	mov	r3, r0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4403      	add	r3, r0
 800192c:	409a      	lsls	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d824      	bhi.n	8001988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b05      	subs	r3, #5
 8001950:	221f      	movs	r2, #31
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b05      	subs	r3, #5
 800197a:	fa00 f203 	lsl.w	r2, r0, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
 8001986:	e04c      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d824      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b23      	subs	r3, #35	@ 0x23
 80019a2:	221f      	movs	r2, #31
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43da      	mvns	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	400a      	ands	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b23      	subs	r3, #35	@ 0x23
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019d8:	e023      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b41      	subs	r3, #65	@ 0x41
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	@ 0x41
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_ADC_ConfigChannel+0x234>)
 8001a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x238>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1cc>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x238>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d123      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d003      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x1e6>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b11      	cmp	r3, #17
 8001a5c:	d11b      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x23c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <HAL_ADC_ConfigChannel+0x240>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9a      	lsrs	r2, r3, #18
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40012300 	.word	0x40012300
 8001ab0:	40012000 	.word	0x40012000
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac4:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <ADC_Init+0x1f0>)
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	021a      	lsls	r2, r3, #8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <ADC_Init+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e00f      	b.n	8001bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0202 	bic.w	r2, r2, #2
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e1b      	ldrb	r3, [r3, #24]
 8001bd4:	005a      	lsls	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	3b01      	subs	r3, #1
 8001c14:	035a      	lsls	r2, r3, #13
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	e007      	b.n	8001c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	051a      	lsls	r2, r3, #20
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c72:	025a      	lsls	r2, r3, #9
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	029a      	lsls	r2, r3, #10
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	0f000001 	.word	0x0f000001

08001cb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0ed      	b.n	8001ea2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fd5c 	bl	8000790 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce8:	f7ff fd52 	bl	8001790 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cee:	e012      	b.n	8001d16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf0:	f7ff fd4e 	bl	8001790 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b0a      	cmp	r3, #10
 8001cfc:	d90b      	bls.n	8001d16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0c5      	b.n	8001ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0e5      	beq.n	8001cf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0202 	bic.w	r2, r2, #2
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d34:	f7ff fd2c 	bl	8001790 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3a:	e012      	b.n	8001d62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d3c:	f7ff fd28 	bl	8001790 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b0a      	cmp	r3, #10
 8001d48:	d90b      	bls.n	8001d62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2205      	movs	r2, #5
 8001d5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e09f      	b.n	8001ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e5      	bne.n	8001d3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7e1b      	ldrb	r3, [r3, #24]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d108      	bne.n	8001d8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e007      	b.n	8001d9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7e5b      	ldrb	r3, [r3, #25]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e007      	b.n	8001dc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e9b      	ldrb	r3, [r3, #26]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d108      	bne.n	8001dde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e007      	b.n	8001dee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0220 	bic.w	r2, r2, #32
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7edb      	ldrb	r3, [r3, #27]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0210 	bic.w	r2, r2, #16
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0210 	orr.w	r2, r2, #16
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7f1b      	ldrb	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0208 	bic.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7f5b      	ldrb	r3, [r3, #29]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0204 	orr.w	r2, r2, #4
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	ea42 0103 	orr.w	r1, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e16b      	b.n	80023c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 815a 	bne.w	80023be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80b4 	beq.w	80023be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b60      	ldr	r3, [pc, #384]	@ (80023dc <HAL_GPIO_Init+0x30c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a5f      	ldr	r2, [pc, #380]	@ (80023dc <HAL_GPIO_Init+0x30c>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b5d      	ldr	r3, [pc, #372]	@ (80023dc <HAL_GPIO_Init+0x30c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a5b      	ldr	r2, [pc, #364]	@ (80023e0 <HAL_GPIO_Init+0x310>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <HAL_GPIO_Init+0x314>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_GPIO_Init+0x226>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a51      	ldr	r2, [pc, #324]	@ (80023e8 <HAL_GPIO_Init+0x318>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x222>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a50      	ldr	r2, [pc, #320]	@ (80023ec <HAL_GPIO_Init+0x31c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x21e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <HAL_GPIO_Init+0x320>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x21a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4e      	ldr	r2, [pc, #312]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x216>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_GPIO_Init+0x328>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x212>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_GPIO_Init+0x32c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x20e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_GPIO_Init+0x330>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x20a>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e00e      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022da:	2308      	movs	r3, #8
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022de:	2306      	movs	r3, #6
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x228>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4935      	ldr	r1, [pc, #212]	@ (80023e0 <HAL_GPIO_Init+0x310>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_GPIO_Init+0x334>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a32      	ldr	r2, [pc, #200]	@ (8002404 <HAL_GPIO_Init+0x334>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b30      	ldr	r3, [pc, #192]	@ (8002404 <HAL_GPIO_Init+0x334>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_GPIO_Init+0x334>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236a:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <HAL_GPIO_Init+0x334>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238e:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <HAL_GPIO_Init+0x334>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_GPIO_Init+0x334>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_GPIO_Init+0x334>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f ae90 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40021400 	.word	0x40021400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40021c00 	.word	0x40021c00
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43d9      	mvns	r1, r3
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af02      	add	r7, sp, #8
 8002474:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e059      	b.n	8002534 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f009 fe44 	bl	800c128 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ae:	d102      	bne.n	80024b6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 fa7f 	bl	80079be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7c1a      	ldrb	r2, [r3, #16]
 80024c8:	f88d 2000 	strb.w	r2, [sp]
 80024cc:	3304      	adds	r3, #4
 80024ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d0:	f005 fa00 	bl	80078d4 <USB_CoreInit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e026      	b.n	8002534 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 fa77 	bl	80079e0 <USB_SetCurrentMode>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e017      	b.n	8002534 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7c1a      	ldrb	r2, [r3, #16]
 800250c:	f88d 2000 	strb.w	r2, [sp]
 8002510:	3304      	adds	r3, #4
 8002512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002514:	f005 fc20 	bl	8007d58 <USB_HostInit>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e004      	b.n	8002534 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b08b      	sub	sp, #44	@ 0x2c
 8002540:	af04      	add	r7, sp, #16
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	70fb      	strb	r3, [r7, #3]
 800254e:	460b      	mov	r3, r1
 8002550:	70bb      	strb	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002556:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002558:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_HCD_HC_Init+0x2c>
 8002564:	2302      	movs	r3, #2
 8002566:	e09d      	b.n	80026a4 <HAL_HCD_HC_Init+0x168>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3319      	adds	r3, #25
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3314      	adds	r3, #20
 8002594:	787a      	ldrb	r2, [r7, #1]
 8002596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3315      	adds	r3, #21
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3326      	adds	r3, #38	@ 0x26
 80025bc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80025c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	78bb      	ldrb	r3, [r7, #2]
 80025c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025ca:	b2d8      	uxtb	r0, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3316      	adds	r3, #22
 80025da:	4602      	mov	r2, r0
 80025dc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fba4 	bl	8002d30 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80025e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	da0a      	bge.n	8002606 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3317      	adds	r3, #23
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e009      	b.n	800261a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3317      	adds	r3, #23
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f005 fcfe 	bl	8008020 <USB_GetHostSpeed>
 8002624:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10b      	bne.n	8002646 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800262e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <HAL_HCD_HC_Init+0x10a>
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d104      	bne.n	8002646 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002640:	d901      	bls.n	8002646 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002642:	23bc      	movs	r3, #188	@ 0xbc
 8002644:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3318      	adds	r3, #24
 8002656:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800265a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	b298      	uxth	r0, r3
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3328      	adds	r3, #40	@ 0x28
 8002670:	4602      	mov	r2, r0
 8002672:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	b29b      	uxth	r3, r3
 800267c:	787c      	ldrb	r4, [r7, #1]
 800267e:	78ba      	ldrb	r2, [r7, #2]
 8002680:	78f9      	ldrb	r1, [r7, #3]
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4623      	mov	r3, r4
 8002692:	f005 fced 	bl	8008070 <USB_HC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	4608      	mov	r0, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	70fb      	strb	r3, [r7, #3]
 80026be:	460b      	mov	r3, r1
 80026c0:	70bb      	strb	r3, [r7, #2]
 80026c2:	4613      	mov	r3, r2
 80026c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3317      	adds	r3, #23
 80026d6:	78ba      	ldrb	r2, [r7, #2]
 80026d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3326      	adds	r3, #38	@ 0x26
 80026ea:	787a      	ldrb	r2, [r7, #1]
 80026ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ee:	7c3b      	ldrb	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d114      	bne.n	800271e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	332a      	adds	r3, #42	@ 0x2a
 8002704:	2203      	movs	r2, #3
 8002706:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3319      	adds	r3, #25
 8002718:	7f3a      	ldrb	r2, [r7, #28]
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e009      	b.n	8002732 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	332a      	adds	r3, #42	@ 0x2a
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002732:	787b      	ldrb	r3, [r7, #1]
 8002734:	2b03      	cmp	r3, #3
 8002736:	f200 8102 	bhi.w	800293e <HAL_HCD_HC_SubmitRequest+0x292>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <HAL_HCD_HC_SubmitRequest+0x94>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002751 	.word	0x08002751
 8002744:	08002929 	.word	0x08002929
 8002748:	08002815 	.word	0x08002815
 800274c:	0800289f 	.word	0x0800289f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002750:	7c3b      	ldrb	r3, [r7, #16]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 80f5 	bne.w	8002942 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002758:	78bb      	ldrb	r3, [r7, #2]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d12d      	bne.n	80027ba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800275e:	8b3b      	ldrh	r3, [r7, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	333d      	adds	r3, #61	@ 0x3d
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	333d      	adds	r3, #61	@ 0x3d
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	332a      	adds	r3, #42	@ 0x2a
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80027a2:	e0ce      	b.n	8002942 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	332a      	adds	r3, #42	@ 0x2a
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
      break;
 80027b8:	e0c3      	b.n	8002942 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	331a      	adds	r3, #26
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 80b8 	bne.w	8002942 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	333c      	adds	r3, #60	@ 0x3c
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	332a      	adds	r3, #42	@ 0x2a
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
      break;
 80027fc:	e0a1      	b.n	8002942 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	332a      	adds	r3, #42	@ 0x2a
 800280e:	2202      	movs	r2, #2
 8002810:	701a      	strb	r2, [r3, #0]
      break;
 8002812:	e096      	b.n	8002942 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002814:	78bb      	ldrb	r3, [r7, #2]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d120      	bne.n	800285c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	333d      	adds	r3, #61	@ 0x3d
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	332a      	adds	r3, #42	@ 0x2a
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002844:	e07e      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	332a      	adds	r3, #42	@ 0x2a
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	e073      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	333c      	adds	r3, #60	@ 0x3c
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	332a      	adds	r3, #42	@ 0x2a
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
      break;
 8002886:	e05d      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	332a      	adds	r3, #42	@ 0x2a
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
      break;
 800289c:	e052      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800289e:	78bb      	ldrb	r3, [r7, #2]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d120      	bne.n	80028e6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	333d      	adds	r3, #61	@ 0x3d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	332a      	adds	r3, #42	@ 0x2a
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028ce:	e039      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	332a      	adds	r3, #42	@ 0x2a
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
      break;
 80028e4:	e02e      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	333c      	adds	r3, #60	@ 0x3c
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	332a      	adds	r3, #42	@ 0x2a
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
      break;
 8002910:	e018      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	332a      	adds	r3, #42	@ 0x2a
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
      break;
 8002926:	e00d      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	332a      	adds	r3, #42	@ 0x2a
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
      break;
 800293c:	e002      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002942:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	332c      	adds	r3, #44	@ 0x2c
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	8b39      	ldrh	r1, [r7, #24]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	3334      	adds	r3, #52	@ 0x34
 800296a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334c      	adds	r3, #76	@ 0x4c
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3338      	adds	r3, #56	@ 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3315      	adds	r3, #21
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	3310      	adds	r3, #16
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	1d19      	adds	r1, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	799b      	ldrb	r3, [r3, #6]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f005 fc76 	bl	80082c8 <USB_HC_StartXfer>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 f964 	bl	8007ccc <USB_GetMode>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f040 80fb 	bne.w	8002c02 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f005 f927 	bl	8007c64 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80f1 	beq.w	8002c00 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f005 f91e 	bl	8007c64 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a32:	d104      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f005 f90e 	bl	8007c64 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a52:	d104      	bne.n	8002a5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 f8fe 	bl	8007c64 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a72:	d104      	bne.n	8002a7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 f8ee 	bl	8007c64 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d103      	bne.n	8002a9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2202      	movs	r2, #2
 8002a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 f8e0 	bl	8007c64 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aae:	d120      	bne.n	8002af2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ab8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d113      	bne.n	8002af2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002aca:	2110      	movs	r1, #16
 8002acc:	6938      	ldr	r0, [r7, #16]
 8002ace:	f004 ffd3 	bl	8007a78 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ad2:	6938      	ldr	r0, [r7, #16]
 8002ad4:	f005 f802 	bl	8007adc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7a5b      	ldrb	r3, [r3, #9]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d105      	bne.n	8002aec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 f9fa 	bl	8007ee0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f009 fb99 	bl	800c224 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f005 f8b4 	bl	8007c64 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b06:	d102      	bne.n	8002b0e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f001 fd4d 	bl	80045a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 f8a6 	bl	8007c64 <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d106      	bne.n	8002b30 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f009 fb62 	bl	800c1ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 f895 	bl	8007c64 <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b44:	d139      	bne.n	8002bba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f005 fe36 	bl	80087bc <USB_HC_ReadInterrupt>
 8002b50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e025      	b.n	8002ba4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d018      	beq.n	8002b9e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b82:	d106      	bne.n	8002b92 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f905 	bl	8002d9a <HCD_HC_IN_IRQHandler>
 8002b90:	e005      	b.n	8002b9e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 ff67 	bl	8003a6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	795b      	ldrb	r3, [r3, #5]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d3d3      	bcc.n	8002b58 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f005 f850 	bl	8007c64 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d101      	bne.n	8002bd2 <HAL_HCD_IRQHandler+0x1ea>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_HCD_IRQHandler+0x1ec>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d014      	beq.n	8002c02 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0210 	bic.w	r2, r2, #16
 8002be6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 fbfe 	bl	80043ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0210 	orr.w	r2, r2, #16
 8002bfc:	619a      	str	r2, [r3, #24]
 8002bfe:	e000      	b.n	8002c02 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002c00:	bf00      	nop
    }
  }
}
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_HCD_Start+0x16>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e013      	b.n	8002c46 <HAL_HCD_Start+0x3e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 f9be 	bl	8007fae <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 feb0 	bl	800799c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_HCD_Stop+0x16>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e00d      	b.n	8002c80 <HAL_HCD_Stop+0x32>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 ff11 	bl	8008a98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 f960 	bl	8007f5a <USB_ResetPort>
 8002c9a:	4603      	mov	r3, r0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334c      	adds	r3, #76	@ 0x4c
 8002cc0:	781b      	ldrb	r3, [r3, #0]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3338      	adds	r3, #56	@ 0x38
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 f9a2 	bl	800804e <USB_GetCurrentFrame>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 f97d 	bl	8008020 <USB_GetHostSpeed>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	331a      	adds	r3, #26
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	331b      	adds	r3, #27
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3325      	adds	r3, #37	@ 0x25
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3324      	adds	r3, #36	@ 0x24
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 ff66 	bl	8007c8a <USB_ReadChInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d11a      	bne.n	8002dfe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	334d      	adds	r3, #77	@ 0x4d
 8002dea:	2207      	movs	r2, #7
 8002dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f005 fcf1 	bl	80087de <USB_HC_Halt>
 8002dfc:	e09e      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f004 ff3f 	bl	8007c8a <USB_ReadChInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d11b      	bne.n	8002e50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e24:	461a      	mov	r2, r3
 8002e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	@ 0x4d
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 fcc8 	bl	80087de <USB_HC_Halt>
 8002e4e:	e075      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 ff16 	bl	8007c8a <USB_ReadChInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d11a      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	2308      	movs	r3, #8
 8002e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334d      	adds	r3, #77	@ 0x4d
 8002e8a:	2206      	movs	r2, #6
 8002e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f005 fca1 	bl	80087de <USB_HC_Halt>
 8002e9c:	e04e      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 feef 	bl	8007c8a <USB_ReadChInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d11b      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334d      	adds	r3, #77	@ 0x4d
 8002edc:	2209      	movs	r2, #9
 8002ede:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fc78 	bl	80087de <USB_HC_Halt>
 8002eee:	e025      	b.n	8002f3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fec6 	bl	8007c8a <USB_ReadChInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d119      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f14:	461a      	mov	r2, r3
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334d      	adds	r3, #77	@ 0x4d
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 fc51 	bl	80087de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fea0 	bl	8007c8a <USB_ReadChInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f54:	d112      	bne.n	8002f7c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f005 fc3d 	bl	80087de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f76:	6093      	str	r3, [r2, #8]
 8002f78:	f000 bd75 	b.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fe80 	bl	8007c8a <USB_ReadChInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 8128 	bne.w	80031e6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	331b      	adds	r3, #27
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d119      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	331b      	adds	r3, #27
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	0151      	lsls	r1, r2, #5
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	440a      	add	r2, r1
 8002fe8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	799b      	ldrb	r3, [r3, #6]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3330      	adds	r3, #48	@ 0x30
 800300a:	6819      	ldr	r1, [r3, #0]
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	1ac9      	subs	r1, r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4403      	add	r3, r0
 800302e:	3338      	adds	r3, #56	@ 0x38
 8003030:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334d      	adds	r3, #77	@ 0x4d
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	@ 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2301      	movs	r3, #1
 800306a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3326      	adds	r3, #38	@ 0x26
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3326      	adds	r3, #38	@ 0x26
 8003092:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003094:	2b02      	cmp	r3, #2
 8003096:	d110      	bne.n	80030ba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 fb9c 	bl	80087de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	2310      	movs	r3, #16
 80030b6:	6093      	str	r3, [r2, #8]
 80030b8:	e03d      	b.n	8003136 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3326      	adds	r3, #38	@ 0x26
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d00a      	beq.n	80030e6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3326      	adds	r3, #38	@ 0x26
 80030e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d127      	bne.n	8003136 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	0151      	lsls	r1, r2, #5
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	440a      	add	r2, r1
 80030fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003104:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334c      	adds	r3, #76	@ 0x4c
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334c      	adds	r3, #76	@ 0x4c
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f009 f885 	bl	800c240 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	799b      	ldrb	r3, [r3, #6]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d13b      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3338      	adds	r3, #56	@ 0x38
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4403      	add	r3, r0
 800315e:	3328      	adds	r3, #40	@ 0x28
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	440b      	add	r3, r1
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4403      	add	r3, r0
 8003174:	3328      	adds	r3, #40	@ 0x28
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	fbb1 f3f3 	udiv	r3, r1, r3
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8470 	beq.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333c      	adds	r3, #60	@ 0x3c
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	f083 0301 	eor.w	r3, r3, #1
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	333c      	adds	r3, #60	@ 0x3c
 80031ae:	4602      	mov	r2, r0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	f000 bc58 	b.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	333c      	adds	r3, #60	@ 0x3c
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2d8      	uxtb	r0, r3
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	333c      	adds	r3, #60	@ 0x3c
 80031de:	4602      	mov	r2, r0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	f000 bc40 	b.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fd4b 	bl	8007c8a <USB_ReadChInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d131      	bne.n	8003262 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2320      	movs	r3, #32
 800320e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	331a      	adds	r3, #26
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	f040 841f 	bne.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	331b      	adds	r3, #27
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	334d      	adds	r3, #77	@ 0x4d
 800324c:	2203      	movs	r2, #3
 800324e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f005 fac0 	bl	80087de <USB_HC_Halt>
 800325e:	f000 bc02 	b.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f004 fd0d 	bl	8007c8a <USB_ReadChInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	f040 8305 	bne.w	8003886 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2302      	movs	r3, #2
 800328c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d114      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e2cc      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d114      	bne.n	800330e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	2202      	movs	r2, #2
 80032f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334c      	adds	r3, #76	@ 0x4c
 8003308:	2205      	movs	r2, #5
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e2ac      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b07      	cmp	r3, #7
 8003322:	d00b      	beq.n	800333c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003336:	2b09      	cmp	r3, #9
 8003338:	f040 80a6 	bne.w	8003488 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	@ 0x4d
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3344      	adds	r3, #68	@ 0x44
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4403      	add	r3, r0
 8003370:	3344      	adds	r3, #68	@ 0x44
 8003372:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3344      	adds	r3, #68	@ 0x44
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d943      	bls.n	8003412 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3344      	adds	r3, #68	@ 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	331a      	adds	r3, #26
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d123      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	331b      	adds	r3, #27
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	331c      	adds	r3, #28
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	@ 0x4c
 800340c:	2204      	movs	r2, #4
 800340e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003410:	e229      	b.n	8003866 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334c      	adds	r3, #76	@ 0x4c
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3326      	adds	r3, #38	@ 0x26
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3326      	adds	r3, #38	@ 0x26
 800344c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800344e:	2b02      	cmp	r3, #2
 8003450:	f040 8209 	bne.w	8003866 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003472:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003486:	e1ee      	b.n	8003866 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b05      	cmp	r3, #5
 800349c:	f040 80c8 	bne.w	8003630 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334d      	adds	r3, #77	@ 0x4d
 80034b0:	2202      	movs	r2, #2
 80034b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	331b      	adds	r3, #27
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	f040 81ce 	bne.w	8003868 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3326      	adds	r3, #38	@ 0x26
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d16b      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3348      	adds	r3, #72	@ 0x48
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	1c59      	adds	r1, r3, #1
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	3348      	adds	r3, #72	@ 0x48
 8003504:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3348      	adds	r3, #72	@ 0x48
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d943      	bls.n	80035a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3348      	adds	r3, #72	@ 0x48
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	331b      	adds	r3, #27
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3344      	adds	r3, #68	@ 0x44
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d809      	bhi.n	800356e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	331c      	adds	r3, #28
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	0151      	lsls	r1, r2, #5
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	440a      	add	r2, r1
 8003584:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334c      	adds	r3, #76	@ 0x4c
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e014      	b.n	80035ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	@ 0x4c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e009      	b.n	80035ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	334c      	adds	r3, #76	@ 0x4c
 80035ca:	2202      	movs	r2, #2
 80035cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3326      	adds	r3, #38	@ 0x26
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3326      	adds	r3, #38	@ 0x26
 80035f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 8136 	bne.w	8003868 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003612:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800361a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e11b      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334d      	adds	r3, #77	@ 0x4d
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b03      	cmp	r3, #3
 8003644:	f040 8081 	bne.w	800374a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	334d      	adds	r3, #77	@ 0x4d
 8003658:	2202      	movs	r2, #2
 800365a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	331b      	adds	r3, #27
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 80fa 	bne.w	8003868 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	@ 0x4c
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	440a      	add	r2, r1
 800369e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036c6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e2:	f023 0320 	bic.w	r3, r3, #32
 80036e6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3326      	adds	r3, #38	@ 0x26
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3326      	adds	r3, #38	@ 0x26
 800370e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003710:	2b02      	cmp	r3, #2
 8003712:	f040 80a9 	bne.w	8003868 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800372c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003734:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e08e      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	334d      	adds	r3, #77	@ 0x4d
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d143      	bne.n	80037e8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334d      	adds	r3, #77	@ 0x4d
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334c      	adds	r3, #76	@ 0x4c
 8003784:	2202      	movs	r2, #2
 8003786:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3326      	adds	r3, #38	@ 0x26
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3326      	adds	r3, #38	@ 0x26
 80037ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d159      	bne.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	461a      	mov	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e03f      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	334d      	adds	r3, #77	@ 0x4d
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d126      	bne.n	800384c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	334d      	adds	r3, #77	@ 0x4d
 800380e:	2202      	movs	r2, #2
 8003810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3344      	adds	r3, #68	@ 0x44
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1c59      	adds	r1, r3, #1
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	3344      	adds	r3, #68	@ 0x44
 8003834:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334c      	adds	r3, #76	@ 0x4c
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e00d      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334d      	adds	r3, #77	@ 0x4d
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	f000 8100 	beq.w	8003a64 <HCD_HC_IN_IRQHandler+0xcca>
 8003864:	e000      	b.n	8003868 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003866:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	@ 0x4c
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f008 fcde 	bl	800c240 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003884:	e0ef      	b.n	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f004 f9fb 	bl	8007c8a <USB_ReadChInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d12f      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038aa:	461a      	mov	r2, r3
 80038ac:	2340      	movs	r3, #64	@ 0x40
 80038ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334d      	adds	r3, #77	@ 0x4d
 80038c0:	2205      	movs	r2, #5
 80038c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331a      	adds	r3, #26
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3344      	adds	r3, #68	@ 0x44
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 ff71 	bl	80087de <USB_HC_Halt>
 80038fc:	e0b3      	b.n	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f004 f9bf 	bl	8007c8a <USB_ReadChInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	f040 80a7 	bne.w	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3326      	adds	r3, #38	@ 0x26
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d11b      	bne.n	8003966 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3344      	adds	r3, #68	@ 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	334d      	adds	r3, #77	@ 0x4d
 8003952:	2204      	movs	r2, #4
 8003954:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f004 ff3d 	bl	80087de <USB_HC_Halt>
 8003964:	e03f      	b.n	80039e6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3326      	adds	r3, #38	@ 0x26
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3326      	adds	r3, #38	@ 0x26
 800398c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800398e:	2b02      	cmp	r3, #2
 8003990:	d129      	bne.n	80039e6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3344      	adds	r3, #68	@ 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	799b      	ldrb	r3, [r3, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HCD_HC_IN_IRQHandler+0xc2a>
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	331b      	adds	r3, #27
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d110      	bne.n	80039e6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	2204      	movs	r2, #4
 80039d6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f004 fefc 	bl	80087de <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	331b      	adds	r3, #27
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d129      	bne.n	8003a50 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	331b      	adds	r3, #27
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	0151      	lsls	r1, r2, #5
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	440a      	add	r2, r1
 8003a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a4a:	f043 0320 	orr.w	r3, r3, #32
 8003a4e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2310      	movs	r3, #16
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e000      	b.n	8003a66 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a64:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 f8fd 	bl	8007c8a <USB_ReadChInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d11b      	bne.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	2207      	movs	r2, #7
 8003abe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fe88 	bl	80087de <USB_HC_Halt>
 8003ace:	f000 bc89 	b.w	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 f8d5 	bl	8007c8a <USB_ReadChInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	f040 8082 	bne.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af8:	461a      	mov	r2, r3
 8003afa:	2320      	movs	r3, #32
 8003afc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3319      	adds	r3, #25
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d124      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3319      	adds	r3, #25
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	334c      	adds	r3, #76	@ 0x4c
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334d      	adds	r3, #77	@ 0x4d
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fe40 	bl	80087de <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	331a      	adds	r3, #26
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 8437 	bne.w	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	331b      	adds	r3, #27
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 842b 	bne.w	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3326      	adds	r3, #38	@ 0x26
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d009      	beq.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	331b      	adds	r3, #27
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334d      	adds	r3, #77	@ 0x4d
 8003bc8:	2203      	movs	r2, #3
 8003bca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f004 fe02 	bl	80087de <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3344      	adds	r3, #68	@ 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e3f9      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 f846 	bl	8007c8a <USB_ReadChInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c08:	d111      	bne.n	8003c2e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fdd9 	bl	80087de <USB_HC_Halt>
 8003c2c:	e3da      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 f827 	bl	8007c8a <USB_ReadChInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d168      	bne.n	8003d18 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	3344      	adds	r3, #68	@ 0x44
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 f811 	bl	8007c8a <USB_ReadChInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d112      	bne.n	8003c98 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3319      	adds	r3, #25
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c92:	461a      	mov	r2, r3
 8003c94:	2340      	movs	r3, #64	@ 0x40
 8003c96:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	331b      	adds	r3, #27
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	331b      	adds	r3, #27
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	334d      	adds	r3, #77	@ 0x4d
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 fd64 	bl	80087de <USB_HC_Halt>
 8003d16:	e365      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 ffb2 	bl	8007c8a <USB_ReadChInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2c:	2b40      	cmp	r3, #64	@ 0x40
 8003d2e:	d139      	bne.n	8003da4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	334d      	adds	r3, #77	@ 0x4d
 8003d40:	2205      	movs	r2, #5
 8003d42:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	331a      	adds	r3, #26
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3319      	adds	r3, #25
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3344      	adds	r3, #68	@ 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 fd27 	bl	80087de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2340      	movs	r3, #64	@ 0x40
 8003da0:	6093      	str	r3, [r2, #8]
 8003da2:	e31f      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 ff6c 	bl	8007c8a <USB_ReadChInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d11a      	bne.n	8003df2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2308      	movs	r3, #8
 8003dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334d      	adds	r3, #77	@ 0x4d
 8003dde:	2206      	movs	r2, #6
 8003de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fcf7 	bl	80087de <USB_HC_Halt>
 8003df0:	e2f8      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 ff45 	bl	8007c8a <USB_ReadChInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d144      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3344      	adds	r3, #68	@ 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	334d      	adds	r3, #77	@ 0x4d
 8003e2e:	2204      	movs	r2, #4
 8003e30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3319      	adds	r3, #25
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d114      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3318      	adds	r3, #24
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3319      	adds	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 fcaf 	bl	80087de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2310      	movs	r3, #16
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	e2a7      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 fef4 	bl	8007c8a <USB_ReadChInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b80      	cmp	r3, #128	@ 0x80
 8003eaa:	f040 8083 	bne.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	799b      	ldrb	r3, [r3, #6]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d111      	bne.n	8003eda <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	334d      	adds	r3, #77	@ 0x4d
 8003ec6:	2207      	movs	r2, #7
 8003ec8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 fc83 	bl	80087de <USB_HC_Halt>
 8003ed8:	e062      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3344      	adds	r3, #68	@ 0x44
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	1c59      	adds	r1, r3, #1
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4403      	add	r3, r0
 8003efa:	3344      	adds	r3, #68	@ 0x44
 8003efc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3344      	adds	r3, #68	@ 0x44
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d922      	bls.n	8003f5a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3344      	adds	r3, #68	@ 0x44
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	@ 0x4c
 8003f38:	2204      	movs	r2, #4
 8003f3a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334c      	adds	r3, #76	@ 0x4c
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f008 f974 	bl	800c240 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f58:	e022      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	334c      	adds	r3, #76	@ 0x4c
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f84:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f8c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fac:	461a      	mov	r2, r3
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	6093      	str	r3, [r2, #8]
 8003fb2:	e217      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fe64 	bl	8007c8a <USB_ReadChInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fcc:	d11b      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	334d      	adds	r3, #77	@ 0x4d
 8003fde:	2209      	movs	r2, #9
 8003fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fbf7 	bl	80087de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	e1ee      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f003 fe3b 	bl	8007c8a <USB_ReadChInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	f040 81df 	bne.w	80043de <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402c:	461a      	mov	r2, r3
 800402e:	2302      	movs	r3, #2
 8004030:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	334d      	adds	r3, #77	@ 0x4d
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8093 	bne.w	8004170 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334d      	adds	r3, #77	@ 0x4d
 800405a:	2202      	movs	r2, #2
 800405c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	334c      	adds	r3, #76	@ 0x4c
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	3326      	adds	r3, #38	@ 0x26
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d00b      	beq.n	80040a0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	3326      	adds	r3, #38	@ 0x26
 8004098:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800409a:	2b03      	cmp	r3, #3
 800409c:	f040 8190 	bne.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	799b      	ldrb	r3, [r3, #6]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d115      	bne.n	80040d4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	333d      	adds	r3, #61	@ 0x3d
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2d8      	uxtb	r0, r3
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	333d      	adds	r3, #61	@ 0x3d
 80040d0:	4602      	mov	r2, r0
 80040d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	799b      	ldrb	r3, [r3, #6]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 8171 	bne.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3334      	adds	r3, #52	@ 0x34
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8165 	beq.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3334      	adds	r3, #52	@ 0x34
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	440b      	add	r3, r1
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3328      	adds	r3, #40	@ 0x28
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	fbb1 f3f3 	udiv	r3, r1, r3
 8004134:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 813f 	beq.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	333d      	adds	r3, #61	@ 0x3d
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	f083 0301 	eor.w	r3, r3, #1
 800415a:	b2d8      	uxtb	r0, r3
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	333d      	adds	r3, #61	@ 0x3d
 800416a:	4602      	mov	r2, r0
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e127      	b.n	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	334d      	adds	r3, #77	@ 0x4d
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d120      	bne.n	80041c8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	334d      	adds	r3, #77	@ 0x4d
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	331b      	adds	r3, #27
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f040 8107 	bne.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334c      	adds	r3, #76	@ 0x4c
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e0fb      	b.n	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	334d      	adds	r3, #77	@ 0x4d
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d13a      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334d      	adds	r3, #77	@ 0x4d
 80041ee:	2202      	movs	r2, #2
 80041f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	334c      	adds	r3, #76	@ 0x4c
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	331b      	adds	r3, #27
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	f040 80d1 	bne.w	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	331b      	adds	r3, #27
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	440a      	add	r2, r1
 8004248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800424c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	e0b5      	b.n	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	334d      	adds	r3, #77	@ 0x4d
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d114      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334d      	adds	r3, #77	@ 0x4d
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	334c      	adds	r3, #76	@ 0x4c
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e095      	b.n	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	334d      	adds	r3, #77	@ 0x4d
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d114      	bne.n	80042d4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	334d      	adds	r3, #77	@ 0x4d
 80042ba:	2202      	movs	r2, #2
 80042bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334c      	adds	r3, #76	@ 0x4c
 80042ce:	2205      	movs	r2, #5
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	e075      	b.n	80043c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	334d      	adds	r3, #77	@ 0x4d
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b07      	cmp	r3, #7
 80042e8:	d00a      	beq.n	8004300 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	334d      	adds	r3, #77	@ 0x4d
 80042fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	d170      	bne.n	80043e2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334d      	adds	r3, #77	@ 0x4d
 8004310:	2202      	movs	r2, #2
 8004312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3344      	adds	r3, #68	@ 0x44
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4403      	add	r3, r0
 8004334:	3344      	adds	r3, #68	@ 0x44
 8004336:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3344      	adds	r3, #68	@ 0x44
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d914      	bls.n	8004378 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3344      	adds	r3, #68	@ 0x44
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	334c      	adds	r3, #76	@ 0x4c
 8004372:	2204      	movs	r2, #4
 8004374:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004376:	e022      	b.n	80043be <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334c      	adds	r3, #76	@ 0x4c
 8004388:	2202      	movs	r2, #2
 800438a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b8:	461a      	mov	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334c      	adds	r3, #76	@ 0x4c
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f007 ff32 	bl	800c240 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043dc:	e002      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80043e2:	bf00      	nop
  }
}
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08a      	sub	sp, #40	@ 0x28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	0c5b      	lsrs	r3, r3, #17
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800441e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d004      	beq.n	8004430 <HCD_RXQLVL_IRQHandler+0x46>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b05      	cmp	r3, #5
 800442a:	f000 80b6 	beq.w	800459a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800442e:	e0b7      	b.n	80045a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80b3 	beq.w	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	332c      	adds	r3, #44	@ 0x2c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80a7 	beq.w	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3338      	adds	r3, #56	@ 0x38
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	18d1      	adds	r1, r2, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4403      	add	r3, r0
 8004474:	3334      	adds	r3, #52	@ 0x34
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4299      	cmp	r1, r3
 800447a:	f200 8083 	bhi.w	8004584 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	332c      	adds	r3, #44	@ 0x2c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	b292      	uxth	r2, r2
 8004498:	4619      	mov	r1, r3
 800449a:	f003 fb8b 	bl	8007bb4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	332c      	adds	r3, #44	@ 0x2c
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	18d1      	adds	r1, r2, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4403      	add	r3, r0
 80044c2:	332c      	adds	r3, #44	@ 0x2c
 80044c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3338      	adds	r3, #56	@ 0x38
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	18d1      	adds	r1, r2, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4403      	add	r3, r0
 80044ea:	3338      	adds	r3, #56	@ 0x38
 80044ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	0cdb      	lsrs	r3, r3, #19
 80044fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004502:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3328      	adds	r3, #40	@ 0x28
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4293      	cmp	r3, r2
 800451c:	d13f      	bne.n	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d03c      	beq.n	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800453a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004542:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	333c      	adds	r3, #60	@ 0x3c
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2d8      	uxtb	r0, r3
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	333c      	adds	r3, #60	@ 0x3c
 800457e:	4602      	mov	r2, r0
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	e00c      	b.n	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	334c      	adds	r3, #76	@ 0x4c
 8004594:	2204      	movs	r2, #4
 8004596:	701a      	strb	r2, [r3, #0]
      break;
 8004598:	e001      	b.n	800459e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800459e:	bf00      	nop
  }
}
 80045a0:	bf00      	nop
 80045a2:	3728      	adds	r7, #40	@ 0x28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80045d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d10b      	bne.n	80045f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d102      	bne.n	80045f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f007 fe0c 	bl	800c208 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d132      	bne.n	8004668 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d126      	bne.n	8004662 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7a5b      	ldrb	r3, [r3, #9]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d113      	bne.n	8004644 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004622:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004626:	d106      	bne.n	8004636 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f003 fc56 	bl	8007ee0 <USB_InitFSLSPClkSel>
 8004634:	e011      	b.n	800465a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f003 fc4f 	bl	8007ee0 <USB_InitFSLSPClkSel>
 8004642:	e00a      	b.n	800465a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	79db      	ldrb	r3, [r3, #7]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004652:	461a      	mov	r2, r3
 8004654:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004658:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f007 fdfe 	bl	800c25c <HAL_HCD_PortEnabled_Callback>
 8004660:	e002      	b.n	8004668 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f007 fe08 	bl	800c278 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d103      	bne.n	800467a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6013      	str	r3, [r2, #0]
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e12b      	b.n	80048fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fa12 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	@ 0x24
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046f4:	f000 fd40 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 80046f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4a81      	ldr	r2, [pc, #516]	@ (8004904 <HAL_I2C_Init+0x274>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d807      	bhi.n	8004714 <HAL_I2C_Init+0x84>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a80      	ldr	r2, [pc, #512]	@ (8004908 <HAL_I2C_Init+0x278>)
 8004708:	4293      	cmp	r3, r2
 800470a:	bf94      	ite	ls
 800470c:	2301      	movls	r3, #1
 800470e:	2300      	movhi	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e006      	b.n	8004722 <HAL_I2C_Init+0x92>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a7d      	ldr	r2, [pc, #500]	@ (800490c <HAL_I2C_Init+0x27c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	bf94      	ite	ls
 800471c:	2301      	movls	r3, #1
 800471e:	2300      	movhi	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0e7      	b.n	80048fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a78      	ldr	r2, [pc, #480]	@ (8004910 <HAL_I2C_Init+0x280>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	0c9b      	lsrs	r3, r3, #18
 8004734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a6a      	ldr	r2, [pc, #424]	@ (8004904 <HAL_I2C_Init+0x274>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d802      	bhi.n	8004764 <HAL_I2C_Init+0xd4>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	3301      	adds	r3, #1
 8004762:	e009      	b.n	8004778 <HAL_I2C_Init+0xe8>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	4a69      	ldr	r2, [pc, #420]	@ (8004914 <HAL_I2C_Init+0x284>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	3301      	adds	r3, #1
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	430b      	orrs	r3, r1
 800477e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800478a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	495c      	ldr	r1, [pc, #368]	@ (8004904 <HAL_I2C_Init+0x274>)
 8004794:	428b      	cmp	r3, r1
 8004796:	d819      	bhi.n	80047cc <HAL_I2C_Init+0x13c>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e59      	subs	r1, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a6:	1c59      	adds	r1, r3, #1
 80047a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047ac:	400b      	ands	r3, r1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_I2C_Init+0x138>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1e59      	subs	r1, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c6:	e051      	b.n	800486c <HAL_I2C_Init+0x1dc>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e04f      	b.n	800486c <HAL_I2C_Init+0x1dc>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d111      	bne.n	80047f8 <HAL_I2C_Init+0x168>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e58      	subs	r0, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	440b      	add	r3, r1
 80047e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e6:	3301      	adds	r3, #1
 80047e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e012      	b.n	800481e <HAL_I2C_Init+0x18e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1e58      	subs	r0, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	0099      	lsls	r1, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	fbb0 f3f3 	udiv	r3, r0, r3
 800480e:	3301      	adds	r3, #1
 8004810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Init+0x196>
 8004822:	2301      	movs	r3, #1
 8004824:	e022      	b.n	800486c <HAL_I2C_Init+0x1dc>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10e      	bne.n	800484c <HAL_I2C_Init+0x1bc>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1e58      	subs	r0, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	440b      	add	r3, r1
 800483c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484a:	e00f      	b.n	800486c <HAL_I2C_Init+0x1dc>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1e58      	subs	r0, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	0099      	lsls	r1, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004862:	3301      	adds	r3, #1
 8004864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	6809      	ldr	r1, [r1, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800489a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6911      	ldr	r1, [r2, #16]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68d2      	ldr	r2, [r2, #12]
 80048a6:	4311      	orrs	r1, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	000186a0 	.word	0x000186a0
 8004908:	001e847f 	.word	0x001e847f
 800490c:	003d08ff 	.word	0x003d08ff
 8004910:	431bde83 	.word	0x431bde83
 8004914:	10624dd3 	.word	0x10624dd3

08004918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e267      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d075      	beq.n	8004a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004936:	4b88      	ldr	r3, [pc, #544]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b85      	ldr	r3, [pc, #532]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800494a:	2b08      	cmp	r3, #8
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b82      	ldr	r3, [pc, #520]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e242      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x74>
 800497e:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a75      	ldr	r2, [pc, #468]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b70      	ldr	r3, [pc, #448]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6f      	ldr	r2, [pc, #444]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 80049b0:	4b69      	ldr	r3, [pc, #420]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fc fede 	bl	8001790 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fc feda 	bl	8001790 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	@ 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e207      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xc0>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fc feca 	bl	8001790 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fc fec6 	bl	8001790 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1f3      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b51      	ldr	r3, [pc, #324]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0xe8>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b47      	ldr	r3, [pc, #284]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b44      	ldr	r3, [pc, #272]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c7      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4937      	ldr	r1, [pc, #220]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fc fe7f 	bl	8001790 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fc fe7b 	bl	8001790 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1a8      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4925      	ldr	r1, [pc, #148]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fc fe5e 	bl	8001790 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fc fe5a 	bl	8001790 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e187      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d036      	beq.n	8004b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fe3e 	bl	8001790 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fc fe3a 	bl	8001790 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e167      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x200>
 8004b36:	e01b      	b.n	8004b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fc fe27 	bl	8001790 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e00e      	b.n	8004b64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fc fe23 	bl	8001790 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d907      	bls.n	8004b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e150      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470000 	.word	0x42470000
 8004b60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b64:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ea      	bne.n	8004b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8097 	beq.w	8004cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b81      	ldr	r3, [pc, #516]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b7d      	ldr	r3, [pc, #500]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	4a7c      	ldr	r2, [pc, #496]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b77      	ldr	r3, [pc, #476]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b74      	ldr	r3, [pc, #464]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a73      	ldr	r2, [pc, #460]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fc fde3 	bl	8001790 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fddf 	bl	8001790 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e10c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2ea>
 8004bf4:	4b64      	ldr	r3, [pc, #400]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	4a63      	ldr	r2, [pc, #396]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c00:	e01c      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x30c>
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c16:	4b5c      	ldr	r3, [pc, #368]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c24:	4b58      	ldr	r3, [pc, #352]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	4a57      	ldr	r2, [pc, #348]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c30:	4b55      	ldr	r3, [pc, #340]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c34:	4a54      	ldr	r2, [pc, #336]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 0304 	bic.w	r3, r3, #4
 8004c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fc fda4 	bl	8001790 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fc fda0 	bl	8001790 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0cb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	4b49      	ldr	r3, [pc, #292]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ee      	beq.n	8004c4c <HAL_RCC_OscConfig+0x334>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fc fd8e 	bl	8001790 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fc fd8a 	bl	8001790 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0b5      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ee      	bne.n	8004c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4b39      	ldr	r3, [pc, #228]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	4a38      	ldr	r2, [pc, #224]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a1 	beq.w	8004df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb6:	4b34      	ldr	r3, [pc, #208]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d05c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d141      	bne.n	8004d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fc fd5e 	bl	8001790 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fc fd5a 	bl	8001790 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e087      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	491b      	ldr	r1, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d20:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fc fd33 	bl	8001790 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fc fd2f 	bl	8001790 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e05c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x416>
 8004d4c:	e054      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b10      	ldr	r3, [pc, #64]	@ (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fc fd1c 	bl	8001790 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fc fd18 	bl	8001790 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e045      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x444>
 8004d7a:	e03d      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e038      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d94:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d028      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d121      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11a      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d111      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d107      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0cc      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b68      	ldr	r3, [pc, #416]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90c      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b65      	ldr	r3, [pc, #404]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e74:	4b53      	ldr	r3, [pc, #332]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a52      	ldr	r2, [pc, #328]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b50      	ldr	r3, [pc, #320]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	494d      	ldr	r1, [pc, #308]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d044      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d119      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e067      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4934      	ldr	r1, [pc, #208]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fc fc4a 	bl	8001790 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fc fc46 	bl	8001790 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20c      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b22      	ldr	r3, [pc, #136]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e032      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4916      	ldr	r1, [pc, #88]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7a:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490e      	ldr	r1, [pc, #56]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f8e:	f000 f821 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490a      	ldr	r1, [pc, #40]	@ (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc fbaa 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023c00 	.word	0x40023c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800c948 	.word	0x0800c948
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	20000004 	.word	0x20000004

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b090      	sub	sp, #64	@ 0x40
 8004fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fec:	4b59      	ldr	r3, [pc, #356]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	f200 80a1 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x34>
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x3a>
 8005006:	e09b      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 800500a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800500c:	e09b      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b53      	ldr	r3, [pc, #332]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005012:	e098      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b4f      	ldr	r3, [pc, #316]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b4d      	ldr	r3, [pc, #308]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d028      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b4a      	ldr	r3, [pc, #296]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	2200      	movs	r2, #0
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	627a      	str	r2, [r7, #36]	@ 0x24
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800503c:	2100      	movs	r1, #0
 800503e:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005040:	fb03 f201 	mul.w	r2, r3, r1
 8005044:	2300      	movs	r3, #0
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	4413      	add	r3, r2
 800504c:	4a43      	ldr	r2, [pc, #268]	@ (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 800504e:	fba0 1202 	umull	r1, r2, r0, r2
 8005052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005054:	460a      	mov	r2, r1
 8005056:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800505a:	4413      	add	r3, r2
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	2200      	movs	r2, #0
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800506e:	f7fb f8ab 	bl	80001c8 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4613      	mov	r3, r2
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800507a:	e053      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507c:	4b35      	ldr	r3, [pc, #212]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	2200      	movs	r2, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	617a      	str	r2, [r7, #20]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800508e:	f04f 0b00 	mov.w	fp, #0
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	0159      	lsls	r1, r3, #5
 80050a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a4:	0150      	lsls	r0, r2, #5
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	ebb2 080a 	subs.w	r8, r2, sl
 80050ae:	eb63 090b 	sbc.w	r9, r3, fp
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050c6:	ebb2 0408 	subs.w	r4, r2, r8
 80050ca:	eb63 0509 	sbc.w	r5, r3, r9
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	00eb      	lsls	r3, r5, #3
 80050d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050dc:	00e2      	lsls	r2, r4, #3
 80050de:	4614      	mov	r4, r2
 80050e0:	461d      	mov	r5, r3
 80050e2:	eb14 030a 	adds.w	r3, r4, sl
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	eb45 030b 	adc.w	r3, r5, fp
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	2200      	movs	r2, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	60fa      	str	r2, [r7, #12]
 8005114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005118:	f7fb f856 	bl	80001c8 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005124:	4b0b      	ldr	r3, [pc, #44]	@ (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005134:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	@ 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	00b71b00 	.word	0x00b71b00

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	@ (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000000 	.word	0x20000000

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	0800c958 	.word	0x0800c958

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051a4:	f7ff ffdc 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	@ (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800c958 	.word	0x0800c958

080051c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e022      	b.n	8005220 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fb fdcd 	bl	8000d8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f814 	bl	8005228 <HAL_SD_InitCard>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e00a      	b.n	8005220 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b08e      	sub	sp, #56	@ 0x38
 800522c:	af04      	add	r7, sp, #16
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005244:	2376      	movs	r3, #118	@ 0x76
 8005246:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681d      	ldr	r5, [r3, #0]
 800524c:	466c      	mov	r4, sp
 800524e:	f107 0318 	add.w	r3, r7, #24
 8005252:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800525a:	f107 030c 	add.w	r3, r7, #12
 800525e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005260:	4628      	mov	r0, r5
 8005262:	f001 fea1 	bl	8006fa8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005266:	4b2a      	ldr	r3, [pc, #168]	@ (8005310 <HAL_SD_InitCard+0xe8>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fed1 	bl	8007018 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005276:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <HAL_SD_InitCard+0xe8>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800527c:	2002      	movs	r0, #2
 800527e:	f7fc fa93 	bl	80017a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fb54 	bl	8005930 <SD_PowerON>
 8005288:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e02e      	b.n	8005306 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fa73 	bl	8005794 <SD_InitCard>
 80052ae:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e01b      	b.n	8005306 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 ff30 	bl	800713c <SDMMC_CmdBlockLength>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_SD_InitCard+0xec>)
 80052ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	@ 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bdb0      	pop	{r4, r5, r7, pc}
 800530e:	bf00      	nop
 8005310:	422580a0 	.word	0x422580a0
 8005314:	004005ff 	.word	0x004005ff

08005318 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005326:	0f9b      	lsrs	r3, r3, #30
 8005328:	b2da      	uxtb	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005332:	0e9b      	lsrs	r3, r3, #26
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	b2da      	uxtb	r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005344:	0e1b      	lsrs	r3, r3, #24
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	b2da      	uxtb	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2da      	uxtb	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b2da      	uxtb	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800536e:	b2da      	uxtb	r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005378:	0d1b      	lsrs	r3, r3, #20
 800537a:	b29a      	uxth	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005396:	0bdb      	lsrs	r3, r3, #15
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053a8:	0b9b      	lsrs	r3, r3, #14
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ba:	0b5b      	lsrs	r3, r3, #13
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053cc:	0b1b      	lsrs	r3, r3, #12
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d163      	bne.n	80054b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ec:	009a      	lsls	r2, r3, #2
 80053ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053f2:	4013      	ands	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80053f8:	0f92      	lsrs	r2, r2, #30
 80053fa:	431a      	orrs	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005404:	0edb      	lsrs	r3, r3, #27
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	b2da      	uxtb	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005416:	0e1b      	lsrs	r3, r3, #24
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	b2da      	uxtb	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005428:	0d5b      	lsrs	r3, r3, #21
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	b2da      	uxtb	r2, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800543a:	0c9b      	lsrs	r3, r3, #18
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	b2da      	uxtb	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	0bdb      	lsrs	r3, r3, #15
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	b2da      	uxtb	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	7e1b      	ldrb	r3, [r3, #24]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	3302      	adds	r3, #2
 8005470:	2201      	movs	r2, #1
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800547a:	fb03 f202 	mul.w	r2, r3, r2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	7a1b      	ldrb	r3, [r3, #8]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	2201      	movs	r2, #1
 800548e:	409a      	lsls	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800549c:	0a52      	lsrs	r2, r2, #9
 800549e:	fb03 f202 	mul.w	r2, r3, r2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80054ae:	e031      	b.n	8005514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d11d      	bne.n	80054f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	3301      	adds	r3, #1
 80054d4:	029a      	lsls	r2, r3, #10
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80054f2:	e00f      	b.n	8005514 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a58      	ldr	r2, [pc, #352]	@ (800565c <HAL_SD_GetCardCSD+0x344>)
 80054fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e09d      	b.n	8005650 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	0b9b      	lsrs	r3, r3, #14
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005532:	b2da      	uxtb	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005542:	b2da      	uxtb	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554c:	0fdb      	lsrs	r3, r3, #31
 800554e:	b2da      	uxtb	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005558:	0f5b      	lsrs	r3, r3, #29
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	b2da      	uxtb	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	0e9b      	lsrs	r3, r3, #26
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	b2da      	uxtb	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	0d9b      	lsrs	r3, r3, #22
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	b2da      	uxtb	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	0d5b      	lsrs	r3, r3, #21
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	0bdb      	lsrs	r3, r3, #15
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	0b9b      	lsrs	r3, r3, #14
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	0b5b      	lsrs	r3, r3, #13
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	0b1b      	lsrs	r3, r3, #12
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560e:	0a9b      	lsrs	r3, r3, #10
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	b2da      	uxtb	r2, r3
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	004005ff 	.word	0x004005ff

08005660 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b08e      	sub	sp, #56	@ 0x38
 8005664:	af04      	add	r7, sp, #16
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2203      	movs	r2, #3
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567c:	2b03      	cmp	r3, #3
 800567e:	d02e      	beq.n	80056de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005686:	d106      	bne.n	8005696 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
 8005694:	e029      	b.n	80056ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569c:	d10a      	bne.n	80056b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9d4 	bl	8005a4c <SD_WideBus_Enable>
 80056a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80056b2:	e01a      	b.n	80056ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa11 	bl	8005ae2 <SD_WideBus_Disable>
 80056c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80056ce:	e00c      	b.n	80056ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38
 80056dc:	e005      	b.n	80056ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a26      	ldr	r2, [pc, #152]	@ (8005790 <HAL_SD_ConfigWideBusOperation+0x130>)
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005708:	e01f      	b.n	800574a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681d      	ldr	r5, [r3, #0]
 8005730:	466c      	mov	r4, sp
 8005732:	f107 0314 	add.w	r3, r7, #20
 8005736:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800573a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800573e:	f107 0308 	add.w	r3, r7, #8
 8005742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005744:	4628      	mov	r0, r5
 8005746:	f001 fc2f 	bl	8006fa8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fcf2 	bl	800713c <SDMMC_CmdBlockLength>
 8005758:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005766:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005786:	4618      	mov	r0, r3
 8005788:	3728      	adds	r7, #40	@ 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bdb0      	pop	{r4, r5, r7, pc}
 800578e:	bf00      	nop
 8005790:	004005ff 	.word	0x004005ff

08005794 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b094      	sub	sp, #80	@ 0x50
 8005798:	af04      	add	r7, sp, #16
 800579a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fc45 	bl	8007034 <SDIO_GetPowerState>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057b0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80057b4:	e0b8      	b.n	8005928 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d02f      	beq.n	800581e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 fdc4 	bl	8007350 <SDMMC_CmdSendCID>
 80057c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80057d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d2:	e0a9      	b.n	8005928 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fc6f 	bl	80070be <SDIO_GetResponse>
 80057e0:	4602      	mov	r2, r0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2104      	movs	r1, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fc66 	bl	80070be <SDIO_GetResponse>
 80057f2:	4602      	mov	r2, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2108      	movs	r1, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fc5d 	bl	80070be <SDIO_GetResponse>
 8005804:	4602      	mov	r2, r0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	210c      	movs	r1, #12
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fc54 	bl	80070be <SDIO_GetResponse>
 8005816:	4602      	mov	r2, r0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	2b03      	cmp	r3, #3
 8005824:	d00d      	beq.n	8005842 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f107 020e 	add.w	r2, r7, #14
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fdca 	bl	80073ca <SDMMC_CmdSetRelAdd>
 8005836:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <SD_InitCard+0xae>
    {
      return errorstate;
 800583e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005840:	e072      	b.n	8005928 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	2b03      	cmp	r3, #3
 8005848:	d036      	beq.n	80058b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800584a:	89fb      	ldrh	r3, [r7, #14]
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f001 fd94 	bl	800738c <SDMMC_CmdSendCSD>
 8005864:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <SD_InitCard+0xdc>
    {
      return errorstate;
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	e05b      	b.n	8005928 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f001 fc21 	bl	80070be <SDIO_GetResponse>
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2104      	movs	r1, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fc18 	bl	80070be <SDIO_GetResponse>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2108      	movs	r1, #8
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fc0f 	bl	80070be <SDIO_GetResponse>
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	210c      	movs	r1, #12
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fc06 	bl	80070be <SDIO_GetResponse>
 80058b2:	4602      	mov	r2, r0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2104      	movs	r1, #4
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 fbfd 	bl	80070be <SDIO_GetResponse>
 80058c4:	4603      	mov	r3, r0
 80058c6:	0d1a      	lsrs	r2, r3, #20
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fd20 	bl	8005318 <HAL_SD_GetCardCSD>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80058e2:	e021      	b.n	8005928 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6819      	ldr	r1, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	2200      	movs	r2, #0
 80058f0:	461c      	mov	r4, r3
 80058f2:	4615      	mov	r5, r2
 80058f4:	4622      	mov	r2, r4
 80058f6:	462b      	mov	r3, r5
 80058f8:	4608      	mov	r0, r1
 80058fa:	f001 fc41 	bl	8007180 <SDMMC_CmdSelDesel>
 80058fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <SD_InitCard+0x176>
  {
    return errorstate;
 8005906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005908:	e00e      	b.n	8005928 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681d      	ldr	r5, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	466c      	mov	r4, sp
 8005912:	f103 0210 	add.w	r2, r3, #16
 8005916:	ca07      	ldmia	r2, {r0, r1, r2}
 8005918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800591c:	3304      	adds	r3, #4
 800591e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005920:	4628      	mov	r0, r5
 8005922:	f001 fb41 	bl	8006fa8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3740      	adds	r7, #64	@ 0x40
 800592c:	46bd      	mov	sp, r7
 800592e:	bdb0      	pop	{r4, r5, r7, pc}

08005930 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f001 fc3c 	bl	80071c6 <SDMMC_CmdGoIdleState>
 800594e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	e072      	b.n	8005a40 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fc4f 	bl	8007202 <SDMMC_CmdOperCond>
 8005964:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fc25 	bl	80071c6 <SDMMC_CmdGoIdleState>
 800597c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e05b      	b.n	8005a40 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005992:	2b01      	cmp	r3, #1
 8005994:	d137      	bne.n	8005a06 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fc4f 	bl	8007240 <SDMMC_CmdAppCommand>
 80059a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02d      	beq.n	8005a06 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059ae:	e047      	b.n	8005a40 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 fc42 	bl	8007240 <SDMMC_CmdAppCommand>
 80059bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e03b      	b.n	8005a40 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	491e      	ldr	r1, [pc, #120]	@ (8005a48 <SD_PowerON+0x118>)
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 fc58 	bl	8007284 <SDMMC_CmdAppOperCommand>
 80059d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059e0:	e02e      	b.n	8005a40 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fb68 	bl	80070be <SDIO_GetResponse>
 80059ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	0fdb      	lsrs	r3, r3, #31
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <SD_PowerON+0xcc>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <SD_PowerON+0xce>
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]

    count++;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d802      	bhi.n	8005a16 <SD_PowerON+0xe6>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0cc      	beq.n	80059b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d902      	bls.n	8005a26 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a24:	e00c      	b.n	8005a40 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a36:	e002      	b.n	8005a3e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	c1100000 	.word	0xc1100000

08005a4c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fb2b 	bl	80070be <SDIO_GetResponse>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a72:	d102      	bne.n	8005a7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a78:	e02f      	b.n	8005ada <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f879 	bl	8005b78 <SD_FindSCR>
 8005a86:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	e023      	b.n	8005ada <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01c      	beq.n	8005ad6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f001 fbc9 	bl	8007240 <SDMMC_CmdAppCommand>
 8005aae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	e00f      	b.n	8005ada <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2102      	movs	r1, #2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fc02 	bl	80072ca <SDMMC_CmdBusWidth>
 8005ac6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	e003      	b.n	8005ada <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e001      	b.n	8005ada <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ad6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b086      	sub	sp, #24
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 fae0 	bl	80070be <SDIO_GetResponse>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b08:	d102      	bne.n	8005b10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b0e:	e02f      	b.n	8005b70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b10:	f107 030c 	add.w	r3, r7, #12
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f82e 	bl	8005b78 <SD_FindSCR>
 8005b1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	e023      	b.n	8005b70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01c      	beq.n	8005b6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f001 fb7e 	bl	8007240 <SDMMC_CmdAppCommand>
 8005b44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	e00f      	b.n	8005b70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fbb7 	bl	80072ca <SDMMC_CmdBusWidth>
 8005b5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	e003      	b.n	8005b70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e001      	b.n	8005b70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b08f      	sub	sp, #60	@ 0x3c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b82:	f7fb fe05 	bl	8001790 <HAL_GetTick>
 8005b86:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2108      	movs	r1, #8
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 facc 	bl	800713c <SDMMC_CmdBlockLength>
 8005ba4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	e0b9      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f001 fb3f 	bl	8007240 <SDMMC_CmdAppCommand>
 8005bc2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <SD_FindSCR+0x56>
  {
    return errorstate;
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	e0aa      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bd2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005bd8:	2330      	movs	r3, #48	@ 0x30
 8005bda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f107 0210 	add.w	r2, r7, #16
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fa76 	bl	80070e4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fb86 	bl	800730e <SDMMC_CmdSendSCR>
 8005c02:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02a      	beq.n	8005c60 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	e08a      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00f      	beq.n	8005c3c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	f107 0208 	add.w	r2, r7, #8
 8005c28:	18d4      	adds	r4, r2, r3
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	f001 f9e7 	bl	8006ffe <SDIO_ReadFIFO>
 8005c30:	4603      	mov	r3, r0
 8005c32:	6023      	str	r3, [r4, #0]
      index++;
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	3301      	adds	r3, #1
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c3a:	e006      	b.n	8005c4a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d012      	beq.n	8005c70 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8005c4a:	f7fb fda1 	bl	8001790 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c58:	d102      	bne.n	8005c60 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005c5a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c5e:	e061      	b.n	8005d24 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0cf      	beq.n	8005c0e <SD_FindSCR+0x96>
 8005c6e:	e000      	b.n	8005c72 <SD_FindSCR+0xfa>
      break;
 8005c70:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <SD_FindSCR+0x116>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2208      	movs	r2, #8
 8005c94:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005c96:	2308      	movs	r3, #8
 8005c98:	e044      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2202      	movs	r2, #2
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e037      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005cca:	2320      	movs	r3, #32
 8005ccc:	e02a      	b.n	8005d24 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	061a      	lsls	r2, r3, #24
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ce4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	0e1b      	lsrs	r3, r3, #24
 8005cf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	601a      	str	r2, [r3, #0]
    scr++;
 8005cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	061a      	lsls	r2, r3, #24
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0e1b      	lsrs	r3, r3, #24
 8005d1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	373c      	adds	r7, #60	@ 0x3c
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd90      	pop	{r4, r7, pc}

08005d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07b      	b.n	8005e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d4e:	d009      	beq.n	8005d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	61da      	str	r2, [r3, #28]
 8005d56:	e005      	b.n	8005d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb f8a2 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de8:	ea42 0103 	orr.w	r1, r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 0104 	and.w	r1, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	f003 0210 	and.w	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e041      	b.n	8005ed4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fb fa85 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 fa11 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e041      	b.n	8005f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f839 	bl	8005f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 f9c2 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e0ae      	b.n	800610c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b0c      	cmp	r3, #12
 8005fba:	f200 809f 	bhi.w	80060fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	080060fd 	.word	0x080060fd
 8005fcc:	080060fd 	.word	0x080060fd
 8005fd0:	080060fd 	.word	0x080060fd
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	080060fd 	.word	0x080060fd
 8005fdc:	080060fd 	.word	0x080060fd
 8005fe0:	080060fd 	.word	0x080060fd
 8005fe4:	0800607b 	.word	0x0800607b
 8005fe8:	080060fd 	.word	0x080060fd
 8005fec:	080060fd 	.word	0x080060fd
 8005ff0:	080060fd 	.word	0x080060fd
 8005ff4:	080060bb 	.word	0x080060bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f9f6 	bl	80063f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0208 	orr.w	r2, r2, #8
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0204 	bic.w	r2, r2, #4
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
      break;
 8006036:	e064      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa46 	bl	80064d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	619a      	str	r2, [r3, #24]
      break;
 8006078:	e043      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fa9b 	bl	80065bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0208 	orr.w	r2, r2, #8
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0204 	bic.w	r2, r2, #4
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	61da      	str	r2, [r3, #28]
      break;
 80060b8:	e023      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 faef 	bl	80066a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	021a      	lsls	r2, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	61da      	str	r2, [r3, #28]
      break;
 80060fa:	e002      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x1c>
 800612c:	2302      	movs	r3, #2
 800612e:	e0b4      	b.n	800629a <HAL_TIM_ConfigClockSource+0x186>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800614e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006168:	d03e      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0xd4>
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616e:	f200 8087 	bhi.w	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006176:	f000 8086 	beq.w	8006286 <HAL_TIM_ConfigClockSource+0x172>
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617e:	d87f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b70      	cmp	r3, #112	@ 0x70
 8006182:	d01a      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0xa6>
 8006184:	2b70      	cmp	r3, #112	@ 0x70
 8006186:	d87b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b60      	cmp	r3, #96	@ 0x60
 800618a:	d050      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x11a>
 800618c:	2b60      	cmp	r3, #96	@ 0x60
 800618e:	d877      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d03c      	beq.n	800620e <HAL_TIM_ConfigClockSource+0xfa>
 8006194:	2b50      	cmp	r3, #80	@ 0x50
 8006196:	d873      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d058      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x13a>
 800619c:	2b40      	cmp	r3, #64	@ 0x40
 800619e:	d86f      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 80061a0:	2b30      	cmp	r3, #48	@ 0x30
 80061a2:	d064      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15a>
 80061a4:	2b30      	cmp	r3, #48	@ 0x30
 80061a6:	d86b      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d060      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15a>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d867      	bhi.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05c      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15a>
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d05a      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x15a>
 80061b8:	e062      	b.n	8006280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ca:	f000 fb3b 	bl	8006844 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	609a      	str	r2, [r3, #8]
      break;
 80061e6:	e04f      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f8:	f000 fb24 	bl	8006844 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800620a:	609a      	str	r2, [r3, #8]
      break;
 800620c:	e03c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800621a:	461a      	mov	r2, r3
 800621c:	f000 fa98 	bl	8006750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2150      	movs	r1, #80	@ 0x50
 8006226:	4618      	mov	r0, r3
 8006228:	f000 faf1 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 800622c:	e02c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fab7 	bl	80067ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2160      	movs	r1, #96	@ 0x60
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fae1 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 800624c:	e01c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800625a:	461a      	mov	r2, r3
 800625c:	f000 fa78 	bl	8006750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2140      	movs	r1, #64	@ 0x40
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fad1 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 800626c:	e00c      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f000 fac8 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 800627e:	e003      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	e000      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a43      	ldr	r2, [pc, #268]	@ (80063c4 <TIM_Base_SetConfig+0x120>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d013      	beq.n	80062e4 <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c2:	d00f      	beq.n	80062e4 <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a40      	ldr	r2, [pc, #256]	@ (80063c8 <TIM_Base_SetConfig+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <TIM_Base_SetConfig+0x128>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a3e      	ldr	r2, [pc, #248]	@ (80063d0 <TIM_Base_SetConfig+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0x40>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a3d      	ldr	r2, [pc, #244]	@ (80063d4 <TIM_Base_SetConfig+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a32      	ldr	r2, [pc, #200]	@ (80063c4 <TIM_Base_SetConfig+0x120>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d02b      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006304:	d027      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a2f      	ldr	r2, [pc, #188]	@ (80063c8 <TIM_Base_SetConfig+0x124>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d023      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a2e      	ldr	r2, [pc, #184]	@ (80063cc <TIM_Base_SetConfig+0x128>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01f      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2d      	ldr	r2, [pc, #180]	@ (80063d0 <TIM_Base_SetConfig+0x12c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01b      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2c      	ldr	r2, [pc, #176]	@ (80063d4 <TIM_Base_SetConfig+0x130>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d017      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <TIM_Base_SetConfig+0x134>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <TIM_Base_SetConfig+0x138>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00f      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a29      	ldr	r2, [pc, #164]	@ (80063e0 <TIM_Base_SetConfig+0x13c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00b      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a28      	ldr	r2, [pc, #160]	@ (80063e4 <TIM_Base_SetConfig+0x140>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d007      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a27      	ldr	r2, [pc, #156]	@ (80063e8 <TIM_Base_SetConfig+0x144>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a26      	ldr	r2, [pc, #152]	@ (80063ec <TIM_Base_SetConfig+0x148>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0e      	ldr	r2, [pc, #56]	@ (80063c4 <TIM_Base_SetConfig+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xf2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a10      	ldr	r2, [pc, #64]	@ (80063d4 <TIM_Base_SetConfig+0x130>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d103      	bne.n	800639e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40010400 	.word	0x40010400
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40014400 	.word	0x40014400
 80063e0:	40014800 	.word	0x40014800
 80063e4:	40001800 	.word	0x40001800
 80063e8:	40001c00 	.word	0x40001c00
 80063ec:	40002000 	.word	0x40002000

080063f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f023 0201 	bic.w	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0302 	bic.w	r3, r3, #2
 8006438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a20      	ldr	r2, [pc, #128]	@ (80064c8 <TIM_OC1_SetConfig+0xd8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC1_SetConfig+0x64>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a1f      	ldr	r2, [pc, #124]	@ (80064cc <TIM_OC1_SetConfig+0xdc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d10c      	bne.n	800646e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 0308 	bic.w	r3, r3, #8
 800645a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0304 	bic.w	r3, r3, #4
 800646c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <TIM_OC1_SetConfig+0xd8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC1_SetConfig+0x8e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a14      	ldr	r2, [pc, #80]	@ (80064cc <TIM_OC1_SetConfig+0xdc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d111      	bne.n	80064a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	621a      	str	r2, [r3, #32]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40010000 	.word	0x40010000
 80064cc:	40010400 	.word	0x40010400

080064d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 0210 	bic.w	r2, r3, #16
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0320 	bic.w	r3, r3, #32
 800651a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a22      	ldr	r2, [pc, #136]	@ (80065b4 <TIM_OC2_SetConfig+0xe4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC2_SetConfig+0x68>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a21      	ldr	r2, [pc, #132]	@ (80065b8 <TIM_OC2_SetConfig+0xe8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10d      	bne.n	8006554 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006552:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a17      	ldr	r2, [pc, #92]	@ (80065b4 <TIM_OC2_SetConfig+0xe4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_OC2_SetConfig+0x94>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <TIM_OC2_SetConfig+0xe8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d113      	bne.n	800658c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800656a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a21      	ldr	r2, [pc, #132]	@ (800669c <TIM_OC3_SetConfig+0xe0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0x66>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a20      	ldr	r2, [pc, #128]	@ (80066a0 <TIM_OC3_SetConfig+0xe4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10d      	bne.n	800663e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800663c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a16      	ldr	r2, [pc, #88]	@ (800669c <TIM_OC3_SetConfig+0xe0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_OC3_SetConfig+0x92>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a15      	ldr	r2, [pc, #84]	@ (80066a0 <TIM_OC3_SetConfig+0xe4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d113      	bne.n	8006676 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a12      	ldr	r2, [pc, #72]	@ (8006748 <TIM_OC4_SetConfig+0xa4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC4_SetConfig+0x68>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a11      	ldr	r2, [pc, #68]	@ (800674c <TIM_OC4_SetConfig+0xa8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d109      	bne.n	8006720 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	019b      	lsls	r3, r3, #6
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40010000 	.word	0x40010000
 800674c:	40010400 	.word	0x40010400

08006750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f023 0201 	bic.w	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800677a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f023 030a 	bic.w	r3, r3, #10
 800678c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b087      	sub	sp, #28
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f023 0210 	bic.w	r2, r3, #16
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	031b      	lsls	r3, r3, #12
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	f043 0307 	orr.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
}
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800685e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	431a      	orrs	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006898:	2302      	movs	r3, #2
 800689a:	e05a      	b.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a21      	ldr	r2, [pc, #132]	@ (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e8:	d01d      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1a      	ldr	r2, [pc, #104]	@ (800696c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a17      	ldr	r2, [pc, #92]	@ (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10c      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	4313      	orrs	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40001800 	.word	0x40001800

0800697c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006994:	2302      	movs	r3, #2
 8006996:	e03d      	b.n	8006a14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e042      	b.n	8006ab8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fa fd94 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	@ 0x24
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f82b 	bl	8006ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac4:	b0c0      	sub	sp, #256	@ 0x100
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006adc:	68d9      	ldr	r1, [r3, #12]
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	ea40 0301 	orr.w	r3, r0, r1
 8006ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b18:	f021 010c 	bic.w	r1, r1, #12
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b26:	430b      	orrs	r3, r1
 8006b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3a:	6999      	ldr	r1, [r3, #24]
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	ea40 0301 	orr.w	r3, r0, r1
 8006b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8006d8c <UART_SetConfig+0x2cc>)
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d005      	beq.n	8006b60 <UART_SetConfig+0xa0>
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d90 <UART_SetConfig+0x2d0>)
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d104      	bne.n	8006b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fe fb1e 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 8006b64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b68:	e003      	b.n	8006b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b6a:	f7fe fb05 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8006b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7c:	f040 810c 	bne.w	8006d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	1891      	adds	r1, r2, r2
 8006b98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b9a:	415b      	adcs	r3, r3
 8006b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	eb12 0801 	adds.w	r8, r2, r1
 8006ba8:	4629      	mov	r1, r5
 8006baa:	eb43 0901 	adc.w	r9, r3, r1
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bc2:	4690      	mov	r8, r2
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	eb18 0303 	adds.w	r3, r8, r3
 8006bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	eb49 0303 	adc.w	r3, r9, r3
 8006bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006be6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bee:	460b      	mov	r3, r1
 8006bf0:	18db      	adds	r3, r3, r3
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	eb42 0303 	adc.w	r3, r2, r3
 8006bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c04:	f7f9 fae0 	bl	80001c8 <__aeabi_uldivmod>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4b61      	ldr	r3, [pc, #388]	@ (8006d94 <UART_SetConfig+0x2d4>)
 8006c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	011c      	lsls	r4, r3, #4
 8006c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	1891      	adds	r1, r2, r2
 8006c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c30:	415b      	adcs	r3, r3
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c38:	4641      	mov	r1, r8
 8006c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c3e:	4649      	mov	r1, r9
 8006c40:	eb43 0b01 	adc.w	fp, r3, r1
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c58:	4692      	mov	sl, r2
 8006c5a:	469b      	mov	fp, r3
 8006c5c:	4643      	mov	r3, r8
 8006c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c66:	464b      	mov	r3, r9
 8006c68:	eb4b 0303 	adc.w	r3, fp, r3
 8006c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c84:	460b      	mov	r3, r1
 8006c86:	18db      	adds	r3, r3, r3
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	eb42 0303 	adc.w	r3, r2, r3
 8006c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c9a:	f7f9 fa95 	bl	80001c8 <__aeabi_uldivmod>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8006d94 <UART_SetConfig+0x2d4>)
 8006ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	2264      	movs	r2, #100	@ 0x64
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	1acb      	subs	r3, r1, r3
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cba:	4b36      	ldr	r3, [pc, #216]	@ (8006d94 <UART_SetConfig+0x2d4>)
 8006cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cc8:	441c      	add	r4, r3
 8006cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cdc:	4642      	mov	r2, r8
 8006cde:	464b      	mov	r3, r9
 8006ce0:	1891      	adds	r1, r2, r2
 8006ce2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ce4:	415b      	adcs	r3, r3
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cec:	4641      	mov	r1, r8
 8006cee:	1851      	adds	r1, r2, r1
 8006cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	414b      	adcs	r3, r1
 8006cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d04:	4659      	mov	r1, fp
 8006d06:	00cb      	lsls	r3, r1, #3
 8006d08:	4651      	mov	r1, sl
 8006d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d0e:	4651      	mov	r1, sl
 8006d10:	00ca      	lsls	r2, r1, #3
 8006d12:	4610      	mov	r0, r2
 8006d14:	4619      	mov	r1, r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	4642      	mov	r2, r8
 8006d1a:	189b      	adds	r3, r3, r2
 8006d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d20:	464b      	mov	r3, r9
 8006d22:	460a      	mov	r2, r1
 8006d24:	eb42 0303 	adc.w	r3, r2, r3
 8006d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d40:	460b      	mov	r3, r1
 8006d42:	18db      	adds	r3, r3, r3
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d46:	4613      	mov	r3, r2
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d56:	f7f9 fa37 	bl	80001c8 <__aeabi_uldivmod>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <UART_SetConfig+0x2d4>)
 8006d60:	fba3 1302 	umull	r1, r3, r3, r2
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	2164      	movs	r1, #100	@ 0x64
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	3332      	adds	r3, #50	@ 0x32
 8006d72:	4a08      	ldr	r2, [pc, #32]	@ (8006d94 <UART_SetConfig+0x2d4>)
 8006d74:	fba2 2303 	umull	r2, r3, r2, r3
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	f003 0207 	and.w	r2, r3, #7
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4422      	add	r2, r4
 8006d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d88:	e106      	b.n	8006f98 <UART_SetConfig+0x4d8>
 8006d8a:	bf00      	nop
 8006d8c:	40011000 	.word	0x40011000
 8006d90:	40011400 	.word	0x40011400
 8006d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006da2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006daa:	4642      	mov	r2, r8
 8006dac:	464b      	mov	r3, r9
 8006dae:	1891      	adds	r1, r2, r2
 8006db0:	6239      	str	r1, [r7, #32]
 8006db2:	415b      	adcs	r3, r3
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dba:	4641      	mov	r1, r8
 8006dbc:	1854      	adds	r4, r2, r1
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	eb43 0501 	adc.w	r5, r3, r1
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	00eb      	lsls	r3, r5, #3
 8006dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dd2:	00e2      	lsls	r2, r4, #3
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	4643      	mov	r3, r8
 8006dda:	18e3      	adds	r3, r4, r3
 8006ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006de0:	464b      	mov	r3, r9
 8006de2:	eb45 0303 	adc.w	r3, r5, r3
 8006de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e06:	4629      	mov	r1, r5
 8006e08:	008b      	lsls	r3, r1, #2
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e10:	4621      	mov	r1, r4
 8006e12:	008a      	lsls	r2, r1, #2
 8006e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e18:	f7f9 f9d6 	bl	80001c8 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4b60      	ldr	r3, [pc, #384]	@ (8006fa4 <UART_SetConfig+0x4e4>)
 8006e22:	fba3 2302 	umull	r2, r3, r3, r2
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	011c      	lsls	r4, r3, #4
 8006e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	1891      	adds	r1, r2, r2
 8006e42:	61b9      	str	r1, [r7, #24]
 8006e44:	415b      	adcs	r3, r3
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	1851      	adds	r1, r2, r1
 8006e50:	6139      	str	r1, [r7, #16]
 8006e52:	4649      	mov	r1, r9
 8006e54:	414b      	adcs	r3, r1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e64:	4659      	mov	r1, fp
 8006e66:	00cb      	lsls	r3, r1, #3
 8006e68:	4651      	mov	r1, sl
 8006e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e6e:	4651      	mov	r1, sl
 8006e70:	00ca      	lsls	r2, r1, #3
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	4642      	mov	r2, r8
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e80:	464b      	mov	r3, r9
 8006e82:	460a      	mov	r2, r1
 8006e84:	eb42 0303 	adc.w	r3, r2, r3
 8006e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	008b      	lsls	r3, r1, #2
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eae:	4641      	mov	r1, r8
 8006eb0:	008a      	lsls	r2, r1, #2
 8006eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006eb6:	f7f9 f987 	bl	80001c8 <__aeabi_uldivmod>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4b38      	ldr	r3, [pc, #224]	@ (8006fa4 <UART_SetConfig+0x4e4>)
 8006ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2264      	movs	r2, #100	@ 0x64
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
 8006ece:	1acb      	subs	r3, r1, r3
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	3332      	adds	r3, #50	@ 0x32
 8006ed4:	4a33      	ldr	r2, [pc, #204]	@ (8006fa4 <UART_SetConfig+0x4e4>)
 8006ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ee0:	441c      	add	r4, r3
 8006ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006eea:	677a      	str	r2, [r7, #116]	@ 0x74
 8006eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	1891      	adds	r1, r2, r2
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	415b      	adcs	r3, r3
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f00:	4641      	mov	r1, r8
 8006f02:	1851      	adds	r1, r2, r1
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	4649      	mov	r1, r9
 8006f08:	414b      	adcs	r3, r1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f18:	4659      	mov	r1, fp
 8006f1a:	00cb      	lsls	r3, r1, #3
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f22:	4651      	mov	r1, sl
 8006f24:	00ca      	lsls	r2, r1, #3
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	189b      	adds	r3, r3, r2
 8006f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f32:	464b      	mov	r3, r9
 8006f34:	460a      	mov	r2, r1
 8006f36:	eb42 0303 	adc.w	r3, r2, r3
 8006f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f46:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f54:	4649      	mov	r1, r9
 8006f56:	008b      	lsls	r3, r1, #2
 8006f58:	4641      	mov	r1, r8
 8006f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f5e:	4641      	mov	r1, r8
 8006f60:	008a      	lsls	r2, r1, #2
 8006f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f66:	f7f9 f92f 	bl	80001c8 <__aeabi_uldivmod>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <UART_SetConfig+0x4e4>)
 8006f70:	fba3 1302 	umull	r1, r3, r3, r2
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	2164      	movs	r1, #100	@ 0x64
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	3332      	adds	r3, #50	@ 0x32
 8006f82:	4a08      	ldr	r2, [pc, #32]	@ (8006fa4 <UART_SetConfig+0x4e4>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4422      	add	r2, r4
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fa4:	51eb851f 	.word	0x51eb851f

08006fa8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006fa8:	b084      	sub	sp, #16
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	f107 001c 	add.w	r0, r7, #28
 8006fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006fbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006fc2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006fc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006fca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006fce:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006fd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006fe2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	b004      	add	sp, #16
 8006ffc:	4770      	bx	lr

08006ffe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2203      	movs	r2, #3
 8007024:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0303 	and.w	r3, r3, #3
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800706e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007074:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800707a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800708a:	f023 030f 	bic.w	r3, r3, #15
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	b2db      	uxtb	r3, r3
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3314      	adds	r3, #20
 80070cc:	461a      	mov	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
}  
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800710a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007110:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007116:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800712e:	2300      	movs	r3, #0

}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b088      	sub	sp, #32
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800714a:	2310      	movs	r3, #16
 800714c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800714e:	2340      	movs	r3, #64	@ 0x40
 8007150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800715a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800715c:	f107 0308 	add.w	r3, r7, #8
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff ff74 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716c:	2110      	movs	r1, #16
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f94c 	bl	800740c <SDMMC_GetCmdResp1>
 8007174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	@ 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007190:	2307      	movs	r3, #7
 8007192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007194:	2340      	movs	r3, #64	@ 0x40
 8007196:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800719c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071a2:	f107 0310 	add.w	r3, r7, #16
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff ff51 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80071ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b2:	2107      	movs	r1, #7
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f929 	bl	800740c <SDMMC_GetCmdResp1>
 80071ba:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	@ 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b088      	sub	sp, #32
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80071d6:	2300      	movs	r3, #0
 80071d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071e4:	f107 0308 	add.w	r3, r7, #8
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff ff30 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb43 	bl	800787c <SDMMC_GetCmdError>
 80071f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071f8:	69fb      	ldr	r3, [r7, #28]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b088      	sub	sp, #32
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800720a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800720e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007210:	2308      	movs	r3, #8
 8007212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007214:	2340      	movs	r3, #64	@ 0x40
 8007216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800721c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007222:	f107 0308 	add.w	r3, r7, #8
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ff11 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fad6 	bl	80077e0 <SDMMC_GetCmdResp7>
 8007234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007236:	69fb      	ldr	r3, [r7, #28]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800724e:	2337      	movs	r3, #55	@ 0x37
 8007250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007252:	2340      	movs	r3, #64	@ 0x40
 8007254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800725a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800725e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff fef2 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800726c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007270:	2137      	movs	r1, #55	@ 0x37
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8ca 	bl	800740c <SDMMC_GetCmdResp1>
 8007278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800729a:	2329      	movs	r3, #41	@ 0x29
 800729c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800729e:	2340      	movs	r3, #64	@ 0x40
 80072a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072ac:	f107 0308 	add.w	r3, r7, #8
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff fecc 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f9dd 	bl	8007678 <SDMMC_GetCmdResp3>
 80072be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072c0:	69fb      	ldr	r3, [r7, #28]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b088      	sub	sp, #32
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80072d8:	2306      	movs	r3, #6
 80072da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072ea:	f107 0308 	add.w	r3, r7, #8
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fead 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80072f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fa:	2106      	movs	r1, #6
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f885 	bl	800740c <SDMMC_GetCmdResp1>
 8007302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007304:	69fb      	ldr	r3, [r7, #28]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b088      	sub	sp, #32
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800731a:	2333      	movs	r3, #51	@ 0x33
 800731c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800731e:	2340      	movs	r3, #64	@ 0x40
 8007320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800732a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff fe8c 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800733c:	2133      	movs	r1, #51	@ 0x33
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f864 	bl	800740c <SDMMC_GetCmdResp1>
 8007344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007346:	69fb      	ldr	r3, [r7, #28]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800735c:	2302      	movs	r3, #2
 800735e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007360:	23c0      	movs	r3, #192	@ 0xc0
 8007362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800736c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fe6b 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f934 	bl	80075e8 <SDMMC_GetCmdResp2>
 8007380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007382:	69fb      	ldr	r3, [r7, #28]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3720      	adds	r7, #32
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800739a:	2309      	movs	r3, #9
 800739c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800739e:	23c0      	movs	r3, #192	@ 0xc0
 80073a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073ac:	f107 0308 	add.w	r3, r7, #8
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fe4c 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f915 	bl	80075e8 <SDMMC_GetCmdResp2>
 80073be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073c0:	69fb      	ldr	r3, [r7, #28]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b088      	sub	sp, #32
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80073d8:	2303      	movs	r3, #3
 80073da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073dc:	2340      	movs	r3, #64	@ 0x40
 80073de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fe2d 	bl	8007050 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	2103      	movs	r1, #3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f97a 	bl	80076f4 <SDMMC_GetCmdResp6>
 8007400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007402:	69fb      	ldr	r3, [r7, #28]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	460b      	mov	r3, r1
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800741a:	4b70      	ldr	r3, [pc, #448]	@ (80075dc <SDMMC_GetCmdResp1+0x1d0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a70      	ldr	r2, [pc, #448]	@ (80075e0 <SDMMC_GetCmdResp1+0x1d4>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	0a5a      	lsrs	r2, r3, #9
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	1e5a      	subs	r2, r3, #1
 8007432:	61fa      	str	r2, [r7, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800743c:	e0c9      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007442:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ef      	beq.n	800742e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ea      	bne.n	800742e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2204      	movs	r2, #4
 8007468:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800746a:	2304      	movs	r3, #4
 800746c:	e0b1      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007480:	2301      	movs	r3, #1
 8007482:	e0a6      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	22c5      	movs	r2, #197	@ 0xc5
 8007488:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff fe0a 	bl	80070a4 <SDIO_GetCommandResponse>
 8007490:	4603      	mov	r3, r0
 8007492:	461a      	mov	r2, r3
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	4293      	cmp	r3, r2
 8007498:	d001      	beq.n	800749e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800749a:	2301      	movs	r3, #1
 800749c:	e099      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800749e:	2100      	movs	r1, #0
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff fe0c 	bl	80070be <SDIO_GetResponse>
 80074a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4b4e      	ldr	r3, [pc, #312]	@ (80075e4 <SDMMC_GetCmdResp1+0x1d8>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e08d      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da02      	bge.n	80074c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80074bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074c0:	e087      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80074cc:	2340      	movs	r3, #64	@ 0x40
 80074ce:	e080      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	e079      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074ec:	e071      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074fc:	e069      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800750c:	e061      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007518:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800751c:	e059      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800752c:	e051      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800753c:	e049      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007548:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800754c:	e041      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800755c:	e039      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800756c:	e031      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007578:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800757c:	e029      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007588:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800758c:	e021      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007598:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800759c:	e019      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80075a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80075ac:	e011      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80075b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80075bc:	e009      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80075c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80075cc:	e001      	b.n	80075d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000000 	.word	0x20000000
 80075e0:	10624dd3 	.word	0x10624dd3
 80075e4:	fdffe008 	.word	0xfdffe008

080075e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007670 <SDMMC_GetCmdResp2+0x88>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007674 <SDMMC_GetCmdResp2+0x8c>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	0a5b      	lsrs	r3, r3, #9
 80075fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	60fa      	str	r2, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007610:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007614:	e026      	b.n	8007664 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0ef      	beq.n	8007606 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ea      	bne.n	8007606 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2204      	movs	r2, #4
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007642:	2304      	movs	r3, #4
 8007644:	e00e      	b.n	8007664 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007658:	2301      	movs	r3, #1
 800765a:	e003      	b.n	8007664 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	22c5      	movs	r2, #197	@ 0xc5
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000000 	.word	0x20000000
 8007674:	10624dd3 	.word	0x10624dd3

08007678 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007680:	4b1a      	ldr	r3, [pc, #104]	@ (80076ec <SDMMC_GetCmdResp3+0x74>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1a      	ldr	r2, [pc, #104]	@ (80076f0 <SDMMC_GetCmdResp3+0x78>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	0a5b      	lsrs	r3, r3, #9
 800768c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1e5a      	subs	r2, r3, #1
 800769a:	60fa      	str	r2, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076a4:	e01b      	b.n	80076de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0ef      	beq.n	8007696 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076d2:	2304      	movs	r3, #4
 80076d4:	e003      	b.n	80076de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	22c5      	movs	r2, #197	@ 0xc5
 80076da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000000 	.word	0x20000000
 80076f0:	10624dd3 	.word	0x10624dd3

080076f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	460b      	mov	r3, r1
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007702:	4b35      	ldr	r3, [pc, #212]	@ (80077d8 <SDMMC_GetCmdResp6+0xe4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a35      	ldr	r2, [pc, #212]	@ (80077dc <SDMMC_GetCmdResp6+0xe8>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	0a5b      	lsrs	r3, r3, #9
 800770e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	1e5a      	subs	r2, r3, #1
 800771c:	61fa      	str	r2, [r7, #28]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007722:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007726:	e052      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0ef      	beq.n	8007718 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1ea      	bne.n	8007718 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2204      	movs	r2, #4
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007754:	2304      	movs	r3, #4
 8007756:	e03a      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800776a:	2301      	movs	r3, #1
 800776c:	e02f      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff fc98 	bl	80070a4 <SDIO_GetCommandResponse>
 8007774:	4603      	mov	r3, r0
 8007776:	461a      	mov	r2, r3
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	4293      	cmp	r3, r2
 800777c:	d001      	beq.n	8007782 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800777e:	2301      	movs	r3, #1
 8007780:	e025      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22c5      	movs	r2, #197	@ 0xc5
 8007786:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007788:	2100      	movs	r1, #0
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fc97 	bl	80070be <SDIO_GetResponse>
 8007790:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e011      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077b8:	e009      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077c8:	e001      	b.n	80077ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3

080077e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077e8:	4b22      	ldr	r3, [pc, #136]	@ (8007874 <SDMMC_GetCmdResp7+0x94>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a22      	ldr	r2, [pc, #136]	@ (8007878 <SDMMC_GetCmdResp7+0x98>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	0a5b      	lsrs	r3, r3, #9
 80077f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f8:	fb02 f303 	mul.w	r3, r2, r3
 80077fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1e5a      	subs	r2, r3, #1
 8007802:	60fa      	str	r2, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800780c:	e02c      	b.n	8007868 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007812:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0ef      	beq.n	80077fe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1ea      	bne.n	80077fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2204      	movs	r2, #4
 8007838:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800783a:	2304      	movs	r3, #4
 800783c:	e014      	b.n	8007868 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007850:	2301      	movs	r3, #1
 8007852:	e009      	b.n	8007868 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2240      	movs	r2, #64	@ 0x40
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
  
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	20000000 	.word	0x20000000
 8007878:	10624dd3 	.word	0x10624dd3

0800787c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <SDMMC_GetCmdError+0x50>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <SDMMC_GetCmdError+0x54>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	0a5b      	lsrs	r3, r3, #9
 8007890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007894:	fb02 f303 	mul.w	r3, r2, r3
 8007898:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	60fa      	str	r2, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078a8:	e009      	b.n	80078be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f1      	beq.n	800789a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	22c5      	movs	r2, #197	@ 0xc5
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000000 	.word	0x20000000
 80078d0:	10624dd3 	.word	0x10624dd3

080078d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d4:	b084      	sub	sp, #16
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	f107 001c 	add.w	r0, r7, #28
 80078e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d123      	bne.n	8007936 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007916:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800791a:	2b01      	cmp	r3, #1
 800791c:	d105      	bne.n	800792a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9dc 	bl	8007ce8 <USB_CoreReset>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
 8007934:	e01b      	b.n	800796e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9d0 	bl	8007ce8 <USB_CoreReset>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800794c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007960:	e005      	b.n	800796e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800796e:	7fbb      	ldrb	r3, [r7, #30]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10b      	bne.n	800798c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f043 0206 	orr.w	r2, r3, #6
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007998:	b004      	add	sp, #16
 800799a:	4770      	bx	lr

0800799c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f043 0201 	orr.w	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f023 0201 	bic.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d115      	bne.n	8007a2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a0e:	200a      	movs	r0, #10
 8007a10:	f7f9 feca 	bl	80017a8 <HAL_Delay>
      ms += 10U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	330a      	adds	r3, #10
 8007a18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f956 	bl	8007ccc <USB_GetMode>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d01e      	beq.n	8007a64 <USB_SetCurrentMode+0x84>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a2a:	d9f0      	bls.n	8007a0e <USB_SetCurrentMode+0x2e>
 8007a2c:	e01a      	b.n	8007a64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d115      	bne.n	8007a60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a40:	200a      	movs	r0, #10
 8007a42:	f7f9 feb1 	bl	80017a8 <HAL_Delay>
      ms += 10U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	330a      	adds	r3, #10
 8007a4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f93d 	bl	8007ccc <USB_GetMode>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <USB_SetCurrentMode+0x84>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a5c:	d9f0      	bls.n	8007a40 <USB_SetCurrentMode+0x60>
 8007a5e:	e001      	b.n	8007a64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e005      	b.n	8007a70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a68:	d101      	bne.n	8007a6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a92:	d901      	bls.n	8007a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e01b      	b.n	8007ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	daf2      	bge.n	8007a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	019b      	lsls	r3, r3, #6
 8007aa8:	f043 0220 	orr.w	r2, r3, #32
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007abc:	d901      	bls.n	8007ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e006      	b.n	8007ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d0f0      	beq.n	8007ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007af4:	d901      	bls.n	8007afa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e018      	b.n	8007b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	daf2      	bge.n	8007ae8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2210      	movs	r2, #16
 8007b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b18:	d901      	bls.n	8007b1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e006      	b.n	8007b2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	d0f0      	beq.n	8007b0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b089      	sub	sp, #36	@ 0x24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	460b      	mov	r3, r1
 8007b48:	71fb      	strb	r3, [r7, #7]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d123      	bne.n	8007ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b5e:	88bb      	ldrh	r3, [r7, #4]
 8007b60:	3303      	adds	r3, #3
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b66:	2300      	movs	r3, #0
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	e018      	b.n	8007b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	031a      	lsls	r2, r3, #12
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b78:	461a      	mov	r2, r3
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	3301      	adds	r3, #1
 8007b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d3e2      	bcc.n	8007b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3724      	adds	r7, #36	@ 0x24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b08b      	sub	sp, #44	@ 0x2c
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	089b      	lsrs	r3, r3, #2
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bda:	2300      	movs	r3, #0
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	e014      	b.n	8007c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	3301      	adds	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	3301      	adds	r3, #1
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	3301      	adds	r3, #1
 8007c08:	623b      	str	r3, [r7, #32]
 8007c0a:	6a3a      	ldr	r2, [r7, #32]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3e6      	bcc.n	8007be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c12:	8bfb      	ldrh	r3, [r7, #30]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01e      	beq.n	8007c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c22:	461a      	mov	r2, r3
 8007c24:	f107 0310 	add.w	r3, r7, #16
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	fa22 f303 	lsr.w	r3, r2, r3
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	3301      	adds	r3, #1
 8007c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	3301      	adds	r3, #1
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c4a:	8bfb      	ldrh	r3, [r7, #30]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c50:	8bfb      	ldrh	r3, [r7, #30]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1ea      	bne.n	8007c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	372c      	adds	r7, #44	@ 0x2c
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d00:	d901      	bls.n	8007d06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e022      	b.n	8007d4c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	daf2      	bge.n	8007cf4 <USB_CoreReset+0xc>

  count = 10U;
 8007d0e:	230a      	movs	r3, #10
 8007d10:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d12:	e002      	b.n	8007d1a <USB_CoreReset+0x32>
  {
    count--;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1f9      	bne.n	8007d14 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f043 0201 	orr.w	r2, r3, #1
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d38:	d901      	bls.n	8007d3e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e006      	b.n	8007d4c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d0f0      	beq.n	8007d2c <USB_CoreReset+0x44>

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d119      	bne.n	8007de2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10a      	bne.n	8007dcc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007dc4:	f043 0304 	orr.w	r3, r3, #4
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	e014      	b.n	8007df6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007dda:	f023 0304 	bic.w	r3, r3, #4
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	e009      	b.n	8007df6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007df0:	f023 0304 	bic.w	r3, r3, #4
 8007df4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007df6:	2110      	movs	r1, #16
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff fe3d 	bl	8007a78 <USB_FlushTxFifo>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fe67 	bl	8007adc <USB_FlushRxFifo>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	e015      	b.n	8007e4a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e30:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3e:	461a      	mov	r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	3301      	adds	r3, #1
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e4e:	461a      	mov	r2, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d3e3      	bcc.n	8007e1e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e62:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a18      	ldr	r2, [pc, #96]	@ (8007ec8 <USB_HostInit+0x170>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d10b      	bne.n	8007e84 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e72:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <USB_HostInit+0x174>)
 8007e78:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ed0 <USB_HostInit+0x178>)
 8007e7e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007e82:	e009      	b.n	8007e98 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2280      	movs	r2, #128	@ 0x80
 8007e88:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a11      	ldr	r2, [pc, #68]	@ (8007ed4 <USB_HostInit+0x17c>)
 8007e8e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a11      	ldr	r2, [pc, #68]	@ (8007ed8 <USB_HostInit+0x180>)
 8007e94:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d105      	bne.n	8007eac <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f043 0210 	orr.w	r2, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007edc <USB_HostInit+0x184>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec4:	b004      	add	sp, #16
 8007ec6:	4770      	bx	lr
 8007ec8:	40040000 	.word	0x40040000
 8007ecc:	01000200 	.word	0x01000200
 8007ed0:	00e00300 	.word	0x00e00300
 8007ed4:	00600080 	.word	0x00600080
 8007ed8:	004000e0 	.word	0x004000e0
 8007edc:	a3200008 	.word	0xa3200008

08007ee0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007f2e:	6053      	str	r3, [r2, #4]
 8007f30:	e00c      	b.n	8007f4c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d107      	bne.n	8007f48 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007f44:	6053      	str	r3, [r2, #4]
 8007f46:	e001      	b.n	8007f4c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f7a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f88:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f8a:	2064      	movs	r0, #100	@ 0x64
 8007f8c:	f7f9 fc0c 	bl	80017a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f9c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f9e:	200a      	movs	r0, #10
 8007fa0:	f7f9 fc02 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007fd2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USB_DriveVbus+0x44>
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d106      	bne.n	8007ff2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007fec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ff0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffc:	d109      	bne.n	8008012 <USB_DriveVbus+0x64>
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d106      	bne.n	8008012 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800800c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008010:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	0c5b      	lsrs	r3, r3, #17
 800803e:	f003 0303 	and.w	r3, r3, #3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	b29b      	uxth	r3, r3
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	461a      	mov	r2, r3
 800807e:	4603      	mov	r3, r0
 8008080:	70fb      	strb	r3, [r7, #3]
 8008082:	460b      	mov	r3, r1
 8008084:	70bb      	strb	r3, [r7, #2]
 8008086:	4613      	mov	r3, r2
 8008088:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	4413      	add	r3, r2
 800809a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809e:	461a      	mov	r2, r3
 80080a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80080a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d87c      	bhi.n	80081a8 <USB_HC_Init+0x138>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <USB_HC_Init+0x44>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	0800816b 	.word	0x0800816b
 80080bc:	080080c5 	.word	0x080080c5
 80080c0:	0800812d 	.word	0x0800812d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d0:	461a      	mov	r2, r3
 80080d2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80080d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80080d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da10      	bge.n	8008102 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080fe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008100:	e055      	b.n	80081ae <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a6f      	ldr	r2, [pc, #444]	@ (80082c4 <USB_HC_Init+0x254>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d151      	bne.n	80081ae <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	440a      	add	r2, r1
 8008120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008124:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008128:	60d3      	str	r3, [r2, #12]
      break;
 800812a:	e040      	b.n	80081ae <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008138:	461a      	mov	r2, r3
 800813a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800813e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da34      	bge.n	80081b2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	440a      	add	r2, r1
 800815e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008166:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008168:	e023      	b.n	80081b2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	f240 2325 	movw	r3, #549	@ 0x225
 800817c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800817e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da17      	bge.n	80081b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	78fa      	ldrb	r2, [r7, #3]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	440a      	add	r2, r1
 800819c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80081a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80081a6:	e006      	b.n	80081b6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	77fb      	strb	r3, [r7, #31]
      break;
 80081ac:	e004      	b.n	80081b8 <USB_HC_Init+0x148>
      break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <USB_HC_Init+0x148>
      break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <USB_HC_Init+0x148>
      break;
 80081b6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c4:	461a      	mov	r2, r3
 80081c6:	2300      	movs	r3, #0
 80081c8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	6939      	ldr	r1, [r7, #16]
 8008200:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008204:	4313      	orrs	r3, r2
 8008206:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008214:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008218:	2b00      	cmp	r3, #0
 800821a:	da03      	bge.n	8008224 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800821c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	e001      	b.n	8008228 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fef9 	bl	8008020 <USB_GetHostSpeed>
 800822e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008230:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008234:	2b02      	cmp	r3, #2
 8008236:	d106      	bne.n	8008246 <USB_HC_Init+0x1d6>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d003      	beq.n	8008246 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800823e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008242:	617b      	str	r3, [r7, #20]
 8008244:	e001      	b.n	800824a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800824a:	787b      	ldrb	r3, [r7, #1]
 800824c:	059b      	lsls	r3, r3, #22
 800824e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008252:	78bb      	ldrb	r3, [r7, #2]
 8008254:	02db      	lsls	r3, r3, #11
 8008256:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800825a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800825c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008260:	049b      	lsls	r3, r3, #18
 8008262:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008266:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008268:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800826a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800826e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	431a      	orrs	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	440a      	add	r2, r1
 8008280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008288:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800828a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800828e:	2b03      	cmp	r3, #3
 8008290:	d003      	beq.n	800829a <USB_HC_Init+0x22a>
 8008292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008296:	2b01      	cmp	r3, #1
 8008298:	d10f      	bne.n	80082ba <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80082ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40040000 	.word	0x40040000

080082c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08c      	sub	sp, #48	@ 0x30
 80082cc:	af02      	add	r7, sp, #8
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80082e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082e4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a5d      	ldr	r2, [pc, #372]	@ (8008460 <USB_HC_StartXfer+0x198>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d12f      	bne.n	800834e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11c      	bne.n	800832e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	7c9b      	ldrb	r3, [r3, #18]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <USB_HC_StartXfer+0x3c>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	7c9b      	ldrb	r3, [r3, #18]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d124      	bne.n	800834e <USB_HC_StartXfer+0x86>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	799b      	ldrb	r3, [r3, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d120      	bne.n	800834e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	0151      	lsls	r1, r2, #5
 800831e:	6a3a      	ldr	r2, [r7, #32]
 8008320:	440a      	add	r2, r1
 8008322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832a:	60d3      	str	r3, [r2, #12]
 800832c:	e00f      	b.n	800834e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	791b      	ldrb	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <USB_HC_StartXfer+0x86>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d107      	bne.n	800834e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fb6b 	bl	8008a20 <USB_DoPing>
        return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e232      	b.n	80087b4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	799b      	ldrb	r3, [r3, #6]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d158      	bne.n	8008408 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008356:	2301      	movs	r3, #1
 8008358:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	78db      	ldrb	r3, [r3, #3]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	8a92      	ldrh	r2, [r2, #20]
 8008368:	fb03 f202 	mul.w	r2, r3, r2
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61da      	str	r2, [r3, #28]
 8008370:	e07c      	b.n	800846c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	7c9b      	ldrb	r3, [r3, #18]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d130      	bne.n	80083dc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008380:	d918      	bls.n	80083b4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	8a9b      	ldrh	r3, [r3, #20]
 8008386:	461a      	mov	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d003      	beq.n	80083a4 <USB_HC_StartXfer+0xdc>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d103      	bne.n	80083ac <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2202      	movs	r2, #2
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	e05f      	b.n	800846c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2201      	movs	r2, #1
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	e05b      	b.n	800846c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6a1a      	ldr	r2, [r3, #32]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d007      	beq.n	80083d4 <USB_HC_StartXfer+0x10c>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d003      	beq.n	80083d4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2204      	movs	r2, #4
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	e04b      	b.n	800846c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2203      	movs	r2, #3
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	e047      	b.n	800846c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10d      	bne.n	80083fe <USB_HC_StartXfer+0x136>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	8a92      	ldrh	r2, [r2, #20]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d907      	bls.n	80083fe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	8a92      	ldrh	r2, [r2, #20]
 80083f4:	fb03 f202 	mul.w	r2, r3, r2
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61da      	str	r2, [r3, #28]
 80083fc:	e036      	b.n	800846c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6a1a      	ldr	r2, [r3, #32]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	61da      	str	r2, [r3, #28]
 8008406:	e031      	b.n	800846c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	8a92      	ldrh	r2, [r2, #20]
 8008418:	4413      	add	r3, r2
 800841a:	3b01      	subs	r3, #1
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	8a92      	ldrh	r2, [r2, #20]
 8008420:	fbb3 f3f2 	udiv	r3, r3, r2
 8008424:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008426:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008428:	8b7b      	ldrh	r3, [r7, #26]
 800842a:	429a      	cmp	r2, r3
 800842c:	d90b      	bls.n	8008446 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800842e:	8b7b      	ldrh	r3, [r7, #26]
 8008430:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008432:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	8a92      	ldrh	r2, [r2, #20]
 8008438:	fb03 f202 	mul.w	r2, r3, r2
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	61da      	str	r2, [r3, #28]
 8008440:	e001      	b.n	8008446 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008442:	2301      	movs	r3, #1
 8008444:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	78db      	ldrb	r3, [r3, #3]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800844e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	8a92      	ldrh	r2, [r2, #20]
 8008454:	fb03 f202 	mul.w	r2, r3, r2
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	61da      	str	r2, [r3, #28]
 800845c:	e006      	b.n	800846c <USB_HC_StartXfer+0x1a4>
 800845e:	bf00      	nop
 8008460:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008476:	04d9      	lsls	r1, r3, #19
 8008478:	4ba3      	ldr	r3, [pc, #652]	@ (8008708 <USB_HC_StartXfer+0x440>)
 800847a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800847c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	7d9b      	ldrb	r3, [r3, #22]
 8008482:	075b      	lsls	r3, r3, #29
 8008484:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008488:	69f9      	ldr	r1, [r7, #28]
 800848a:	0148      	lsls	r0, r1, #5
 800848c:	6a39      	ldr	r1, [r7, #32]
 800848e:	4401      	add	r1, r0
 8008490:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008494:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008496:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d009      	beq.n	80084b2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6999      	ldr	r1, [r3, #24]
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ae:	460a      	mov	r2, r1
 80084b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf0c      	ite	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	2300      	movne	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69fa      	ldr	r2, [r7, #28]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	6a3a      	ldr	r2, [r7, #32]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	7e7b      	ldrb	r3, [r7, #25]
 80084fa:	075b      	lsls	r3, r3, #29
 80084fc:	69f9      	ldr	r1, [r7, #28]
 80084fe:	0148      	lsls	r0, r1, #5
 8008500:	6a39      	ldr	r1, [r7, #32]
 8008502:	4401      	add	r1, r0
 8008504:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008508:	4313      	orrs	r3, r2
 800850a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	799b      	ldrb	r3, [r3, #6]
 8008510:	2b01      	cmp	r3, #1
 8008512:	f040 80c3 	bne.w	800869c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	7c5b      	ldrb	r3, [r3, #17]
 800851a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008520:	4313      	orrs	r3, r2
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	440a      	add	r2, r1
 800852a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800852e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008532:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	6a3a      	ldr	r2, [r7, #32]
 8008548:	440a      	add	r2, r1
 800854a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800854e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008552:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	79db      	ldrb	r3, [r3, #7]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d123      	bne.n	80085a4 <USB_HC_StartXfer+0x2dc>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	78db      	ldrb	r3, [r3, #3]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11f      	bne.n	80085a4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	440a      	add	r2, r1
 800857a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800857e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008582:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	0151      	lsls	r1, r2, #5
 8008596:	6a3a      	ldr	r2, [r7, #32]
 8008598:	440a      	add	r2, r1
 800859a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	7c9b      	ldrb	r3, [r3, #18]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d003      	beq.n	80085b4 <USB_HC_StartXfer+0x2ec>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	7c9b      	ldrb	r3, [r3, #18]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d117      	bne.n	80085e4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d113      	bne.n	80085e4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	78db      	ldrb	r3, [r3, #3]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10f      	bne.n	80085e4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	6a3a      	ldr	r2, [r7, #32]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085e2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	7c9b      	ldrb	r3, [r3, #18]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d162      	bne.n	80086b2 <USB_HC_StartXfer+0x3ea>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d15e      	bne.n	80086b2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d858      	bhi.n	80086b0 <USB_HC_StartXfer+0x3e8>
 80085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <USB_HC_StartXfer+0x33c>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008615 	.word	0x08008615
 8008608:	08008637 	.word	0x08008637
 800860c:	08008659 	.word	0x08008659
 8008610:	0800867b 	.word	0x0800867b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	4413      	add	r3, r2
 800861c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	6a3a      	ldr	r2, [r7, #32]
 8008628:	440a      	add	r2, r1
 800862a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800862e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008632:	6053      	str	r3, [r2, #4]
          break;
 8008634:	e03d      	b.n	80086b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	6a3a      	ldr	r2, [r7, #32]
 800864a:	440a      	add	r2, r1
 800864c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008650:	f043 030e 	orr.w	r3, r3, #14
 8008654:	6053      	str	r3, [r2, #4]
          break;
 8008656:	e02c      	b.n	80086b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	4413      	add	r3, r2
 8008660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	6a3a      	ldr	r2, [r7, #32]
 800866c:	440a      	add	r2, r1
 800866e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008676:	6053      	str	r3, [r2, #4]
          break;
 8008678:	e01b      	b.n	80086b2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	4413      	add	r3, r2
 8008682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	69fa      	ldr	r2, [r7, #28]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	6a3a      	ldr	r2, [r7, #32]
 800868e:	440a      	add	r2, r1
 8008690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008698:	6053      	str	r3, [r2, #4]
          break;
 800869a:	e00a      	b.n	80086b2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a8:	461a      	mov	r2, r3
 80086aa:	2300      	movs	r3, #0
 80086ac:	6053      	str	r3, [r2, #4]
 80086ae:	e000      	b.n	80086b2 <USB_HC_StartXfer+0x3ea>
          break;
 80086b0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086c8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	78db      	ldrb	r3, [r3, #3]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	e003      	b.n	80086e4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086e2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086ea:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086f8:	461a      	mov	r2, r3
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e055      	b.n	80087b4 <USB_HC_StartXfer+0x4ec>
 8008708:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d14e      	bne.n	80087b2 <USB_HC_StartXfer+0x4ea>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d04a      	beq.n	80087b2 <USB_HC_StartXfer+0x4ea>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	79db      	ldrb	r3, [r3, #7]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d146      	bne.n	80087b2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	7c9b      	ldrb	r3, [r3, #18]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d831      	bhi.n	8008790 <USB_HC_StartXfer+0x4c8>
 800872c:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <USB_HC_StartXfer+0x46c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	08008769 	.word	0x08008769
 800873c:	08008745 	.word	0x08008745
 8008740:	08008769 	.word	0x08008769
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	3303      	adds	r3, #3
 800874a:	089b      	lsrs	r3, r3, #2
 800874c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800874e:	8afa      	ldrh	r2, [r7, #22]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008754:	b29b      	uxth	r3, r3
 8008756:	429a      	cmp	r2, r3
 8008758:	d91c      	bls.n	8008794 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	619a      	str	r2, [r3, #24]
        }
        break;
 8008766:	e015      	b.n	8008794 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	3303      	adds	r3, #3
 800876e:	089b      	lsrs	r3, r3, #2
 8008770:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008772:	8afa      	ldrh	r2, [r7, #22]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	b29b      	uxth	r3, r3
 800877e:	429a      	cmp	r2, r3
 8008780:	d90a      	bls.n	8008798 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	619a      	str	r2, [r3, #24]
        }
        break;
 800878e:	e003      	b.n	8008798 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008790:	bf00      	nop
 8008792:	e002      	b.n	800879a <USB_HC_StartXfer+0x4d2>
        break;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <USB_HC_StartXfer+0x4d2>
        break;
 8008798:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6999      	ldr	r1, [r3, #24]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	785a      	ldrb	r2, [r3, #1]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2000      	movs	r0, #0
 80087aa:	9000      	str	r0, [sp, #0]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7ff f9c3 	bl	8007b38 <USB_WritePacket>
  }

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3728      	adds	r7, #40	@ 0x28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	b29b      	uxth	r3, r3
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087de:	b480      	push	{r7}
 80087e0:	b089      	sub	sp, #36	@ 0x24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	0c9b      	lsrs	r3, r3, #18
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	0fdb      	lsrs	r3, r3, #31
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	0fdb      	lsrs	r3, r3, #31
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0320 	and.w	r3, r3, #32
 8008840:	2b20      	cmp	r3, #32
 8008842:	d10d      	bne.n	8008860 <USB_HC_Halt+0x82>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <USB_HC_Halt+0x82>
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d002      	beq.n	800885c <USB_HC_Halt+0x7e>
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b03      	cmp	r3, #3
 800885a:	d101      	bne.n	8008860 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	e0d8      	b.n	8008a12 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <USB_HC_Halt+0x8e>
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d173      	bne.n	8008954 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	440a      	add	r2, r1
 8008882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008886:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800888a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d14a      	bne.n	800892e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d133      	bne.n	800890c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088c2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088e2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088f0:	d82e      	bhi.n	8008950 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008908:	d0ec      	beq.n	80088e4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800890a:	e081      	b.n	8008a10 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800892a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800892c:	e070      	b.n	8008a10 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	440a      	add	r2, r1
 8008944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008948:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800894c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800894e:	e05f      	b.n	8008a10 <USB_HC_Halt+0x232>
            break;
 8008950:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008952:	e05d      	b.n	8008a10 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	4413      	add	r3, r2
 800895c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	440a      	add	r2, r1
 800896a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800896e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008972:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d133      	bne.n	80089ec <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	0151      	lsls	r1, r2, #5
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	440a      	add	r2, r1
 800899a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800899e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089d0:	d81d      	bhi.n	8008a0e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089e8:	d0ec      	beq.n	80089c4 <USB_HC_Halt+0x1e6>
 80089ea:	e011      	b.n	8008a10 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	0151      	lsls	r1, r2, #5
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	440a      	add	r2, r1
 8008a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	e000      	b.n	8008a10 <USB_HC_Halt+0x232>
          break;
 8008a0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3724      	adds	r7, #36	@ 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008a34:	2301      	movs	r3, #1
 8008a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	04da      	lsls	r2, r3, #19
 8008a3c:	4b15      	ldr	r3, [pc, #84]	@ (8008a94 <USB_DoPing+0x74>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	1ff80000 	.word	0x1ff80000

08008a98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7fe ff86 	bl	80079be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ab2:	2110      	movs	r1, #16
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe ffdf 	bl	8007a78 <USB_FlushTxFifo>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff f809 	bl	8007adc <USB_FlushRxFifo>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e01f      	b.n	8008b1a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008af0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008af8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b00:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b0e:	461a      	mov	r2, r3
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	3301      	adds	r3, #1
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b0f      	cmp	r3, #15
 8008b1e:	d9dc      	bls.n	8008ada <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	e034      	b.n	8008b90 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b4c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b6c:	d80c      	bhi.n	8008b88 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b84:	d0ec      	beq.n	8008b60 <USB_StopHost+0xc8>
 8008b86:	e000      	b.n	8008b8a <USB_StopHost+0xf2>
        break;
 8008b88:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	61bb      	str	r3, [r7, #24]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d9c7      	bls.n	8008b26 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ba2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008baa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7fe fef5 	bl	800799c <USB_EnableGlobalInt>

  return ret;
 8008bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008bc0:	4904      	ldr	r1, [pc, #16]	@ (8008bd4 <MX_FATFS_Init+0x18>)
 8008bc2:	4805      	ldr	r0, [pc, #20]	@ (8008bd8 <MX_FATFS_Init+0x1c>)
 8008bc4:	f003 fa42 	bl	800c04c <FATFS_LinkDriver>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b03      	ldr	r3, [pc, #12]	@ (8008bdc <MX_FATFS_Init+0x20>)
 8008bce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000448 	.word	0x20000448
 8008bd8:	0800c960 	.word	0x0800c960
 8008bdc:	20000444 	.word	0x20000444

08008be0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4808      	ldr	r0, [pc, #32]	@ (8008c2c <USBH_status+0x34>)
 8008c0c:	f000 fe79 	bl	8009902 <USBH_MSC_UnitIsReady>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <USBH_status+0x24>
  {
    res = RES_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	e001      	b.n	8008c20 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000458 	.word	0x20000458

08008c30 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b094      	sub	sp, #80	@ 0x50
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008c46:	7bf9      	ldrb	r1, [r7, #15]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	4813      	ldr	r0, [pc, #76]	@ (8008ca0 <USBH_read+0x70>)
 8008c52:	f000 feaa 	bl	80099aa <USBH_MSC_Read>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <USBH_read+0x34>
  {
    res = RES_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008c62:	e017      	b.n	8008c94 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008c64:	f107 0210 	add.w	r2, r7, #16
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	480c      	ldr	r0, [pc, #48]	@ (8008ca0 <USBH_read+0x70>)
 8008c6e:	f000 fe73 	bl	8009958 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008c72:	7f7b      	ldrb	r3, [r7, #29]
 8008c74:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c76:	d005      	beq.n	8008c84 <USBH_read+0x54>
 8008c78:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c7a:	dc07      	bgt.n	8008c8c <USBH_read+0x5c>
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d001      	beq.n	8008c84 <USBH_read+0x54>
 8008c80:	2b28      	cmp	r3, #40	@ 0x28
 8008c82:	d103      	bne.n	8008c8c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008c84:	2303      	movs	r3, #3
 8008c86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008c8a:	e003      	b.n	8008c94 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008c92:	bf00      	nop
    }
  }

  return res;
 8008c94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3748      	adds	r7, #72	@ 0x48
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000458 	.word	0x20000458

08008ca4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b094      	sub	sp, #80	@ 0x50
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008cba:	7bf9      	ldrb	r1, [r7, #15]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4817      	ldr	r0, [pc, #92]	@ (8008d24 <USBH_write+0x80>)
 8008cc6:	f000 fed0 	bl	8009a6a <USBH_MSC_Write>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <USBH_write+0x34>
  {
    res = RES_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008cd6:	e01f      	b.n	8008d18 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008cd8:	f107 0210 	add.w	r2, r7, #16
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4810      	ldr	r0, [pc, #64]	@ (8008d24 <USBH_write+0x80>)
 8008ce2:	f000 fe39 	bl	8009958 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008ce6:	7f7b      	ldrb	r3, [r7, #29]
 8008ce8:	2b3a      	cmp	r3, #58	@ 0x3a
 8008cea:	d00d      	beq.n	8008d08 <USBH_write+0x64>
 8008cec:	2b3a      	cmp	r3, #58	@ 0x3a
 8008cee:	dc0f      	bgt.n	8008d10 <USBH_write+0x6c>
 8008cf0:	2b28      	cmp	r3, #40	@ 0x28
 8008cf2:	d009      	beq.n	8008d08 <USBH_write+0x64>
 8008cf4:	2b28      	cmp	r3, #40	@ 0x28
 8008cf6:	dc0b      	bgt.n	8008d10 <USBH_write+0x6c>
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d005      	beq.n	8008d08 <USBH_write+0x64>
 8008cfc:	2b27      	cmp	r3, #39	@ 0x27
 8008cfe:	d107      	bne.n	8008d10 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008d00:	2302      	movs	r3, #2
 8008d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008d06:	e007      	b.n	8008d18 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008d0e:	e003      	b.n	8008d18 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8008d16:	bf00      	nop
    }
  }

  return res;
 8008d18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3748      	adds	r7, #72	@ 0x48
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000458 	.word	0x20000458

08008d28 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b090      	sub	sp, #64	@ 0x40
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	603a      	str	r2, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	460b      	mov	r3, r1
 8008d36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008d3e:	79bb      	ldrb	r3, [r7, #6]
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d852      	bhi.n	8008dea <USBH_ioctl+0xc2>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <USBH_ioctl+0x24>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008d65 	.word	0x08008d65
 8008d54:	08008d8f 	.word	0x08008d8f
 8008d58:	08008dbb 	.word	0x08008dbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008d62:	e045      	b.n	8008df0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008d64:	f107 0208 	add.w	r2, r7, #8
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4823      	ldr	r0, [pc, #140]	@ (8008dfc <USBH_ioctl+0xd4>)
 8008d6e:	f000 fdf3 	bl	8009958 <USBH_MSC_GetLUNInfo>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d106      	bne.n	8008d86 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008d84:	e034      	b.n	8008df0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008d8c:	e030      	b.n	8008df0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008d8e:	f107 0208 	add.w	r2, r7, #8
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	4619      	mov	r1, r3
 8008d96:	4819      	ldr	r0, [pc, #100]	@ (8008dfc <USBH_ioctl+0xd4>)
 8008d98:	f000 fdde 	bl	8009958 <USBH_MSC_GetLUNInfo>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d107      	bne.n	8008db2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008da2:	8a3b      	ldrh	r3, [r7, #16]
 8008da4:	461a      	mov	r2, r3
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008db0:	e01e      	b.n	8008df0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008db8:	e01a      	b.n	8008df0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008dba:	f107 0208 	add.w	r2, r7, #8
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	480e      	ldr	r0, [pc, #56]	@ (8008dfc <USBH_ioctl+0xd4>)
 8008dc4:	f000 fdc8 	bl	8009958 <USBH_MSC_GetLUNInfo>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008dce:	8a3b      	ldrh	r3, [r7, #16]
 8008dd0:	0a5b      	lsrs	r3, r3, #9
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008de0:	e006      	b.n	8008df0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8008de8:	e002      	b.n	8008df0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008dea:	2304      	movs	r3, #4
 8008dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8008df0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3740      	adds	r7, #64	@ 0x40
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000458 	.word	0x20000458

08008e00 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008e00:	b590      	push	{r4, r7, lr}
 8008e02:	b089      	sub	sp, #36	@ 0x24
 8008e04:	af04      	add	r7, sp, #16
 8008e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e0e:	7919      	ldrb	r1, [r3, #4]
 8008e10:	2350      	movs	r3, #80	@ 0x50
 8008e12:	2206      	movs	r2, #6
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fcd5 	bl	800a7c4 <USBH_FindInterface>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2bff      	cmp	r3, #255	@ 0xff
 8008e22:	d002      	beq.n	8008e2a <USBH_MSC_InterfaceInit+0x2a>
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d901      	bls.n	8008e2e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e106      	b.n	800903c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fcaa 	bl	800a78c <USBH_SelectInterface>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e0fa      	b.n	800903c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008e4c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8008e50:	f003 fc12 	bl	800c678 <malloc>
 8008e54:	4603      	mov	r3, r0
 8008e56:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e0e7      	b.n	800903c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008e6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008e70:	2100      	movs	r1, #0
 8008e72:	68b8      	ldr	r0, [r7, #8]
 8008e74:	f003 fcbe 	bl	800c7f4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	211a      	movs	r1, #26
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b25b      	sxtb	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da16      	bge.n	8008ebe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	211a      	movs	r1, #26
 8008e96:	fb01 f303 	mul.w	r3, r1, r3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	211a      	movs	r1, #26
 8008eac:	fb01 f303 	mul.w	r3, r1, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	815a      	strh	r2, [r3, #10]
 8008ebc:	e015      	b.n	8008eea <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	211a      	movs	r1, #26
 8008ec4:	fb01 f303 	mul.w	r3, r1, r3
 8008ec8:	4413      	add	r3, r2
 8008eca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	211a      	movs	r1, #26
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ee4:	881a      	ldrh	r2, [r3, #0]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	211a      	movs	r1, #26
 8008ef0:	fb01 f303 	mul.w	r3, r1, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b25b      	sxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da16      	bge.n	8008f30 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	211a      	movs	r1, #26
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008f12:	781a      	ldrb	r2, [r3, #0]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	211a      	movs	r1, #26
 8008f1e:	fb01 f303 	mul.w	r3, r1, r3
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	815a      	strh	r2, [r3, #10]
 8008f2e:	e015      	b.n	8008f5c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	211a      	movs	r1, #26
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	211a      	movs	r1, #26
 8008f4c:	fb01 f303 	mul.w	r3, r1, r3
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008f56:	881a      	ldrh	r2, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2200      	movs	r2, #0
 8008f66:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	799b      	ldrb	r3, [r3, #6]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 ffba 	bl	800beee <USBH_AllocPipe>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	79db      	ldrb	r3, [r3, #7]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f002 ffb0 	bl	800beee <USBH_AllocPipe>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fe02 	bl	8009ba0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	799b      	ldrb	r3, [r3, #6]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01e      	beq.n	8008fe2 <USBH_MSC_InterfaceInit+0x1e2>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	891b      	ldrh	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01a      	beq.n	8008fe2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7959      	ldrb	r1, [r3, #5]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	7998      	ldrb	r0, [r3, #6]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	8912      	ldrh	r2, [r2, #8]
 8008fc4:	9202      	str	r2, [sp, #8]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4623      	mov	r3, r4
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f002 ff5d 	bl	800be90 <USBH_OpenPipe>
 8008fd6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	79db      	ldrb	r3, [r3, #7]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d02c      	beq.n	800903a <USBH_MSC_InterfaceInit+0x23a>
 8008fe0:	e001      	b.n	8008fe6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e02a      	b.n	800903c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	895b      	ldrh	r3, [r3, #10]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d025      	beq.n	800903a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	7919      	ldrb	r1, [r3, #4]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	79d8      	ldrb	r0, [r3, #7]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	8952      	ldrh	r2, [r2, #10]
 8009006:	9202      	str	r2, [sp, #8]
 8009008:	2202      	movs	r2, #2
 800900a:	9201      	str	r2, [sp, #4]
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	4623      	mov	r3, r4
 8009010:	4602      	mov	r2, r0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f002 ff3c 	bl	800be90 <USBH_OpenPipe>
 8009018:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f003 fa8b 	bl	800c53e <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	795b      	ldrb	r3, [r3, #5]
 800902c:	2200      	movs	r2, #0
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f003 fa84 	bl	800c53e <USBH_LL_SetToggle>

  return USBH_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	e000      	b.n	800903c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800903a:	2303      	movs	r3, #3
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	bd90      	pop	{r4, r7, pc}

08009044 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	795b      	ldrb	r3, [r3, #5]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00e      	beq.n	800907c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f002 ff32 	bl	800bece <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	795b      	ldrb	r3, [r3, #5]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f002 ff5d 	bl	800bf30 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	791b      	ldrb	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00e      	beq.n	80090a2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	791b      	ldrb	r3, [r3, #4]
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f002 ff1f 	bl	800bece <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f002 ff4a 	bl	800bf30 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f003 fae6 	bl	800c688 <free>
    phost->pActiveClass->pData = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090c2:	2200      	movs	r2, #0
 80090c4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7b9b      	ldrb	r3, [r3, #14]
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d041      	beq.n	8009172 <USBH_MSC_ClassRequest+0xa2>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	dc4b      	bgt.n	800918a <USBH_MSC_ClassRequest+0xba>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <USBH_MSC_ClassRequest+0x2a>
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d147      	bne.n	800918a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fd30 	bl	8009b64 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b03      	cmp	r3, #3
 800910c:	d104      	bne.n	8009118 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d137      	bne.n	800918e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b02      	cmp	r3, #2
 8009124:	d804      	bhi.n	8009130 <USBH_MSC_ClassRequest+0x60>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	b2da      	uxtb	r2, r3
 800912e:	e000      	b.n	8009132 <USBH_MSC_ClassRequest+0x62>
 8009130:	2202      	movs	r2, #2
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009136:	2300      	movs	r3, #0
 8009138:	73bb      	strb	r3, [r7, #14]
 800913a:	e014      	b.n	8009166 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	2134      	movs	r1, #52	@ 0x34
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	3392      	adds	r3, #146	@ 0x92
 800914a:	2202      	movs	r2, #2
 800914c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	2134      	movs	r1, #52	@ 0x34
 8009154:	fb01 f303 	mul.w	r3, r1, r3
 8009158:	4413      	add	r3, r2
 800915a:	33c1      	adds	r3, #193	@ 0xc1
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	3301      	adds	r3, #1
 8009164:	73bb      	strb	r3, [r7, #14]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	7bba      	ldrb	r2, [r7, #14]
 800916c:	429a      	cmp	r2, r3
 800916e:	d3e5      	bcc.n	800913c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009170:	e00d      	b.n	800918e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009172:	2100      	movs	r1, #0
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f002 f903 	bl	800b380 <USBH_ClrFeature>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	7bda      	ldrb	r2, [r3, #15]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009188:	e003      	b.n	8009192 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <USBH_MSC_ClassRequest+0xc4>
      break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009192:	bf00      	nop
  }

  return status;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80091b2:	2301      	movs	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80091ba:	2301      	movs	r3, #1
 80091bc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	2b0a      	cmp	r3, #10
 80091c4:	f000 8280 	beq.w	80096c8 <USBH_MSC_Process+0x528>
 80091c8:	2b0a      	cmp	r3, #10
 80091ca:	f300 82b8 	bgt.w	800973e <USBH_MSC_Process+0x59e>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <USBH_MSC_Process+0x3a>
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	f000 82b0 	beq.w	8009738 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80091d8:	e2b1      	b.n	800973e <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	7812      	ldrb	r2, [r2, #0]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	f080 825d 	bcs.w	80096a4 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80091f0:	4619      	mov	r1, r3
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	2334      	movs	r3, #52	@ 0x34
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	4413      	add	r3, r2
 80091fc:	3391      	adds	r3, #145	@ 0x91
 80091fe:	2201      	movs	r2, #1
 8009200:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009208:	4619      	mov	r1, r3
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	2334      	movs	r3, #52	@ 0x34
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	4413      	add	r3, r2
 8009214:	3390      	adds	r3, #144	@ 0x90
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b08      	cmp	r3, #8
 800921a:	f200 824b 	bhi.w	80096b4 <USBH_MSC_Process+0x514>
 800921e:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <USBH_MSC_Process+0x84>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	08009249 	.word	0x08009249
 8009228:	080096b5 	.word	0x080096b5
 800922c:	08009313 	.word	0x08009313
 8009230:	08009499 	.word	0x08009499
 8009234:	0800926f 	.word	0x0800926f
 8009238:	08009565 	.word	0x08009565
 800923c:	080096b5 	.word	0x080096b5
 8009240:	080096b5 	.word	0x080096b5
 8009244:	08009693 	.word	0x08009693
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800924e:	4619      	mov	r1, r3
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	2334      	movs	r3, #52	@ 0x34
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	4413      	add	r3, r2
 800925a:	3390      	adds	r3, #144	@ 0x90
 800925c:	2204      	movs	r2, #4
 800925e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 800926c:	e22b      	b.n	80096c6 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009274:	b2d9      	uxtb	r1, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800927c:	461a      	mov	r2, r3
 800927e:	2334      	movs	r3, #52	@ 0x34
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	3398      	adds	r3, #152	@ 0x98
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4413      	add	r3, r2
 800928a:	3307      	adds	r3, #7
 800928c:	461a      	mov	r2, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 ffa3 	bl	800a1da <USBH_MSC_SCSI_Inquiry>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10c      	bne.n	80092b8 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80092a4:	4619      	mov	r1, r3
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	2334      	movs	r3, #52	@ 0x34
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	4413      	add	r3, r2
 80092b0:	3390      	adds	r3, #144	@ 0x90
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
            break;
 80092b6:	e1ff      	b.n	80096b8 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d10c      	bne.n	80092d8 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80092c4:	4619      	mov	r1, r3
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	2334      	movs	r3, #52	@ 0x34
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	3390      	adds	r3, #144	@ 0x90
 80092d2:	2205      	movs	r2, #5
 80092d4:	701a      	strb	r2, [r3, #0]
            break;
 80092d6:	e1ef      	b.n	80096b8 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b04      	cmp	r3, #4
 80092dc:	f040 81ec 	bne.w	80096b8 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80092e6:	4619      	mov	r1, r3
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	2334      	movs	r3, #52	@ 0x34
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	3390      	adds	r3, #144	@ 0x90
 80092f4:	2208      	movs	r2, #8
 80092f6:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80092fe:	4619      	mov	r1, r3
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	2334      	movs	r3, #52	@ 0x34
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	3391      	adds	r3, #145	@ 0x91
 800930c:	2202      	movs	r2, #2
 800930e:	701a      	strb	r2, [r3, #0]
            break;
 8009310:	e1d2      	b.n	80096b8 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fe9f 	bl	800a060 <USBH_MSC_SCSI_TestUnitReady>
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d14a      	bne.n	80093c2 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009332:	4619      	mov	r1, r3
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	2334      	movs	r3, #52	@ 0x34
 8009338:	fb01 f303 	mul.w	r3, r1, r3
 800933c:	4413      	add	r3, r2
 800933e:	3392      	adds	r3, #146	@ 0x92
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00c      	beq.n	8009360 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800934c:	4619      	mov	r1, r3
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	2334      	movs	r3, #52	@ 0x34
 8009352:	fb01 f303 	mul.w	r3, r1, r3
 8009356:	4413      	add	r3, r2
 8009358:	33c1      	adds	r3, #193	@ 0xc1
 800935a:	2201      	movs	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e00b      	b.n	8009378 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009366:	4619      	mov	r1, r3
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	2334      	movs	r3, #52	@ 0x34
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	4413      	add	r3, r2
 8009372:	33c1      	adds	r3, #193	@ 0xc1
 8009374:	2200      	movs	r2, #0
 8009376:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800937e:	4619      	mov	r1, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	2334      	movs	r3, #52	@ 0x34
 8009384:	fb01 f303 	mul.w	r3, r1, r3
 8009388:	4413      	add	r3, r2
 800938a:	3390      	adds	r3, #144	@ 0x90
 800938c:	2203      	movs	r2, #3
 800938e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009396:	4619      	mov	r1, r3
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	2334      	movs	r3, #52	@ 0x34
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	3391      	adds	r3, #145	@ 0x91
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80093ae:	4619      	mov	r1, r3
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	2334      	movs	r3, #52	@ 0x34
 80093b4:	fb01 f303 	mul.w	r3, r1, r3
 80093b8:	4413      	add	r3, r2
 80093ba:	3392      	adds	r3, #146	@ 0x92
 80093bc:	2200      	movs	r2, #0
 80093be:	701a      	strb	r2, [r3, #0]
            break;
 80093c0:	e17c      	b.n	80096bc <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d14a      	bne.n	800945e <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80093ce:	4619      	mov	r1, r3
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	2334      	movs	r3, #52	@ 0x34
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	4413      	add	r3, r2
 80093da:	3392      	adds	r3, #146	@ 0x92
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d00c      	beq.n	80093fc <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80093e8:	4619      	mov	r1, r3
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	2334      	movs	r3, #52	@ 0x34
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	33c1      	adds	r3, #193	@ 0xc1
 80093f6:	2201      	movs	r2, #1
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e00b      	b.n	8009414 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009402:	4619      	mov	r1, r3
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	2334      	movs	r3, #52	@ 0x34
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	33c1      	adds	r3, #193	@ 0xc1
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800941a:	4619      	mov	r1, r3
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	2334      	movs	r3, #52	@ 0x34
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	4413      	add	r3, r2
 8009426:	3390      	adds	r3, #144	@ 0x90
 8009428:	2205      	movs	r2, #5
 800942a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009432:	4619      	mov	r1, r3
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	2334      	movs	r3, #52	@ 0x34
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	4413      	add	r3, r2
 800943e:	3391      	adds	r3, #145	@ 0x91
 8009440:	2201      	movs	r2, #1
 8009442:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800944a:	4619      	mov	r1, r3
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	2334      	movs	r3, #52	@ 0x34
 8009450:	fb01 f303 	mul.w	r3, r1, r3
 8009454:	4413      	add	r3, r2
 8009456:	3392      	adds	r3, #146	@ 0x92
 8009458:	2202      	movs	r2, #2
 800945a:	701a      	strb	r2, [r3, #0]
            break;
 800945c:	e12e      	b.n	80096bc <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b04      	cmp	r3, #4
 8009462:	f040 812b 	bne.w	80096bc <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800946c:	4619      	mov	r1, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2334      	movs	r3, #52	@ 0x34
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	4413      	add	r3, r2
 8009478:	3390      	adds	r3, #144	@ 0x90
 800947a:	2208      	movs	r2, #8
 800947c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009484:	4619      	mov	r1, r3
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	2334      	movs	r3, #52	@ 0x34
 800948a:	fb01 f303 	mul.w	r3, r1, r3
 800948e:	4413      	add	r3, r2
 8009490:	3391      	adds	r3, #145	@ 0x91
 8009492:	2202      	movs	r2, #2
 8009494:	701a      	strb	r2, [r3, #0]
            break;
 8009496:	e111      	b.n	80096bc <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800949e:	b2d9      	uxtb	r1, r3
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80094a6:	461a      	mov	r2, r3
 80094a8:	2334      	movs	r3, #52	@ 0x34
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	3390      	adds	r3, #144	@ 0x90
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	461a      	mov	r2, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fe14 	bl	800a0e6 <USBH_MSC_SCSI_ReadCapacity>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d120      	bne.n	800950a <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80094ce:	4619      	mov	r1, r3
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	2334      	movs	r3, #52	@ 0x34
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	3390      	adds	r3, #144	@ 0x90
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80094e6:	4619      	mov	r1, r3
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	2334      	movs	r3, #52	@ 0x34
 80094ec:	fb01 f303 	mul.w	r3, r1, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	3391      	adds	r3, #145	@ 0x91
 80094f4:	2200      	movs	r2, #0
 80094f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80094fe:	3301      	adds	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009508:	e0da      	b.n	80096c0 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d10c      	bne.n	800952a <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009516:	4619      	mov	r1, r3
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	2334      	movs	r3, #52	@ 0x34
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	4413      	add	r3, r2
 8009522:	3390      	adds	r3, #144	@ 0x90
 8009524:	2205      	movs	r2, #5
 8009526:	701a      	strb	r2, [r3, #0]
            break;
 8009528:	e0ca      	b.n	80096c0 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	2b04      	cmp	r3, #4
 800952e:	f040 80c7 	bne.w	80096c0 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009538:	4619      	mov	r1, r3
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	2334      	movs	r3, #52	@ 0x34
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	4413      	add	r3, r2
 8009544:	3390      	adds	r3, #144	@ 0x90
 8009546:	2208      	movs	r2, #8
 8009548:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009550:	4619      	mov	r1, r3
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	2334      	movs	r3, #52	@ 0x34
 8009556:	fb01 f303 	mul.w	r3, r1, r3
 800955a:	4413      	add	r3, r2
 800955c:	3391      	adds	r3, #145	@ 0x91
 800955e:	2202      	movs	r2, #2
 8009560:	701a      	strb	r2, [r3, #0]
            break;
 8009562:	e0ad      	b.n	80096c0 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800956a:	b2d9      	uxtb	r1, r3
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009572:	461a      	mov	r2, r3
 8009574:	2334      	movs	r3, #52	@ 0x34
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	3398      	adds	r3, #152	@ 0x98
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	3304      	adds	r3, #4
 8009582:	461a      	mov	r2, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fecd 	bl	800a324 <USBH_MSC_SCSI_RequestSense>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d146      	bne.n	8009622 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800959a:	4619      	mov	r1, r3
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	2334      	movs	r3, #52	@ 0x34
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	339c      	adds	r3, #156	@ 0x9c
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b06      	cmp	r3, #6
 80095ac:	d00c      	beq.n	80095c8 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80095b4:	4619      	mov	r1, r3
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	2334      	movs	r3, #52	@ 0x34
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	4413      	add	r3, r2
 80095c0:	339c      	adds	r3, #156	@ 0x9c
 80095c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d117      	bne.n	80095f8 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80095da:	4293      	cmp	r3, r2
 80095dc:	d80c      	bhi.n	80095f8 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80095e4:	4619      	mov	r1, r3
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	2334      	movs	r3, #52	@ 0x34
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	4413      	add	r3, r2
 80095f0:	3390      	adds	r3, #144	@ 0x90
 80095f2:	2202      	movs	r2, #2
 80095f4:	701a      	strb	r2, [r3, #0]
                  break;
 80095f6:	e066      	b.n	80096c6 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80095fe:	4619      	mov	r1, r3
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	2334      	movs	r3, #52	@ 0x34
 8009604:	fb01 f303 	mul.w	r3, r1, r3
 8009608:	4413      	add	r3, r2
 800960a:	3390      	adds	r3, #144	@ 0x90
 800960c:	2201      	movs	r2, #1
 800960e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009616:	3301      	adds	r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009620:	e050      	b.n	80096c4 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d118      	bne.n	800965a <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800962e:	4619      	mov	r1, r3
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	2334      	movs	r3, #52	@ 0x34
 8009634:	fb01 f303 	mul.w	r3, r1, r3
 8009638:	4413      	add	r3, r2
 800963a:	3390      	adds	r3, #144	@ 0x90
 800963c:	2208      	movs	r2, #8
 800963e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009646:	4619      	mov	r1, r3
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	2334      	movs	r3, #52	@ 0x34
 800964c:	fb01 f303 	mul.w	r3, r1, r3
 8009650:	4413      	add	r3, r2
 8009652:	3391      	adds	r3, #145	@ 0x91
 8009654:	2202      	movs	r2, #2
 8009656:	701a      	strb	r2, [r3, #0]
            break;
 8009658:	e034      	b.n	80096c4 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	2b04      	cmp	r3, #4
 800965e:	d131      	bne.n	80096c4 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009666:	4619      	mov	r1, r3
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	2334      	movs	r3, #52	@ 0x34
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	3390      	adds	r3, #144	@ 0x90
 8009674:	2208      	movs	r2, #8
 8009676:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800967e:	4619      	mov	r1, r3
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	2334      	movs	r3, #52	@ 0x34
 8009684:	fb01 f303 	mul.w	r3, r1, r3
 8009688:	4413      	add	r3, r2
 800968a:	3391      	adds	r3, #145	@ 0x91
 800968c:	2202      	movs	r2, #2
 800968e:	701a      	strb	r2, [r3, #0]
            break;
 8009690:	e018      	b.n	80096c4 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009698:	3301      	adds	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80096a2:	e010      	b.n	80096c6 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	220a      	movs	r2, #10
 80096b0:	731a      	strb	r2, [r3, #12]
      break;
 80096b2:	e045      	b.n	8009740 <USBH_MSC_Process+0x5a0>
            break;
 80096b4:	bf00      	nop
 80096b6:	e043      	b.n	8009740 <USBH_MSC_Process+0x5a0>
            break;
 80096b8:	bf00      	nop
 80096ba:	e041      	b.n	8009740 <USBH_MSC_Process+0x5a0>
            break;
 80096bc:	bf00      	nop
 80096be:	e03f      	b.n	8009740 <USBH_MSC_Process+0x5a0>
            break;
 80096c0:	bf00      	nop
 80096c2:	e03d      	b.n	8009740 <USBH_MSC_Process+0x5a0>
            break;
 80096c4:	bf00      	nop
      break;
 80096c6:	e03b      	b.n	8009740 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	7812      	ldrb	r2, [r2, #0]
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d228      	bcs.n	8009728 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80096e8:	4619      	mov	r1, r3
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	2334      	movs	r3, #52	@ 0x34
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3391      	adds	r3, #145	@ 0x91
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009702:	2102      	movs	r1, #2
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
 8009708:	e005      	b.n	8009716 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009710:	2106      	movs	r1, #6
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
        MSC_Handle->lun++;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 800971c:	3301      	adds	r3, #1
 800971e:	b29a      	uxth	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8009726:	e00b      	b.n	8009740 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2200      	movs	r2, #0
 800972c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2201      	movs	r2, #1
 8009734:	731a      	strb	r2, [r3, #12]
      break;
 8009736:	e003      	b.n	8009740 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]
      break;
 800973c:	e000      	b.n	8009740 <USBH_MSC_Process+0x5a0>
      break;
 800973e:	bf00      	nop
  }
  return error;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop

0800974c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b088      	sub	sp, #32
 8009766:	af02      	add	r7, sp, #8
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009778:	2301      	movs	r3, #1
 800977a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800977c:	2301      	movs	r3, #1
 800977e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	2134      	movs	r1, #52	@ 0x34
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	4413      	add	r3, r2
 800978c:	3390      	adds	r3, #144	@ 0x90
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b07      	cmp	r3, #7
 8009792:	d03c      	beq.n	800980e <USBH_MSC_RdWrProcess+0xac>
 8009794:	2b07      	cmp	r3, #7
 8009796:	f300 80a8 	bgt.w	80098ea <USBH_MSC_RdWrProcess+0x188>
 800979a:	2b05      	cmp	r3, #5
 800979c:	d06c      	beq.n	8009878 <USBH_MSC_RdWrProcess+0x116>
 800979e:	2b06      	cmp	r3, #6
 80097a0:	f040 80a3 	bne.w	80098ea <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80097a4:	78f9      	ldrb	r1, [r7, #3]
 80097a6:	2300      	movs	r3, #0
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fea7 	bl	800a502 <USBH_MSC_SCSI_Read>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10b      	bne.n	80097d6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	2134      	movs	r1, #52	@ 0x34
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	3390      	adds	r3, #144	@ 0x90
 80097cc:	2201      	movs	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80097d4:	e08b      	b.n	80098ee <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d109      	bne.n	80097f0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	2134      	movs	r1, #52	@ 0x34
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	3390      	adds	r3, #144	@ 0x90
 80097ea:	2205      	movs	r2, #5
 80097ec:	701a      	strb	r2, [r3, #0]
      break;
 80097ee:	e07e      	b.n	80098ee <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d17b      	bne.n	80098ee <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	2134      	movs	r1, #52	@ 0x34
 80097fc:	fb01 f303 	mul.w	r3, r1, r3
 8009800:	4413      	add	r3, r2
 8009802:	3390      	adds	r3, #144	@ 0x90
 8009804:	2208      	movs	r2, #8
 8009806:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009808:	2302      	movs	r3, #2
 800980a:	75fb      	strb	r3, [r7, #23]
      break;
 800980c:	e06f      	b.n	80098ee <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800980e:	78f9      	ldrb	r1, [r7, #3]
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	2200      	movs	r2, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fe02 	bl	800a422 <USBH_MSC_SCSI_Write>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10b      	bne.n	8009840 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	2134      	movs	r1, #52	@ 0x34
 800982e:	fb01 f303 	mul.w	r3, r1, r3
 8009832:	4413      	add	r3, r2
 8009834:	3390      	adds	r3, #144	@ 0x90
 8009836:	2201      	movs	r2, #1
 8009838:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800983e:	e058      	b.n	80098f2 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b02      	cmp	r3, #2
 8009844:	d109      	bne.n	800985a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	2134      	movs	r1, #52	@ 0x34
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	4413      	add	r3, r2
 8009852:	3390      	adds	r3, #144	@ 0x90
 8009854:	2205      	movs	r2, #5
 8009856:	701a      	strb	r2, [r3, #0]
      break;
 8009858:	e04b      	b.n	80098f2 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b04      	cmp	r3, #4
 800985e:	d148      	bne.n	80098f2 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	2134      	movs	r1, #52	@ 0x34
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	4413      	add	r3, r2
 800986c:	3390      	adds	r3, #144	@ 0x90
 800986e:	2208      	movs	r2, #8
 8009870:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009872:	2302      	movs	r3, #2
 8009874:	75fb      	strb	r3, [r7, #23]
      break;
 8009876:	e03c      	b.n	80098f2 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2234      	movs	r2, #52	@ 0x34
 800987c:	fb02 f303 	mul.w	r3, r2, r3
 8009880:	3398      	adds	r3, #152	@ 0x98
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	4413      	add	r3, r2
 8009886:	1d1a      	adds	r2, r3, #4
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fd49 	bl	800a324 <USBH_MSC_SCSI_RequestSense>
 8009892:	4603      	mov	r3, r0
 8009894:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d114      	bne.n	80098c6 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	2134      	movs	r1, #52	@ 0x34
 80098a2:	fb01 f303 	mul.w	r3, r1, r3
 80098a6:	4413      	add	r3, r2
 80098a8:	3390      	adds	r3, #144	@ 0x90
 80098aa:	2201      	movs	r2, #1
 80098ac:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	2134      	movs	r1, #52	@ 0x34
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	3391      	adds	r3, #145	@ 0x91
 80098bc:	2202      	movs	r2, #2
 80098be:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80098c0:	2302      	movs	r3, #2
 80098c2:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80098c4:	e017      	b.n	80098f6 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d014      	beq.n	80098f6 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d111      	bne.n	80098f6 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	2134      	movs	r1, #52	@ 0x34
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	4413      	add	r3, r2
 80098de:	3390      	adds	r3, #144	@ 0x90
 80098e0:	2208      	movs	r2, #8
 80098e2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80098e4:	2302      	movs	r3, #2
 80098e6:	75fb      	strb	r3, [r7, #23]
      break;
 80098e8:	e005      	b.n	80098f6 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 80098ea:	bf00      	nop
 80098ec:	e004      	b.n	80098f8 <USBH_MSC_RdWrProcess+0x196>
      break;
 80098ee:	bf00      	nop
 80098f0:	e002      	b.n	80098f8 <USBH_MSC_RdWrProcess+0x196>
      break;
 80098f2:	bf00      	nop
 80098f4:	e000      	b.n	80098f8 <USBH_MSC_RdWrProcess+0x196>
      break;
 80098f6:	bf00      	nop

  }
  return error;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009902:	b480      	push	{r7}
 8009904:	b085      	sub	sp, #20
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8009918:	78fb      	ldrb	r3, [r7, #3]
 800991a:	b29a      	uxth	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b0b      	cmp	r3, #11
 800992a:	d10c      	bne.n	8009946 <USBH_MSC_UnitIsReady+0x44>
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	2134      	movs	r1, #52	@ 0x34
 8009932:	fb01 f303 	mul.w	r3, r1, r3
 8009936:	4413      	add	r3, r2
 8009938:	3391      	adds	r3, #145	@ 0x91
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
 8009944:	e001      	b.n	800994a <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	460b      	mov	r3, r1
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	b29a      	uxth	r2, r3
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b0b      	cmp	r3, #11
 8009982:	d10d      	bne.n	80099a0 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	2234      	movs	r2, #52	@ 0x34
 8009988:	fb02 f303 	mul.w	r3, r2, r3
 800998c:	3390      	adds	r3, #144	@ 0x90
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4413      	add	r3, r2
 8009992:	2234      	movs	r2, #52	@ 0x34
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f002 ff70 	bl	800c87c <memcpy>
    return USBH_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b088      	sub	sp, #32
 80099ae:	af02      	add	r7, sp, #8
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
 80099b6:	460b      	mov	r3, r1
 80099b8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00e      	beq.n	80099f8 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 80099e0:	2b0b      	cmp	r3, #11
 80099e2:	d109      	bne.n	80099f8 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	2134      	movs	r1, #52	@ 0x34
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	3390      	adds	r3, #144	@ 0x90
 80099f2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d001      	beq.n	80099fc <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 80099f8:	2302      	movs	r3, #2
 80099fa:	e032      	b.n	8009a62 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	2134      	movs	r1, #52	@ 0x34
 8009a02:	fb01 f303 	mul.w	r3, r1, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	3390      	adds	r3, #144	@ 0x90
 8009a0a:	2206      	movs	r2, #6
 8009a0c:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009a0e:	7af9      	ldrb	r1, [r7, #11]
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fd72 	bl	800a502 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a24:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a26:	e013      	b.n	8009a50 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1ad2      	subs	r2, r2, r3
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d805      	bhi.n	8009a4c <USBH_MSC_Read+0xa2>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e008      	b.n	8009a62 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	4619      	mov	r1, r3
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7ff fe84 	bl	8009762 <USBH_MSC_RdWrProcess>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d0e3      	beq.n	8009a28 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b088      	sub	sp, #32
 8009a6e:	af02      	add	r7, sp, #8
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	460b      	mov	r3, r1
 8009a78:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.PortEnabled == 0U) ||
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b2db      	uxtb	r3, r3
  if ((phost->device.PortEnabled == 0U) ||
 8009aa0:	2b0b      	cmp	r3, #11
 8009aa2:	d109      	bne.n	8009ab8 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009aa4:	7afb      	ldrb	r3, [r7, #11]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	2134      	movs	r1, #52	@ 0x34
 8009aaa:	fb01 f303 	mul.w	r3, r1, r3
 8009aae:	4413      	add	r3, r2
 8009ab0:	3390      	adds	r3, #144	@ 0x90
 8009ab2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d001      	beq.n	8009abc <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e032      	b.n	8009b22 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	2134      	movs	r1, #52	@ 0x34
 8009ac2:	fb01 f303 	mul.w	r3, r1, r3
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3390      	adds	r3, #144	@ 0x90
 8009aca:	2207      	movs	r2, #7
 8009acc:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009ace:	7af9      	ldrb	r1, [r7, #11]
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fca2 	bl	800a422 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ae4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009ae6:	e013      	b.n	8009b10 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.PortEnabled == 0U))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d805      	bhi.n	8009b0c <USBH_MSC_Write+0xa2>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e008      	b.n	8009b22 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	4619      	mov	r1, r3
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fe24 	bl	8009762 <USBH_MSC_RdWrProcess>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d0e3      	beq.n	8009ae8 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2221      	movs	r2, #33	@ 0x21
 8009b36:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	22ff      	movs	r2, #255	@ 0xff
 8009b3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009b50:	2200      	movs	r2, #0
 8009b52:	2100      	movs	r1, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 ff47 	bl	800b9e8 <USBH_CtlReq>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	22a1      	movs	r2, #161	@ 0xa1
 8009b72:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	22fe      	movs	r2, #254	@ 0xfe
 8009b78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 ff29 	bl	800b9e8 <USBH_CtlReq>
 8009b96:	4603      	mov	r3, r0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a09      	ldr	r2, [pc, #36]	@ (8009bdc <USBH_MSC_BOT_Init+0x3c>)
 8009bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4a09      	ldr	r2, [pc, #36]	@ (8009be0 <USBH_MSC_BOT_Init+0x40>)
 8009bbc:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	43425355 	.word	0x43425355
 8009be0:	20304050 	.word	0x20304050

08009be4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c14:	3b01      	subs	r3, #1
 8009c16:	2b0a      	cmp	r3, #10
 8009c18:	f200 819e 	bhi.w	8009f58 <USBH_MSC_BOT_Process+0x374>
 8009c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <USBH_MSC_BOT_Process+0x40>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009ce3 	.word	0x08009ce3
 8009c30:	08009d01 	.word	0x08009d01
 8009c34:	08009d85 	.word	0x08009d85
 8009c38:	08009da7 	.word	0x08009da7
 8009c3c:	08009e3f 	.word	0x08009e3f
 8009c40:	08009e5b 	.word	0x08009e5b
 8009c44:	08009ead 	.word	0x08009ead
 8009c48:	08009edd 	.word	0x08009edd
 8009c4c:	08009f3f 	.word	0x08009f3f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	795b      	ldrb	r3, [r3, #5]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	9200      	str	r2, [sp, #0]
 8009c6e:	221f      	movs	r2, #31
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f002 f8ca 	bl	800be0a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009c76:	e17e      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	795b      	ldrb	r3, [r3, #5]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f002 fc3c 	bl	800c4fc <USBH_LL_GetURBState>
 8009c84:	4603      	mov	r3, r0
 8009c86:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009c88:	7d3b      	ldrb	r3, [r7, #20]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d118      	bne.n	8009cc0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00f      	beq.n	8009cb6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da04      	bge.n	8009cac <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009caa:	e157      	b.n	8009f5c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2205      	movs	r2, #5
 8009cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009cb4:	e152      	b.n	8009f5c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2207      	movs	r2, #7
 8009cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009cbe:	e14d      	b.n	8009f5c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cc0:	7d3b      	ldrb	r3, [r7, #20]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d104      	bne.n	8009cd0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009cce:	e145      	b.n	8009f5c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009cd0:	7d3b      	ldrb	r3, [r7, #20]
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	f040 8142 	bne.w	8009f5c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	220a      	movs	r2, #10
 8009cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009ce0:	e13c      	b.n	8009f5c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:

      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	895a      	ldrh	r2, [r3, #10]
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	791b      	ldrb	r3, [r3, #4]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f002 f8af 	bl	800be54 <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2204      	movs	r2, #4
 8009cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8009cfe:	e13a      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f002 fbf8 	bl	800c4fc <USBH_LL_GetURBState>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d10:	7d3b      	ldrb	r3, [r7, #20]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d12d      	bne.n	8009d72 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	8952      	ldrh	r2, [r2, #10]
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d910      	bls.n	8009d44 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	8952      	ldrh	r2, [r2, #10]
 8009d2c:	441a      	add	r2, r3
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	8952      	ldrh	r2, [r2, #10]
 8009d3c:	1a9a      	subs	r2, r3, r2
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d42:	e002      	b.n	8009d4a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2200      	movs	r2, #0
 8009d48:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	895a      	ldrh	r2, [r3, #10]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	791b      	ldrb	r3, [r3, #4]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f002 f877 	bl	800be54 <USBH_BulkReceiveData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8009d66:	e0fb      	b.n	8009f60 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2207      	movs	r2, #7
 8009d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009d70:	e0f6      	b.n	8009f60 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009d72:	7d3b      	ldrb	r3, [r7, #20]
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	f040 80f3 	bne.w	8009f60 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2209      	movs	r2, #9
 8009d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009d82:	e0ed      	b.n	8009f60 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	891a      	ldrh	r2, [r3, #8]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	795b      	ldrb	r3, [r3, #5]
 8009d92:	2001      	movs	r0, #1
 8009d94:	9000      	str	r0, [sp, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f002 f837 	bl	800be0a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	2206      	movs	r2, #6
 8009da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009da4:	e0e7      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	795b      	ldrb	r3, [r3, #5]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f002 fba5 	bl	800c4fc <USBH_LL_GetURBState>
 8009db2:	4603      	mov	r3, r0
 8009db4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009db6:	7d3b      	ldrb	r3, [r7, #20]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d12f      	bne.n	8009e1c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	8912      	ldrh	r2, [r2, #8]
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d910      	bls.n	8009dea <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	8912      	ldrh	r2, [r2, #8]
 8009dd2:	441a      	add	r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	8912      	ldrh	r2, [r2, #8]
 8009de2:	1a9a      	subs	r2, r3, r2
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009de8:	e002      	b.n	8009df0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2200      	movs	r2, #0
 8009dee:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00c      	beq.n	8009e12 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	891a      	ldrh	r2, [r3, #8]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	795b      	ldrb	r3, [r3, #5]
 8009e06:	2001      	movs	r0, #1
 8009e08:	9000      	str	r0, [sp, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fffd 	bl	800be0a <USBH_BulkSendData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8009e10:	e0a8      	b.n	8009f64 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2207      	movs	r2, #7
 8009e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009e1a:	e0a3      	b.n	8009f64 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e1c:	7d3b      	ldrb	r3, [r7, #20]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d104      	bne.n	8009e2c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	2205      	movs	r2, #5
 8009e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009e2a:	e09b      	b.n	8009f64 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009e2c:	7d3b      	ldrb	r3, [r7, #20]
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	f040 8098 	bne.w	8009f64 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	220a      	movs	r2, #10
 8009e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009e3c:	e092      	b.n	8009f64 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	220d      	movs	r2, #13
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 f802 	bl	800be54 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2208      	movs	r2, #8
 8009e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
 8009e58:	e08d      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	791b      	ldrb	r3, [r3, #4]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f002 fb4b 	bl	800c4fc <USBH_LL_GetURBState>
 8009e66:	4603      	mov	r3, r0
 8009e68:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009e6a:	7d3b      	ldrb	r3, [r7, #20]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d115      	bne.n	8009e9c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f8a9 	bl	8009fd8 <USBH_MSC_DecodeCSW>
 8009e86:	4603      	mov	r3, r0
 8009e88:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009e8a:	7d7b      	ldrb	r3, [r7, #21]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	75fb      	strb	r3, [r7, #23]
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8009e94:	e068      	b.n	8009f68 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009e96:	2302      	movs	r3, #2
 8009e98:	75fb      	strb	r3, [r7, #23]
      break;
 8009e9a:	e065      	b.n	8009f68 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009e9c:	7d3b      	ldrb	r3, [r7, #20]
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d162      	bne.n	8009f68 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2209      	movs	r2, #9
 8009ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009eaa:	e05d      	b.n	8009f68 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f864 	bl	8009f80 <USBH_MSC_BOT_Abort>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009ebc:	7dbb      	ldrb	r3, [r7, #22]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2207      	movs	r2, #7
 8009ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009eca:	e04f      	b.n	8009f6c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ecc:	7dbb      	ldrb	r3, [r7, #22]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d14c      	bne.n	8009f6c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	220b      	movs	r2, #11
 8009ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009eda:	e047      	b.n	8009f6c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f84c 	bl	8009f80 <USBH_MSC_BOT_Abort>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009eec:	7dbb      	ldrb	r3, [r7, #22]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d11d      	bne.n	8009f2e <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f002 fb53 	bl	800c5a4 <USBH_LL_GetToggle>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	7959      	ldrb	r1, [r3, #5]
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	f1c3 0301 	rsb	r3, r3, #1
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f002 fb14 	bl	800c53e <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f002 fb0d 	bl	800c53e <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2209      	movs	r2, #9
 8009f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009f2c:	e020      	b.n	8009f70 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009f2e:	7dbb      	ldrb	r3, [r7, #22]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d11d      	bne.n	8009f70 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	220b      	movs	r2, #11
 8009f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009f3c:	e018      	b.n	8009f70 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fdf3 	bl	8009b2a <USBH_MSC_BOT_REQ_Reset>
 8009f44:	4603      	mov	r3, r0
 8009f46:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d112      	bne.n	8009f74 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8009f56:	e00d      	b.n	8009f74 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009f58:	bf00      	nop
 8009f5a:	e00c      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f5c:	bf00      	nop
 8009f5e:	e00a      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f60:	bf00      	nop
 8009f62:	e008      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f64:	bf00      	nop
 8009f66:	e006      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e004      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e002      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f74:	bf00      	nop
  }
  return status;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009f90:	2302      	movs	r3, #2
 8009f92:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009f9e:	78bb      	ldrb	r3, [r7, #2]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <USBH_MSC_BOT_Abort+0x2a>
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d009      	beq.n	8009fbc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009fa8:	e011      	b.n	8009fce <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	79db      	ldrb	r3, [r3, #7]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 f9e5 	bl	800b380 <USBH_ClrFeature>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fba:	e008      	b.n	8009fce <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	799b      	ldrb	r3, [r3, #6]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f9dc 	bl	800b380 <USBH_ClrFeature>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
      break;
 8009fcc:	bf00      	nop
  }
  return status;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fe6:	69db      	ldr	r3, [r3, #28]
 8009fe8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009fea:	2301      	movs	r3, #1
 8009fec:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	791b      	ldrb	r3, [r3, #4]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f002 fa01 	bl	800c3fc <USBH_LL_GetLastXferSize>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b0d      	cmp	r3, #13
 8009ffe:	d002      	beq.n	800a006 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800a000:	2302      	movs	r3, #2
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	e024      	b.n	800a050 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a00a:	4a14      	ldr	r2, [pc, #80]	@ (800a05c <USBH_MSC_DecodeCSW+0x84>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d11d      	bne.n	800a04c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a018:	429a      	cmp	r2, r3
 800a01a:	d119      	bne.n	800a050 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
 800a02a:	e011      	b.n	800a050 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a032:	2b01      	cmp	r3, #1
 800a034:	d102      	bne.n	800a03c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a036:	2301      	movs	r3, #1
 800a038:	73fb      	strb	r3, [r7, #15]
 800a03a:	e009      	b.n	800a050 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a042:	2b02      	cmp	r3, #2
 800a044:	d104      	bne.n	800a050 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a046:	2302      	movs	r3, #2
 800a048:	73fb      	strb	r3, [r7, #15]
 800a04a:	e001      	b.n	800a050 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a04c:	2302      	movs	r3, #2
 800a04e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	53425355 	.word	0x53425355

0800a060 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a06c:	2302      	movs	r3, #2
 800a06e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a080:	2b01      	cmp	r3, #1
 800a082:	d002      	beq.n	800a08a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a084:	2b02      	cmp	r3, #2
 800a086:	d021      	beq.n	800a0cc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a088:	e028      	b.n	800a0dc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	220a      	movs	r2, #10
 800a09c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3363      	adds	r3, #99	@ 0x63
 800a0a4:	2210      	movs	r2, #16
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 fba3 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ca:	e007      	b.n	800a0dc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff fd87 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0da:	bf00      	nop
  }

  return error;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d002      	beq.n	800a112 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d027      	beq.n	800a160 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a110:	e05e      	b.n	800a1d0 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2208      	movs	r2, #8
 800a116:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	2280      	movs	r2, #128	@ 0x80
 800a11c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	220a      	movs	r2, #10
 800a124:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	3363      	adds	r3, #99	@ 0x63
 800a12c:	2210      	movs	r2, #16
 800a12e:	2100      	movs	r1, #0
 800a130:	4618      	mov	r0, r3
 800a132:	f002 fb5f 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2225      	movs	r2, #37	@ 0x25
 800a13a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2202      	movs	r2, #2
 800a14a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f103 0210 	add.w	r2, r3, #16
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
      break;
 800a15e:	e037      	b.n	800a1d0 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fd3d 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d12c      	bne.n	800a1ce <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a17a:	3303      	adds	r3, #3
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a186:	3302      	adds	r3, #2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	021b      	lsls	r3, r3, #8
 800a18c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a194:	3301      	adds	r3, #1
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a19a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	061b      	lsls	r3, r3, #24
 800a1a6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1b2:	3307      	adds	r3, #7
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1be:	3306      	adds	r3, #6
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	809a      	strh	r2, [r3, #4]
      break;
 800a1ce:	bf00      	nop
  }

  return error;
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d002      	beq.n	800a206 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a200:	2b02      	cmp	r3, #2
 800a202:	d03d      	beq.n	800a280 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a204:	e089      	b.n	800a31a <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2224      	movs	r2, #36	@ 0x24
 800a20a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2280      	movs	r2, #128	@ 0x80
 800a210:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	220a      	movs	r2, #10
 800a218:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3363      	adds	r3, #99	@ 0x63
 800a220:	220a      	movs	r2, #10
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f002 fae5 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2212      	movs	r2, #18
 800a22e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800a232:	7afb      	ldrb	r3, [r7, #11]
 800a234:	015b      	lsls	r3, r3, #5
 800a236:	b2da      	uxtb	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2224      	movs	r2, #36	@ 0x24
 800a252:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2202      	movs	r2, #2
 800a26a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f103 0210 	add.w	r2, r3, #16
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a27a:	2301      	movs	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
      break;
 800a27e:	e04c      	b.n	800a31a <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	4619      	mov	r1, r3
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7ff fcad 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a28a:	4603      	mov	r3, r0
 800a28c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d141      	bne.n	800a318 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a294:	2222      	movs	r2, #34	@ 0x22
 800a296:	2100      	movs	r1, #0
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f002 faab 	bl	800c7f4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	095b      	lsrs	r3, r3, #5
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	b25b      	sxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	da03      	bge.n	800a2d8 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	709a      	strb	r2, [r3, #2]
 800a2d6:	e002      	b.n	800a2de <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	1cd8      	adds	r0, r3, #3
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	f002 fac5 	bl	800c87c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f103 000c 	add.w	r0, r3, #12
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2fe:	3310      	adds	r3, #16
 800a300:	2210      	movs	r2, #16
 800a302:	4619      	mov	r1, r3
 800a304:	f002 faba 	bl	800c87c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	331d      	adds	r3, #29
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a312:	3220      	adds	r2, #32
 800a314:	6812      	ldr	r2, [r2, #0]
 800a316:	601a      	str	r2, [r3, #0]
      break;
 800a318:	bf00      	nop
  }

  return error;
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	460b      	mov	r3, r1
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a332:	2302      	movs	r3, #2
 800a334:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a346:	2b01      	cmp	r3, #1
 800a348:	d002      	beq.n	800a350 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d03d      	beq.n	800a3ca <USBH_MSC_SCSI_RequestSense+0xa6>
        }
      }
      break;

    default:
      break;
 800a34e:	e063      	b.n	800a418 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	220e      	movs	r2, #14
 800a354:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2280      	movs	r2, #128	@ 0x80
 800a35a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	220a      	movs	r2, #10
 800a362:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3363      	adds	r3, #99	@ 0x63
 800a36a:	2210      	movs	r2, #16
 800a36c:	2100      	movs	r1, #0
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 fa40 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2203      	movs	r2, #3
 800a378:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	015b      	lsls	r3, r3, #5
 800a380:	b2da      	uxtb	r2, r3
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	220e      	movs	r2, #14
 800a39c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f103 0210 	add.w	r2, r3, #16
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c8:	e026      	b.n	800a418 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7ff fc08 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d11b      	bne.n	800a416 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3f8:	7b1a      	ldrb	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a404:	7b5a      	ldrb	r2, [r3, #13]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a410:	d101      	bne.n	800a416 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800a412:	2304      	movs	r3, #4
 800a414:	75fb      	strb	r3, [r7, #23]
      break;
 800a416:	bf00      	nop
  }

  return error;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b086      	sub	sp, #24
 800a426:	af00      	add	r7, sp, #0
 800a428:	60f8      	str	r0, [r7, #12]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
 800a42e:	460b      	mov	r3, r1
 800a430:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800a432:	2302      	movs	r3, #2
 800a434:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a446:	2b01      	cmp	r3, #1
 800a448:	d002      	beq.n	800a450 <USBH_MSC_SCSI_Write+0x2e>
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d04c      	beq.n	800a4e8 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a44e:	e053      	b.n	800a4f8 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800a450:	7afb      	ldrb	r3, [r7, #11]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	2134      	movs	r1, #52	@ 0x34
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	3398      	adds	r3, #152	@ 0x98
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	fb03 f202 	mul.w	r2, r3, r2
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	220a      	movs	r2, #10
 800a478:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3363      	adds	r3, #99	@ 0x63
 800a480:	2210      	movs	r2, #16
 800a482:	2100      	movs	r1, #0
 800a484:	4618      	mov	r0, r3
 800a486:	f002 f9b5 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	222a      	movs	r2, #42	@ 0x2a
 800a48e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800a492:	79fa      	ldrb	r2, [r7, #7]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800a49a:	79ba      	ldrb	r2, [r7, #6]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800a4a2:	797a      	ldrb	r2, [r7, #5]
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800a4aa:	1d3b      	adds	r3, r7, #4
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800a4b4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800a4be:	f107 0320 	add.w	r3, r7, #32
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e6:	e007      	b.n	800a4f8 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff fb79 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f6:	bf00      	nop
  }

  return error;
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b086      	sub	sp, #24
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
 800a50e:	460b      	mov	r3, r1
 800a510:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a512:	2302      	movs	r3, #2
 800a514:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a526:	2b01      	cmp	r3, #1
 800a528:	d002      	beq.n	800a530 <USBH_MSC_SCSI_Read+0x2e>
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d04c      	beq.n	800a5c8 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a52e:	e053      	b.n	800a5d8 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	2134      	movs	r1, #52	@ 0x34
 800a536:	fb01 f303 	mul.w	r3, r1, r3
 800a53a:	4413      	add	r3, r2
 800a53c:	3398      	adds	r3, #152	@ 0x98
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	fb03 f202 	mul.w	r2, r3, r2
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2280      	movs	r2, #128	@ 0x80
 800a550:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	220a      	movs	r2, #10
 800a558:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	3363      	adds	r3, #99	@ 0x63
 800a560:	2210      	movs	r2, #16
 800a562:	2100      	movs	r1, #0
 800a564:	4618      	mov	r0, r3
 800a566:	f002 f945 	bl	800c7f4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2228      	movs	r2, #40	@ 0x28
 800a56e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800a572:	79fa      	ldrb	r2, [r7, #7]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800a57a:	79ba      	ldrb	r2, [r7, #6]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800a582:	797a      	ldrb	r2, [r7, #5]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800a58a:	1d3b      	adds	r3, r7, #4
 800a58c:	781a      	ldrb	r2, [r3, #0]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800a594:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800a59e:	f107 0320 	add.w	r3, r7, #32
 800a5a2:	781a      	ldrb	r2, [r3, #0]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c6:	e007      	b.n	800a5d8 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff fb09 	bl	8009be4 <USBH_MSC_BOT_Process>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d6:	bf00      	nop
  }

  return error;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e029      	b.n	800a64e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	79fa      	ldrb	r2, [r7, #7]
 800a5fe:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f81f 	bl	800a656 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f001 fe24 	bl	800c294 <USBH_LL_Init>

  return USBH_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e009      	b.n	800a678 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	33e0      	adds	r3, #224	@ 0xe0
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3301      	adds	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b0f      	cmp	r3, #15
 800a67c:	d9f2      	bls.n	800a664 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e009      	b.n	800a698 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a69e:	d3f1      	bcc.n	800a684 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2240      	movs	r2, #64	@ 0x40
 800a6c4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	331c      	adds	r3, #28
 800a6f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 f87c 	bl	800c7f4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f002 f873 	bl	800c7f4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a714:	2212      	movs	r2, #18
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f002 f86b 	bl	800c7f4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a724:	223e      	movs	r2, #62	@ 0x3e
 800a726:	2100      	movs	r1, #0
 800a728:	4618      	mov	r0, r3
 800a72a:	f002 f863 	bl	800c7f4 <memset>

  return USBH_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d016      	beq.n	800a77a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10e      	bne.n	800a774 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a75c:	1c59      	adds	r1, r3, #1
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	33de      	adds	r3, #222	@ 0xde
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]
 800a772:	e004      	b.n	800a77e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a774:	2302      	movs	r3, #2
 800a776:	73fb      	strb	r3, [r7, #15]
 800a778:	e001      	b.n	800a77e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a77a:	2302      	movs	r3, #2
 800a77c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d204      	bcs.n	800a7b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	78fa      	ldrb	r2, [r7, #3]
 800a7ac:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a7b0:	e001      	b.n	800a7b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	70fb      	strb	r3, [r7, #3]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70bb      	strb	r3, [r7, #2]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a7ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7ee:	e025      	b.n	800a83c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	221a      	movs	r2, #26
 800a7f4:	fb02 f303 	mul.w	r3, r2, r3
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	3302      	adds	r3, #2
 800a800:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	795b      	ldrb	r3, [r3, #5]
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d002      	beq.n	800a812 <USBH_FindInterface+0x4e>
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	2bff      	cmp	r3, #255	@ 0xff
 800a810:	d111      	bne.n	800a836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a816:	78ba      	ldrb	r2, [r7, #2]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d002      	beq.n	800a822 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a81c:	78bb      	ldrb	r3, [r7, #2]
 800a81e:	2bff      	cmp	r3, #255	@ 0xff
 800a820:	d109      	bne.n	800a836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a826:	787a      	ldrb	r2, [r7, #1]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d002      	beq.n	800a832 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a82c:	787b      	ldrb	r3, [r7, #1]
 800a82e:	2bff      	cmp	r3, #255	@ 0xff
 800a830:	d101      	bne.n	800a836 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	e006      	b.n	800a844 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	3301      	adds	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a83c:	7dfb      	ldrb	r3, [r7, #23]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d9d6      	bls.n	800a7f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a842:	23ff      	movs	r3, #255	@ 0xff
}
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 fd57 	bl	800c30c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a85e:	2101      	movs	r1, #1
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 fe5e 	bl	800c522 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af04      	add	r7, sp, #16
 800a876:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a878:	2302      	movs	r3, #2
 800a87a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d102      	bne.n	800a892 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2203      	movs	r2, #3
 800a890:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b0b      	cmp	r3, #11
 800a89a:	f200 81bc 	bhi.w	800ac16 <USBH_Process+0x3a6>
 800a89e:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <USBH_Process+0x34>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a8d5 	.word	0x0800a8d5
 800a8a8:	0800a907 	.word	0x0800a907
 800a8ac:	0800a971 	.word	0x0800a971
 800a8b0:	0800abb1 	.word	0x0800abb1
 800a8b4:	0800ac17 	.word	0x0800ac17
 800a8b8:	0800aa11 	.word	0x0800aa11
 800a8bc:	0800ab57 	.word	0x0800ab57
 800a8c0:	0800aa47 	.word	0x0800aa47
 800a8c4:	0800aa67 	.word	0x0800aa67
 800a8c8:	0800aa85 	.word	0x0800aa85
 800a8cc:	0800aac9 	.word	0x0800aac9
 800a8d0:	0800ab99 	.word	0x0800ab99
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 819c 	beq.w	800ac1a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a8e8:	20c8      	movs	r0, #200	@ 0xc8
 800a8ea:	f001 fe8e 	bl	800c60a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 fd69 	bl	800c3c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a904:	e189      	b.n	800ac1a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d107      	bne.n	800a922 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2202      	movs	r2, #2
 800a91e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a920:	e18a      	b.n	800ac38 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a92c:	d914      	bls.n	800a958 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a934:	3301      	adds	r3, #1
 800a936:	b2da      	uxtb	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a944:	2b03      	cmp	r3, #3
 800a946:	d903      	bls.n	800a950 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	220d      	movs	r2, #13
 800a94c:	701a      	strb	r2, [r3, #0]
      break;
 800a94e:	e173      	b.n	800ac38 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	701a      	strb	r2, [r3, #0]
      break;
 800a956:	e16f      	b.n	800ac38 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a95e:	f103 020a 	add.w	r2, r3, #10
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a968:	200a      	movs	r0, #10
 800a96a:	f001 fe4e 	bl	800c60a <USBH_Delay>
      break;
 800a96e:	e163      	b.n	800ac38 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a980:	2104      	movs	r1, #4
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a986:	2064      	movs	r0, #100	@ 0x64
 800a988:	f001 fe3f 	bl	800c60a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fcf3 	bl	800c378 <USBH_LL_GetSpeed>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2205      	movs	r2, #5
 800a9a0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 faa2 	bl	800beee <USBH_AllocPipe>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a9b2:	2180      	movs	r1, #128	@ 0x80
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fa9a 	bl	800beee <USBH_AllocPipe>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7919      	ldrb	r1, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a9d6:	9202      	str	r2, [sp, #8]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	9201      	str	r2, [sp, #4]
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2280      	movs	r2, #128	@ 0x80
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f001 fa54 	bl	800be90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	7959      	ldrb	r1, [r3, #5]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a9fc:	9202      	str	r2, [sp, #8]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	9201      	str	r2, [sp, #4]
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	4603      	mov	r3, r0
 800aa06:	2200      	movs	r2, #0
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 fa41 	bl	800be90 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800aa0e:	e113      	b.n	800ac38 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f917 	bl	800ac44 <USBH_HandleEnum>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 80fd 	bne.w	800ac1e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d103      	bne.n	800aa3e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2208      	movs	r2, #8
 800aa3a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aa3c:	e0ef      	b.n	800ac1e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2207      	movs	r2, #7
 800aa42:	701a      	strb	r2, [r3, #0]
      break;
 800aa44:	e0eb      	b.n	800ac1e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 80e8 	beq.w	800ac22 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa58:	2101      	movs	r1, #1
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2208      	movs	r2, #8
 800aa62:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800aa64:	e0dd      	b.n	800ac22 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc3f 	bl	800b2f2 <USBH_SetCfg>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f040 80d5 	bne.w	800ac26 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2209      	movs	r2, #9
 800aa80:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800aa82:	e0d0      	b.n	800ac26 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800aa92:	2101      	movs	r1, #1
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc4f 	bl	800b338 <USBH_SetFeature>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800aaac:	e0bd      	b.n	800ac2a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	f040 80b9 	bne.w	800ac2a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	220a      	movs	r2, #10
 800aabc:	701a      	strb	r2, [r3, #0]
      break;
 800aabe:	e0b4      	b.n	800ac2a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	220a      	movs	r2, #10
 800aac4:	701a      	strb	r2, [r3, #0]
      break;
 800aac6:	e0b0      	b.n	800ac2a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80ad 	beq.w	800ac2e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
 800aae0:	e016      	b.n	800ab10 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aae2:	7bfa      	ldrb	r2, [r7, #15]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32de      	adds	r2, #222	@ 0xde
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	791a      	ldrb	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d108      	bne.n	800ab0a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aaf8:	7bfa      	ldrb	r2, [r7, #15]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	32de      	adds	r2, #222	@ 0xde
 800aafe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800ab08:	e005      	b.n	800ab16 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0e5      	beq.n	800aae2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d016      	beq.n	800ab4e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2206      	movs	r2, #6
 800ab36:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ab3e:	2103      	movs	r1, #3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ab44:	e073      	b.n	800ac2e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	220d      	movs	r2, #13
 800ab4a:	701a      	strb	r2, [r3, #0]
      break;
 800ab4c:	e06f      	b.n	800ac2e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	220d      	movs	r2, #13
 800ab52:	701a      	strb	r2, [r3, #0]
      break;
 800ab54:	e06b      	b.n	800ac2e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d017      	beq.n	800ab90 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	4798      	blx	r3
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	220b      	movs	r2, #11
 800ab7c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ab7e:	e058      	b.n	800ac32 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d154      	bne.n	800ac32 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	220d      	movs	r2, #13
 800ab8c:	701a      	strb	r2, [r3, #0]
      break;
 800ab8e:	e050      	b.n	800ac32 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	220d      	movs	r2, #13
 800ab94:	701a      	strb	r2, [r3, #0]
      break;
 800ab96:	e04c      	b.n	800ac32 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d049      	beq.n	800ac36 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
      }
      break;
 800abae:	e042      	b.n	800ac36 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fd4c 	bl	800a656 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800abec:	2105      	movs	r1, #5
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d107      	bne.n	800ac0e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff fe22 	bl	800a850 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ac0c:	e014      	b.n	800ac38 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f001 fb7c 	bl	800c30c <USBH_LL_Start>
      break;
 800ac14:	e010      	b.n	800ac38 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ac16:	bf00      	nop
 800ac18:	e00e      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac1a:	bf00      	nop
 800ac1c:	e00c      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac1e:	bf00      	nop
 800ac20:	e00a      	b.n	800ac38 <USBH_Process+0x3c8>
    break;
 800ac22:	bf00      	nop
 800ac24:	e008      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac26:	bf00      	nop
 800ac28:	e006      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac2a:	bf00      	nop
 800ac2c:	e004      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac2e:	bf00      	nop
 800ac30:	e002      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac32:	bf00      	nop
 800ac34:	e000      	b.n	800ac38 <USBH_Process+0x3c8>
      break;
 800ac36:	bf00      	nop
  }
  return USBH_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop

0800ac44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af04      	add	r7, sp, #16
 800ac4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ac50:	2301      	movs	r3, #1
 800ac52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	785b      	ldrb	r3, [r3, #1]
 800ac58:	2b07      	cmp	r3, #7
 800ac5a:	f200 81bd 	bhi.w	800afd8 <USBH_HandleEnum+0x394>
 800ac5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <USBH_HandleEnum+0x20>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800ad3f 	.word	0x0800ad3f
 800ac6c:	0800ada9 	.word	0x0800ada9
 800ac70:	0800ae33 	.word	0x0800ae33
 800ac74:	0800ae9d 	.word	0x0800ae9d
 800ac78:	0800af0d 	.word	0x0800af0d
 800ac7c:	0800af53 	.word	0x0800af53
 800ac80:	0800af99 	.word	0x0800af99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac84:	2108      	movs	r1, #8
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa50 	bl	800b12c <USBH_Get_DevDesc>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d12e      	bne.n	800acf4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7919      	ldrb	r1, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800acba:	9202      	str	r2, [sp, #8]
 800acbc:	2200      	movs	r2, #0
 800acbe:	9201      	str	r2, [sp, #4]
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4603      	mov	r3, r0
 800acc4:	2280      	movs	r2, #128	@ 0x80
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 f8e2 	bl	800be90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	7959      	ldrb	r1, [r3, #5]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ace0:	9202      	str	r2, [sp, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	9201      	str	r2, [sp, #4]
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	4603      	mov	r3, r0
 800acea:	2200      	movs	r2, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 f8cf 	bl	800be90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800acf2:	e173      	b.n	800afdc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	f040 8170 	bne.w	800afdc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad02:	3301      	adds	r3, #1
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d903      	bls.n	800ad1e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	220d      	movs	r2, #13
 800ad1a:	701a      	strb	r2, [r3, #0]
      break;
 800ad1c:	e15e      	b.n	800afdc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	795b      	ldrb	r3, [r3, #5]
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 f903 	bl	800bf30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	791b      	ldrb	r3, [r3, #4]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 f8fd 	bl	800bf30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
      break;
 800ad3c:	e14e      	b.n	800afdc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ad3e:	2112      	movs	r1, #18
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f9f3 	bl	800b12c <USBH_Get_DevDesc>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d103      	bne.n	800ad58 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2202      	movs	r2, #2
 800ad54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad56:	e143      	b.n	800afe0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	f040 8140 	bne.w	800afe0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad66:	3301      	adds	r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d903      	bls.n	800ad82 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	220d      	movs	r2, #13
 800ad7e:	701a      	strb	r2, [r3, #0]
      break;
 800ad80:	e12e      	b.n	800afe0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	795b      	ldrb	r3, [r3, #5]
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f001 f8d1 	bl	800bf30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	791b      	ldrb	r3, [r3, #4]
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 f8cb 	bl	800bf30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
      break;
 800ada6:	e11b      	b.n	800afe0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ada8:	2101      	movs	r1, #1
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa7d 	bl	800b2aa <USBH_SetAddress>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d130      	bne.n	800ae1c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800adba:	2002      	movs	r0, #2
 800adbc:	f001 fc25 	bl	800c60a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2203      	movs	r2, #3
 800adcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7919      	ldrb	r1, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ade2:	9202      	str	r2, [sp, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	9201      	str	r2, [sp, #4]
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	4603      	mov	r3, r0
 800adec:	2280      	movs	r2, #128	@ 0x80
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f001 f84e 	bl	800be90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7959      	ldrb	r1, [r3, #5]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae08:	9202      	str	r2, [sp, #8]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	9201      	str	r2, [sp, #4]
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	4603      	mov	r3, r0
 800ae12:	2200      	movs	r2, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f83b 	bl	800be90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae1a:	e0e3      	b.n	800afe4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	f040 80e0 	bne.w	800afe4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	220d      	movs	r2, #13
 800ae28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	705a      	strb	r2, [r3, #1]
      break;
 800ae30:	e0d8      	b.n	800afe4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ae32:	2109      	movs	r1, #9
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f9a5 	bl	800b184 <USBH_Get_CfgDesc>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2204      	movs	r2, #4
 800ae48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae4a:	e0cd      	b.n	800afe8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	f040 80ca 	bne.w	800afe8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d903      	bls.n	800ae76 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	220d      	movs	r2, #13
 800ae72:	701a      	strb	r2, [r3, #0]
      break;
 800ae74:	e0b8      	b.n	800afe8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	795b      	ldrb	r3, [r3, #5]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f857 	bl	800bf30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	791b      	ldrb	r3, [r3, #4]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 f851 	bl	800bf30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	701a      	strb	r2, [r3, #0]
      break;
 800ae9a:	e0a5      	b.n	800afe8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f96d 	bl	800b184 <USBH_Get_CfgDesc>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d103      	bne.n	800aebc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aeba:	e097      	b.n	800afec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	f040 8094 	bne.w	800afec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aeca:	3301      	adds	r3, #1
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d903      	bls.n	800aee6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	220d      	movs	r2, #13
 800aee2:	701a      	strb	r2, [r3, #0]
      break;
 800aee4:	e082      	b.n	800afec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	795b      	ldrb	r3, [r3, #5]
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 f81f 	bl	800bf30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	791b      	ldrb	r3, [r3, #4]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 f819 	bl	800bf30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	e06f      	b.n	800afec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800af12:	2b00      	cmp	r3, #0
 800af14:	d019      	beq.n	800af4a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800af22:	23ff      	movs	r3, #255	@ 0xff
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f957 	bl	800b1d8 <USBH_Get_StringDesc>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2206      	movs	r2, #6
 800af38:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800af3a:	e059      	b.n	800aff0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d156      	bne.n	800aff0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2206      	movs	r2, #6
 800af46:	705a      	strb	r2, [r3, #1]
      break;
 800af48:	e052      	b.n	800aff0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2206      	movs	r2, #6
 800af4e:	705a      	strb	r2, [r3, #1]
      break;
 800af50:	e04e      	b.n	800aff0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d019      	beq.n	800af90 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af68:	23ff      	movs	r3, #255	@ 0xff
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f934 	bl	800b1d8 <USBH_Get_StringDesc>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2207      	movs	r2, #7
 800af7e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800af80:	e038      	b.n	800aff4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d135      	bne.n	800aff4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2207      	movs	r2, #7
 800af8c:	705a      	strb	r2, [r3, #1]
      break;
 800af8e:	e031      	b.n	800aff4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2207      	movs	r2, #7
 800af94:	705a      	strb	r2, [r3, #1]
      break;
 800af96:	e02d      	b.n	800aff4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d017      	beq.n	800afd2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800afae:	23ff      	movs	r3, #255	@ 0xff
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f911 	bl	800b1d8 <USBH_Get_StringDesc>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800afc4:	e018      	b.n	800aff8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d115      	bne.n	800aff8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
      break;
 800afd0:	e012      	b.n	800aff8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]
      break;
 800afd6:	e00f      	b.n	800aff8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800afd8:	bf00      	nop
 800afda:	e00e      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800afdc:	bf00      	nop
 800afde:	e00c      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800afe0:	bf00      	nop
 800afe2:	e00a      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800afe4:	bf00      	nop
 800afe6:	e008      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800afe8:	bf00      	nop
 800afea:	e006      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800afec:	bf00      	nop
 800afee:	e004      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800aff0:	bf00      	nop
 800aff2:	e002      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <USBH_HandleEnum+0x3b6>
      break;
 800aff8:	bf00      	nop
  }
  return Status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f804 	bl	800b046 <USBH_HandleSof>
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b0b      	cmp	r3, #11
 800b056:	d10a      	bne.n	800b06e <USBH_HandleSof+0x28>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d005      	beq.n	800b06e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
  }
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800b086:	bf00      	nop
}
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800b0aa:	bf00      	nop
}
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 f91c 	bl	800c342 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	791b      	ldrb	r3, [r3, #4]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 ff0d 	bl	800bf30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	795b      	ldrb	r3, [r3, #5]
 800b11a:	4619      	mov	r1, r3
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 ff07 	bl	800bf30 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af02      	add	r7, sp, #8
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b138:	887b      	ldrh	r3, [r7, #2]
 800b13a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b13e:	d901      	bls.n	800b144 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b140:	2303      	movs	r3, #3
 800b142:	e01b      	b.n	800b17c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b14a:	887b      	ldrh	r3, [r7, #2]
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	4613      	mov	r3, r2
 800b150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b154:	2100      	movs	r1, #0
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f872 	bl	800b240 <USBH_GetDescriptor>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d109      	bne.n	800b17a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b16c:	887a      	ldrh	r2, [r7, #2]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f929 	bl	800b3c8 <USBH_ParseDevDesc>
 800b176:	4603      	mov	r3, r0
 800b178:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	331c      	adds	r3, #28
 800b194:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b196:	887b      	ldrh	r3, [r7, #2]
 800b198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b19c:	d901      	bls.n	800b1a2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e016      	b.n	800b1d0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b1a2:	887b      	ldrh	r3, [r7, #2]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f846 	bl	800b240 <USBH_GetDescriptor>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d107      	bne.n	800b1ce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b1be:	887b      	ldrh	r3, [r7, #2]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f9af 	bl	800b528 <USBH_ParseCfgDesc>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	72fb      	strb	r3, [r7, #11]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b1ec:	893b      	ldrh	r3, [r7, #8]
 800b1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f2:	d802      	bhi.n	800b1fa <USBH_Get_StringDesc+0x22>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e01c      	b.n	800b238 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b206:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b20e:	893b      	ldrh	r3, [r7, #8]
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	460b      	mov	r3, r1
 800b214:	2100      	movs	r1, #0
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 f812 	bl	800b240 <USBH_GetDescriptor>
 800b21c:	4603      	mov	r3, r0
 800b21e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d107      	bne.n	800b236 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b22c:	893a      	ldrh	r2, [r7, #8]
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fb8c 	bl	800b94e <USBH_ParseStringDesc>
  }

  return status;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	607b      	str	r3, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	72fb      	strb	r3, [r7, #11]
 800b24e:	4613      	mov	r3, r2
 800b250:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	789b      	ldrb	r3, [r3, #2]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d11c      	bne.n	800b294 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b260:	b2da      	uxtb	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2206      	movs	r2, #6
 800b26a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	893a      	ldrh	r2, [r7, #8]
 800b270:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b272:	893b      	ldrh	r3, [r7, #8]
 800b274:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27c:	d104      	bne.n	800b288 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f240 4209 	movw	r2, #1033	@ 0x409
 800b284:	829a      	strh	r2, [r3, #20]
 800b286:	e002      	b.n	800b28e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8b3a      	ldrh	r2, [r7, #24]
 800b292:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b294:	8b3b      	ldrh	r3, [r7, #24]
 800b296:	461a      	mov	r2, r3
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 fba4 	bl	800b9e8 <USBH_CtlReq>
 800b2a0:	4603      	mov	r3, r0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	789b      	ldrb	r3, [r3, #2]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d10f      	bne.n	800b2de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2205      	movs	r2, #5
 800b2c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fb80 	bl	800b9e8 <USBH_CtlReq>
 800b2e8:	4603      	mov	r3, r0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b082      	sub	sp, #8
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	789b      	ldrb	r3, [r3, #2]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d10e      	bne.n	800b324 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2209      	movs	r2, #9
 800b310:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	887a      	ldrh	r2, [r7, #2]
 800b316:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b324:	2200      	movs	r2, #0
 800b326:	2100      	movs	r1, #0
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fb5d 	bl	800b9e8 <USBH_CtlReq>
 800b32e:	4603      	mov	r3, r0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	789b      	ldrb	r3, [r3, #2]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d10f      	bne.n	800b36c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2203      	movs	r2, #3
 800b356:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b358:	78fb      	ldrb	r3, [r7, #3]
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b36c:	2200      	movs	r2, #0
 800b36e:	2100      	movs	r1, #0
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fb39 	bl	800b9e8 <USBH_CtlReq>
 800b376:	4603      	mov	r3, r0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	789b      	ldrb	r3, [r3, #2]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d10f      	bne.n	800b3b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b3a6:	78fb      	ldrb	r3, [r7, #3]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fb15 	bl	800b9e8 <USBH_CtlReq>
 800b3be:	4603      	mov	r3, r0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b3dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	e094      	b.n	800b516 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	781a      	ldrb	r2, [r3, #0]
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	785a      	ldrb	r2, [r3, #1]
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	3302      	adds	r3, #2
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	3303      	adds	r3, #3
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	021b      	lsls	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	791a      	ldrb	r2, [r3, #4]
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	795a      	ldrb	r2, [r3, #5]
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	799a      	ldrb	r2, [r3, #6]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	79da      	ldrb	r2, [r3, #7]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b446:	2b01      	cmp	r3, #1
 800b448:	d11b      	bne.n	800b482 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	79db      	ldrb	r3, [r3, #7]
 800b44e:	2b20      	cmp	r3, #32
 800b450:	dc0f      	bgt.n	800b472 <USBH_ParseDevDesc+0xaa>
 800b452:	2b08      	cmp	r3, #8
 800b454:	db0f      	blt.n	800b476 <USBH_ParseDevDesc+0xae>
 800b456:	3b08      	subs	r3, #8
 800b458:	4a32      	ldr	r2, [pc, #200]	@ (800b524 <USBH_ParseDevDesc+0x15c>)
 800b45a:	fa22 f303 	lsr.w	r3, r2, r3
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	bf14      	ite	ne
 800b466:	2301      	movne	r3, #1
 800b468:	2300      	moveq	r3, #0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <USBH_ParseDevDesc+0xb6>
 800b470:	e001      	b.n	800b476 <USBH_ParseDevDesc+0xae>
 800b472:	2b40      	cmp	r3, #64	@ 0x40
 800b474:	d003      	beq.n	800b47e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2208      	movs	r2, #8
 800b47a:	71da      	strb	r2, [r3, #7]
        break;
 800b47c:	e000      	b.n	800b480 <USBH_ParseDevDesc+0xb8>
        break;
 800b47e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b480:	e00e      	b.n	800b4a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d107      	bne.n	800b49c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	79db      	ldrb	r3, [r3, #7]
 800b490:	2b08      	cmp	r3, #8
 800b492:	d005      	beq.n	800b4a0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2208      	movs	r2, #8
 800b498:	71da      	strb	r2, [r3, #7]
 800b49a:	e001      	b.n	800b4a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b49c:	2303      	movs	r3, #3
 800b49e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b4a0:	88fb      	ldrh	r3, [r7, #6]
 800b4a2:	2b08      	cmp	r3, #8
 800b4a4:	d936      	bls.n	800b514 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	3309      	adds	r3, #9
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	330a      	adds	r3, #10
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	330b      	adds	r3, #11
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	021b      	lsls	r3, r3, #8
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	330d      	adds	r3, #13
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	021b      	lsls	r3, r3, #8
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	7b9a      	ldrb	r2, [r3, #14]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	7bda      	ldrb	r2, [r3, #15]
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	7c1a      	ldrb	r2, [r3, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	7c5a      	ldrb	r2, [r3, #17]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
}
 800b516:	4618      	mov	r0, r3
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	01000101 	.word	0x01000101

0800b528 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08c      	sub	sp, #48	@ 0x30
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b53c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b556:	2302      	movs	r3, #2
 800b558:	e0de      	b.n	800b718 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	2b09      	cmp	r3, #9
 800b564:	d002      	beq.n	800b56c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	2209      	movs	r2, #9
 800b56a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	785a      	ldrb	r2, [r3, #1]
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	3302      	adds	r3, #2
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	3303      	adds	r3, #3
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	b29b      	uxth	r3, r3
 800b592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b596:	bf28      	it	cs
 800b598:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	791a      	ldrb	r2, [r3, #4]
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	795a      	ldrb	r2, [r3, #5]
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	799a      	ldrb	r2, [r3, #6]
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	79da      	ldrb	r2, [r3, #7]
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	7a1a      	ldrb	r2, [r3, #8]
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	f240 80a1 	bls.w	800b714 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5d2:	2309      	movs	r3, #9
 800b5d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5da:	e085      	b.n	800b6e8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5dc:	f107 0316 	add.w	r3, r7, #22
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5e4:	f000 f9e6 	bl	800b9b4 <USBH_GetNextDesc>
 800b5e8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d17a      	bne.n	800b6e8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b09      	cmp	r3, #9
 800b5f8:	d002      	beq.n	800b600 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fc:	2209      	movs	r2, #9
 800b5fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b604:	221a      	movs	r2, #26
 800b606:	fb02 f303 	mul.w	r3, r2, r3
 800b60a:	3308      	adds	r3, #8
 800b60c:	6a3a      	ldr	r2, [r7, #32]
 800b60e:	4413      	add	r3, r2
 800b610:	3302      	adds	r3, #2
 800b612:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b616:	69f8      	ldr	r0, [r7, #28]
 800b618:	f000 f882 	bl	800b720 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b626:	e043      	b.n	800b6b0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b628:	f107 0316 	add.w	r3, r7, #22
 800b62c:	4619      	mov	r1, r3
 800b62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b630:	f000 f9c0 	bl	800b9b4 <USBH_GetNextDesc>
 800b634:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b638:	785b      	ldrb	r3, [r3, #1]
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	d138      	bne.n	800b6b0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	795b      	ldrb	r3, [r3, #5]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d113      	bne.n	800b66e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d003      	beq.n	800b656 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	799b      	ldrb	r3, [r3, #6]
 800b652:	2b03      	cmp	r3, #3
 800b654:	d10b      	bne.n	800b66e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	79db      	ldrb	r3, [r3, #7]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <USBH_ParseCfgDesc+0x14e>
 800b65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b09      	cmp	r3, #9
 800b664:	d007      	beq.n	800b676 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	2209      	movs	r2, #9
 800b66a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b66c:	e003      	b.n	800b676 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b670:	2207      	movs	r2, #7
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	e000      	b.n	800b678 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b676:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b67c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b680:	3201      	adds	r2, #1
 800b682:	00d2      	lsls	r2, r2, #3
 800b684:	211a      	movs	r1, #26
 800b686:	fb01 f303 	mul.w	r3, r1, r3
 800b68a:	4413      	add	r3, r2
 800b68c:	3308      	adds	r3, #8
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	4413      	add	r3, r2
 800b692:	3304      	adds	r3, #4
 800b694:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b698:	69b9      	ldr	r1, [r7, #24]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 f86f 	bl	800b77e <USBH_ParseEPDesc>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b6a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d80a      	bhi.n	800b6ce <USBH_ParseCfgDesc+0x1a6>
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	791b      	ldrb	r3, [r3, #4]
 800b6bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d204      	bcs.n	800b6ce <USBH_ParseCfgDesc+0x1a6>
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	885a      	ldrh	r2, [r3, #2]
 800b6c8:	8afb      	ldrh	r3, [r7, #22]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d8ac      	bhi.n	800b628 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	791b      	ldrb	r3, [r3, #4]
 800b6d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d201      	bcs.n	800b6de <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e01c      	b.n	800b718 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b6de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d805      	bhi.n	800b6fc <USBH_ParseCfgDesc+0x1d4>
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	885a      	ldrh	r2, [r3, #2]
 800b6f4:	8afb      	ldrh	r3, [r7, #22]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	f63f af70 	bhi.w	800b5dc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	791b      	ldrb	r3, [r3, #4]
 800b700:	2b02      	cmp	r3, #2
 800b702:	bf28      	it	cs
 800b704:	2302      	movcs	r3, #2
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d201      	bcs.n	800b714 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b710:	2303      	movs	r3, #3
 800b712:	e001      	b.n	800b718 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3730      	adds	r7, #48	@ 0x30
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	785a      	ldrb	r2, [r3, #1]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	789a      	ldrb	r2, [r3, #2]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	78da      	ldrb	r2, [r3, #3]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	791a      	ldrb	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	795a      	ldrb	r2, [r3, #5]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	799a      	ldrb	r2, [r3, #6]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	79da      	ldrb	r2, [r3, #7]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	7a1a      	ldrb	r2, [r3, #8]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	721a      	strb	r2, [r3, #8]
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	781a      	ldrb	r2, [r3, #0]
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	785a      	ldrb	r2, [r3, #1]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	789a      	ldrb	r2, [r3, #2]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	78da      	ldrb	r2, [r3, #3]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3305      	adds	r3, #5
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	799a      	ldrb	r2, [r3, #6]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	889b      	ldrh	r3, [r3, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d009      	beq.n	800b7ec <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b7dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7e0:	d804      	bhi.n	800b7ec <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b7e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7ea:	d901      	bls.n	800b7f0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d136      	bne.n	800b868 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	78db      	ldrb	r3, [r3, #3]
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	2b02      	cmp	r3, #2
 800b804:	d108      	bne.n	800b818 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	889b      	ldrh	r3, [r3, #4]
 800b80a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b80e:	f240 8097 	bls.w	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b812:	2303      	movs	r3, #3
 800b814:	75fb      	strb	r3, [r7, #23]
 800b816:	e093      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	78db      	ldrb	r3, [r3, #3]
 800b81c:	f003 0303 	and.w	r3, r3, #3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d107      	bne.n	800b834 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	889b      	ldrh	r3, [r3, #4]
 800b828:	2b40      	cmp	r3, #64	@ 0x40
 800b82a:	f240 8089 	bls.w	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b82e:	2303      	movs	r3, #3
 800b830:	75fb      	strb	r3, [r7, #23]
 800b832:	e085      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	78db      	ldrb	r3, [r3, #3]
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d005      	beq.n	800b84c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	78db      	ldrb	r3, [r3, #3]
 800b844:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d10a      	bne.n	800b862 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	799b      	ldrb	r3, [r3, #6]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <USBH_ParseEPDesc+0xde>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	799b      	ldrb	r3, [r3, #6]
 800b858:	2b10      	cmp	r3, #16
 800b85a:	d970      	bls.n	800b93e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b85c:	2303      	movs	r3, #3
 800b85e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b860:	e06d      	b.n	800b93e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b862:	2303      	movs	r3, #3
 800b864:	75fb      	strb	r3, [r7, #23]
 800b866:	e06b      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d13c      	bne.n	800b8ec <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	78db      	ldrb	r3, [r3, #3]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d005      	beq.n	800b88a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	78db      	ldrb	r3, [r3, #3]
 800b882:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	889b      	ldrh	r3, [r3, #4]
 800b88e:	2b40      	cmp	r3, #64	@ 0x40
 800b890:	d956      	bls.n	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b892:	2303      	movs	r3, #3
 800b894:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b896:	e053      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	78db      	ldrb	r3, [r3, #3]
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d10e      	bne.n	800b8c2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	799b      	ldrb	r3, [r3, #6]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d007      	beq.n	800b8bc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b8b0:	2b10      	cmp	r3, #16
 800b8b2:	d803      	bhi.n	800b8bc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b8b8:	2b40      	cmp	r3, #64	@ 0x40
 800b8ba:	d941      	bls.n	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	75fb      	strb	r3, [r7, #23]
 800b8c0:	e03e      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	78db      	ldrb	r3, [r3, #3]
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d10b      	bne.n	800b8e6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	799b      	ldrb	r3, [r3, #6]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <USBH_ParseEPDesc+0x162>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	889b      	ldrh	r3, [r3, #4]
 800b8da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8de:	d32f      	bcc.n	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	75fb      	strb	r3, [r7, #23]
 800b8e4:	e02c      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	75fb      	strb	r3, [r7, #23]
 800b8ea:	e029      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d120      	bne.n	800b938 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	78db      	ldrb	r3, [r3, #3]
 800b8fa:	f003 0303 	and.w	r3, r3, #3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	889b      	ldrh	r3, [r3, #4]
 800b906:	2b08      	cmp	r3, #8
 800b908:	d01a      	beq.n	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b90a:	2303      	movs	r3, #3
 800b90c:	75fb      	strb	r3, [r7, #23]
 800b90e:	e017      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	78db      	ldrb	r3, [r3, #3]
 800b914:	f003 0303 	and.w	r3, r3, #3
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d10a      	bne.n	800b932 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	799b      	ldrb	r3, [r3, #6]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <USBH_ParseEPDesc+0x1ae>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	889b      	ldrh	r3, [r3, #4]
 800b928:	2b08      	cmp	r3, #8
 800b92a:	d909      	bls.n	800b940 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b92c:	2303      	movs	r3, #3
 800b92e:	75fb      	strb	r3, [r7, #23]
 800b930:	e006      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b932:	2303      	movs	r3, #3
 800b934:	75fb      	strb	r3, [r7, #23]
 800b936:	e003      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b938:	2303      	movs	r3, #3
 800b93a:	75fb      	strb	r3, [r7, #23]
 800b93c:	e000      	b.n	800b940 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b93e:	bf00      	nop
  }

  return status;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b94e:	b480      	push	{r7}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	4613      	mov	r3, r2
 800b95a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3301      	adds	r3, #1
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2b03      	cmp	r3, #3
 800b964:	d120      	bne.n	800b9a8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	1e9a      	subs	r2, r3, #2
 800b96c:	88fb      	ldrh	r3, [r7, #6]
 800b96e:	4293      	cmp	r3, r2
 800b970:	bf28      	it	cs
 800b972:	4613      	movcs	r3, r2
 800b974:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3302      	adds	r3, #2
 800b97a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b97c:	2300      	movs	r3, #0
 800b97e:	82fb      	strh	r3, [r7, #22]
 800b980:	e00b      	b.n	800b99a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b982:	8afb      	ldrh	r3, [r7, #22]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	3301      	adds	r3, #1
 800b992:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b994:	8afb      	ldrh	r3, [r7, #22]
 800b996:	3302      	adds	r3, #2
 800b998:	82fb      	strh	r3, [r7, #22]
 800b99a:	8afa      	ldrh	r2, [r7, #22]
 800b99c:	8abb      	ldrh	r3, [r7, #20]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d3ef      	bcc.n	800b982 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	701a      	strb	r2, [r3, #0]
  }
}
 800b9a8:	bf00      	nop
 800b9aa:	371c      	adds	r7, #28
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	7812      	ldrb	r2, [r2, #0]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9da:	68fb      	ldr	r3, [r7, #12]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	789b      	ldrb	r3, [r3, #2]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d002      	beq.n	800ba08 <USBH_CtlReq+0x20>
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d00f      	beq.n	800ba26 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800ba06:	e027      	b.n	800ba58 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	88fa      	ldrh	r2, [r7, #6]
 800ba12:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ba20:	2301      	movs	r3, #1
 800ba22:	75fb      	strb	r3, [r7, #23]
      break;
 800ba24:	e018      	b.n	800ba58 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 f81c 	bl	800ba64 <USBH_HandleControl>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <USBH_CtlReq+0x54>
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d106      	bne.n	800ba4a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	761a      	strb	r2, [r3, #24]
      break;
 800ba48:	e005      	b.n	800ba56 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d102      	bne.n	800ba56 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	709a      	strb	r2, [r3, #2]
      break;
 800ba56:	bf00      	nop
  }
  return status;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	7e1b      	ldrb	r3, [r3, #24]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	2b0a      	cmp	r3, #10
 800ba7c:	f200 8157 	bhi.w	800bd2e <USBH_HandleControl+0x2ca>
 800ba80:	a201      	add	r2, pc, #4	@ (adr r2, 800ba88 <USBH_HandleControl+0x24>)
 800ba82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	0800bab5 	.word	0x0800bab5
 800ba8c:	0800bacf 	.word	0x0800bacf
 800ba90:	0800bb39 	.word	0x0800bb39
 800ba94:	0800bb5f 	.word	0x0800bb5f
 800ba98:	0800bb99 	.word	0x0800bb99
 800ba9c:	0800bbc3 	.word	0x0800bbc3
 800baa0:	0800bc15 	.word	0x0800bc15
 800baa4:	0800bc37 	.word	0x0800bc37
 800baa8:	0800bc73 	.word	0x0800bc73
 800baac:	0800bc99 	.word	0x0800bc99
 800bab0:	0800bcd7 	.word	0x0800bcd7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f103 0110 	add.w	r1, r3, #16
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	795b      	ldrb	r3, [r3, #5]
 800babe:	461a      	mov	r2, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f945 	bl	800bd50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2202      	movs	r2, #2
 800baca:	761a      	strb	r2, [r3, #24]
      break;
 800bacc:	e13a      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	795b      	ldrb	r3, [r3, #5]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fd11 	bl	800c4fc <USBH_LL_GetURBState>
 800bada:	4603      	mov	r3, r0
 800badc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d11e      	bne.n	800bb22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	7c1b      	ldrb	r3, [r3, #16]
 800bae8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800baec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8adb      	ldrh	r3, [r3, #22]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00a      	beq.n	800bb0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800baf6:	7b7b      	ldrb	r3, [r7, #13]
 800baf8:	2b80      	cmp	r3, #128	@ 0x80
 800bafa:	d103      	bne.n	800bb04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2203      	movs	r2, #3
 800bb00:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800bb02:	e116      	b.n	800bd32 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2205      	movs	r2, #5
 800bb08:	761a      	strb	r2, [r3, #24]
      break;
 800bb0a:	e112      	b.n	800bd32 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800bb0c:	7b7b      	ldrb	r3, [r7, #13]
 800bb0e:	2b80      	cmp	r3, #128	@ 0x80
 800bb10:	d103      	bne.n	800bb1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2209      	movs	r2, #9
 800bb16:	761a      	strb	r2, [r3, #24]
      break;
 800bb18:	e10b      	b.n	800bd32 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2207      	movs	r2, #7
 800bb1e:	761a      	strb	r2, [r3, #24]
      break;
 800bb20:	e107      	b.n	800bd32 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	2b04      	cmp	r3, #4
 800bb26:	d003      	beq.n	800bb30 <USBH_HandleControl+0xcc>
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	f040 8101 	bne.w	800bd32 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	220b      	movs	r2, #11
 800bb34:	761a      	strb	r2, [r3, #24]
      break;
 800bb36:	e0fc      	b.n	800bd32 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6899      	ldr	r1, [r3, #8]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	899a      	ldrh	r2, [r3, #12]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	791b      	ldrb	r3, [r3, #4]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f93c 	bl	800bdce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2204      	movs	r2, #4
 800bb5a:	761a      	strb	r2, [r3, #24]
      break;
 800bb5c:	e0f2      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fcc9 	bl	800c4fc <USBH_LL_GetURBState>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d103      	bne.n	800bb7c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2209      	movs	r2, #9
 800bb78:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800bb7a:	e0dc      	b.n	800bd36 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2b05      	cmp	r3, #5
 800bb80:	d102      	bne.n	800bb88 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800bb82:	2303      	movs	r3, #3
 800bb84:	73fb      	strb	r3, [r7, #15]
      break;
 800bb86:	e0d6      	b.n	800bd36 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	2b04      	cmp	r3, #4
 800bb8c:	f040 80d3 	bne.w	800bd36 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	220b      	movs	r2, #11
 800bb94:	761a      	strb	r2, [r3, #24]
      break;
 800bb96:	e0ce      	b.n	800bd36 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6899      	ldr	r1, [r3, #8]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	899a      	ldrh	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	795b      	ldrb	r3, [r3, #5]
 800bba4:	2001      	movs	r0, #1
 800bba6:	9000      	str	r0, [sp, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f8eb 	bl	800bd84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2206      	movs	r2, #6
 800bbbe:	761a      	strb	r2, [r3, #24]
      break;
 800bbc0:	e0c0      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	795b      	ldrb	r3, [r3, #5]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fc97 	bl	800c4fc <USBH_LL_GetURBState>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d103      	bne.n	800bbe0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2207      	movs	r2, #7
 800bbdc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800bbde:	e0ac      	b.n	800bd3a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	2b05      	cmp	r3, #5
 800bbe4:	d105      	bne.n	800bbf2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	220c      	movs	r2, #12
 800bbea:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bbec:	2303      	movs	r3, #3
 800bbee:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf0:	e0a3      	b.n	800bd3a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d103      	bne.n	800bc00 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2205      	movs	r2, #5
 800bbfc:	761a      	strb	r2, [r3, #24]
      break;
 800bbfe:	e09c      	b.n	800bd3a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	f040 8099 	bne.w	800bd3a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	220b      	movs	r2, #11
 800bc0c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc0e:	2302      	movs	r3, #2
 800bc10:	73fb      	strb	r3, [r7, #15]
      break;
 800bc12:	e092      	b.n	800bd3a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	791b      	ldrb	r3, [r3, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f8d6 	bl	800bdce <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2208      	movs	r2, #8
 800bc32:	761a      	strb	r2, [r3, #24]

      break;
 800bc34:	e086      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	791b      	ldrb	r3, [r3, #4]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fc5d 	bl	800c4fc <USBH_LL_GetURBState>
 800bc42:	4603      	mov	r3, r0
 800bc44:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d105      	bne.n	800bc58 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	220d      	movs	r2, #13
 800bc50:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800bc56:	e072      	b.n	800bd3e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d103      	bne.n	800bc66 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	220b      	movs	r2, #11
 800bc62:	761a      	strb	r2, [r3, #24]
      break;
 800bc64:	e06b      	b.n	800bd3e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b05      	cmp	r3, #5
 800bc6a:	d168      	bne.n	800bd3e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc70:	e065      	b.n	800bd3e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	795b      	ldrb	r3, [r3, #5]
 800bc76:	2201      	movs	r2, #1
 800bc78:	9200      	str	r2, [sp, #0]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f880 	bl	800bd84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	220a      	movs	r2, #10
 800bc94:	761a      	strb	r2, [r3, #24]
      break;
 800bc96:	e055      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	795b      	ldrb	r3, [r3, #5]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fc2c 	bl	800c4fc <USBH_LL_GetURBState>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d105      	bne.n	800bcba <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	220d      	movs	r2, #13
 800bcb6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800bcb8:	e043      	b.n	800bd42 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d103      	bne.n	800bcc8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2209      	movs	r2, #9
 800bcc4:	761a      	strb	r2, [r3, #24]
      break;
 800bcc6:	e03c      	b.n	800bd42 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	d139      	bne.n	800bd42 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	220b      	movs	r2, #11
 800bcd2:	761a      	strb	r2, [r3, #24]
      break;
 800bcd4:	e035      	b.n	800bd42 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7e5b      	ldrb	r3, [r3, #25]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	765a      	strb	r2, [r3, #25]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7e5b      	ldrb	r3, [r3, #25]
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d806      	bhi.n	800bcf8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bcf6:	e025      	b.n	800bd44 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bcfe:	2106      	movs	r1, #6
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	795b      	ldrb	r3, [r3, #5]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f90d 	bl	800bf30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	791b      	ldrb	r3, [r3, #4]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f907 	bl	800bf30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd2c:	e00a      	b.n	800bd44 <USBH_HandleControl+0x2e0>

    default:
      break;
 800bd2e:	bf00      	nop
 800bd30:	e008      	b.n	800bd44 <USBH_HandleControl+0x2e0>
      break;
 800bd32:	bf00      	nop
 800bd34:	e006      	b.n	800bd44 <USBH_HandleControl+0x2e0>
      break;
 800bd36:	bf00      	nop
 800bd38:	e004      	b.n	800bd44 <USBH_HandleControl+0x2e0>
      break;
 800bd3a:	bf00      	nop
 800bd3c:	e002      	b.n	800bd44 <USBH_HandleControl+0x2e0>
      break;
 800bd3e:	bf00      	nop
 800bd40:	e000      	b.n	800bd44 <USBH_HandleControl+0x2e0>
      break;
 800bd42:	bf00      	nop
  }

  return status;
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop

0800bd50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b088      	sub	sp, #32
 800bd54:	af04      	add	r7, sp, #16
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd5e:	79f9      	ldrb	r1, [r7, #7]
 800bd60:	2300      	movs	r3, #0
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	2308      	movs	r3, #8
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	9301      	str	r3, [sp, #4]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	2300      	movs	r3, #0
 800bd72:	2200      	movs	r2, #0
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f000 fb90 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af04      	add	r7, sp, #16
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	461a      	mov	r2, r3
 800bd92:	460b      	mov	r3, r1
 800bd94:	80fb      	strh	r3, [r7, #6]
 800bd96:	4613      	mov	r3, r2
 800bd98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bda8:	7979      	ldrb	r1, [r7, #5]
 800bdaa:	7e3b      	ldrb	r3, [r7, #24]
 800bdac:	9303      	str	r3, [sp, #12]
 800bdae:	88fb      	ldrh	r3, [r7, #6]
 800bdb0:	9302      	str	r3, [sp, #8]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fb6b 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b088      	sub	sp, #32
 800bdd2:	af04      	add	r7, sp, #16
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	4611      	mov	r1, r2
 800bdda:	461a      	mov	r2, r3
 800bddc:	460b      	mov	r3, r1
 800bdde:	80fb      	strh	r3, [r7, #6]
 800bde0:	4613      	mov	r3, r2
 800bde2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bde4:	7979      	ldrb	r1, [r7, #5]
 800bde6:	2300      	movs	r3, #0
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	88fb      	ldrh	r3, [r7, #6]
 800bdec:	9302      	str	r3, [sp, #8]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fb4d 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be00:	2300      	movs	r3, #0

}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b088      	sub	sp, #32
 800be0e:	af04      	add	r7, sp, #16
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	4611      	mov	r1, r2
 800be16:	461a      	mov	r2, r3
 800be18:	460b      	mov	r3, r1
 800be1a:	80fb      	strh	r3, [r7, #6]
 800be1c:	4613      	mov	r3, r2
 800be1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be2e:	7979      	ldrb	r1, [r7, #5]
 800be30:	7e3b      	ldrb	r3, [r7, #24]
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	9302      	str	r3, [sp, #8]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	2301      	movs	r3, #1
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	2302      	movs	r3, #2
 800be42:	2200      	movs	r2, #0
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 fb28 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af04      	add	r7, sp, #16
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4611      	mov	r1, r2
 800be60:	461a      	mov	r2, r3
 800be62:	460b      	mov	r3, r1
 800be64:	80fb      	strh	r3, [r7, #6]
 800be66:	4613      	mov	r3, r2
 800be68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be6a:	7979      	ldrb	r1, [r7, #5]
 800be6c:	2300      	movs	r3, #0
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	88fb      	ldrh	r3, [r7, #6]
 800be72:	9302      	str	r3, [sp, #8]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	2301      	movs	r3, #1
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	2302      	movs	r3, #2
 800be7e:	2201      	movs	r2, #1
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 fb0a 	bl	800c49a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af04      	add	r7, sp, #16
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	4608      	mov	r0, r1
 800be9a:	4611      	mov	r1, r2
 800be9c:	461a      	mov	r2, r3
 800be9e:	4603      	mov	r3, r0
 800bea0:	70fb      	strb	r3, [r7, #3]
 800bea2:	460b      	mov	r3, r1
 800bea4:	70bb      	strb	r3, [r7, #2]
 800bea6:	4613      	mov	r3, r2
 800bea8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800beaa:	7878      	ldrb	r0, [r7, #1]
 800beac:	78ba      	ldrb	r2, [r7, #2]
 800beae:	78f9      	ldrb	r1, [r7, #3]
 800beb0:	8b3b      	ldrh	r3, [r7, #24]
 800beb2:	9302      	str	r3, [sp, #8]
 800beb4:	7d3b      	ldrb	r3, [r7, #20]
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	7c3b      	ldrb	r3, [r7, #16]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4603      	mov	r3, r0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 faaf 	bl	800c422 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	460b      	mov	r3, r1
 800bed8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800beda:	78fb      	ldrb	r3, [r7, #3]
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 face 	bl	800c480 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f836 	bl	800bf6c <USBH_GetFreePipe>
 800bf00:	4603      	mov	r3, r0
 800bf02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bf04:	89fb      	ldrh	r3, [r7, #14]
 800bf06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d00a      	beq.n	800bf24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	f003 030f 	and.w	r3, r3, #15
 800bf16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	33e0      	adds	r3, #224	@ 0xe0
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bf24:	89fb      	ldrh	r3, [r7, #14]
 800bf26:	b2db      	uxtb	r3, r3
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	2b0f      	cmp	r3, #15
 800bf40:	d80d      	bhi.n	800bf5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	33e0      	adds	r3, #224	@ 0xe0
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	33e0      	adds	r3, #224	@ 0xe0
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
 800bf7c:	e00f      	b.n	800bf9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	33e0      	adds	r3, #224	@ 0xe0
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d102      	bne.n	800bf98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	e007      	b.n	800bfa8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	73fb      	strb	r3, [r7, #15]
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b0f      	cmp	r3, #15
 800bfa2:	d9ec      	bls.n	800bf7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bfa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bfca:	4b1f      	ldr	r3, [pc, #124]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bfcc:	7a5b      	ldrb	r3, [r3, #9]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d131      	bne.n	800c038 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bfd4:	4b1c      	ldr	r3, [pc, #112]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bfd6:	7a5b      	ldrb	r3, [r3, #9]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	4b1a      	ldr	r3, [pc, #104]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bfde:	2100      	movs	r1, #0
 800bfe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bfe2:	4b19      	ldr	r3, [pc, #100]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bfe4:	7a5b      	ldrb	r3, [r3, #9]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4a17      	ldr	r2, [pc, #92]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bff2:	4b15      	ldr	r3, [pc, #84]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bff4:	7a5b      	ldrb	r3, [r3, #9]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	461a      	mov	r2, r3
 800bffa:	4b13      	ldr	r3, [pc, #76]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800bffc:	4413      	add	r3, r2
 800bffe:	79fa      	ldrb	r2, [r7, #7]
 800c000:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c002:	4b11      	ldr	r3, [pc, #68]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800c004:	7a5b      	ldrb	r3, [r3, #9]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	b2d1      	uxtb	r1, r2
 800c00c:	4a0e      	ldr	r2, [pc, #56]	@ (800c048 <FATFS_LinkDriverEx+0x94>)
 800c00e:	7251      	strb	r1, [r2, #9]
 800c010:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c012:	7dbb      	ldrb	r3, [r7, #22]
 800c014:	3330      	adds	r3, #48	@ 0x30
 800c016:	b2da      	uxtb	r2, r3
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	3301      	adds	r3, #1
 800c020:	223a      	movs	r2, #58	@ 0x3a
 800c022:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	3302      	adds	r3, #2
 800c028:	222f      	movs	r2, #47	@ 0x2f
 800c02a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	3303      	adds	r3, #3
 800c030:	2200      	movs	r2, #0
 800c032:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c038:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	371c      	adds	r7, #28
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	2000044c 	.word	0x2000044c

0800c04c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c056:	2200      	movs	r2, #0
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff ffaa 	bl	800bfb4 <FATFS_LinkDriverEx>
 800c060:	4603      	mov	r3, r0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c070:	2201      	movs	r2, #1
 800c072:	490e      	ldr	r1, [pc, #56]	@ (800c0ac <MX_USB_HOST_Init+0x40>)
 800c074:	480e      	ldr	r0, [pc, #56]	@ (800c0b0 <MX_USB_HOST_Init+0x44>)
 800c076:	f7fe fab4 	bl	800a5e2 <USBH_Init>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c080:	f7f4 fe4e 	bl	8000d20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c084:	490b      	ldr	r1, [pc, #44]	@ (800c0b4 <MX_USB_HOST_Init+0x48>)
 800c086:	480a      	ldr	r0, [pc, #40]	@ (800c0b0 <MX_USB_HOST_Init+0x44>)
 800c088:	f7fe fb56 	bl	800a738 <USBH_RegisterClass>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c092:	f7f4 fe45 	bl	8000d20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c096:	4806      	ldr	r0, [pc, #24]	@ (800c0b0 <MX_USB_HOST_Init+0x44>)
 800c098:	f7fe fbda 	bl	800a850 <USBH_Start>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c0a2:	f7f4 fe3d 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c0a6:	bf00      	nop
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800c0cd 	.word	0x0800c0cd
 800c0b0:	20000458 	.word	0x20000458
 800c0b4:	2000000c 	.word	0x2000000c

0800c0b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c0bc:	4802      	ldr	r0, [pc, #8]	@ (800c0c8 <MX_USB_HOST_Process+0x10>)
 800c0be:	f7fe fbd7 	bl	800a870 <USBH_Process>
}
 800c0c2:	bf00      	nop
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000458 	.word	0x20000458

0800c0cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d819      	bhi.n	800c114 <USBH_UserProcess+0x48>
 800c0e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e8 <USBH_UserProcess+0x1c>)
 800c0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e6:	bf00      	nop
 800c0e8:	0800c115 	.word	0x0800c115
 800c0ec:	0800c105 	.word	0x0800c105
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c10d 	.word	0x0800c10d
 800c0f8:	0800c0fd 	.word	0x0800c0fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c0fc:	4b09      	ldr	r3, [pc, #36]	@ (800c124 <USBH_UserProcess+0x58>)
 800c0fe:	2203      	movs	r2, #3
 800c100:	701a      	strb	r2, [r3, #0]
  break;
 800c102:	e008      	b.n	800c116 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c104:	4b07      	ldr	r3, [pc, #28]	@ (800c124 <USBH_UserProcess+0x58>)
 800c106:	2202      	movs	r2, #2
 800c108:	701a      	strb	r2, [r3, #0]
  break;
 800c10a:	e004      	b.n	800c116 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c10c:	4b05      	ldr	r3, [pc, #20]	@ (800c124 <USBH_UserProcess+0x58>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
  break;
 800c112:	e000      	b.n	800c116 <USBH_UserProcess+0x4a>

  default:
  break;
 800c114:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c116:	bf00      	nop
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	20000830 	.word	0x20000830

0800c128 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08a      	sub	sp, #40	@ 0x28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
 800c138:	605a      	str	r2, [r3, #4]
 800c13a:	609a      	str	r2, [r3, #8]
 800c13c:	60da      	str	r2, [r3, #12]
 800c13e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c148:	d147      	bne.n	800c1da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c14a:	2300      	movs	r3, #0
 800c14c:	613b      	str	r3, [r7, #16]
 800c14e:	4b25      	ldr	r3, [pc, #148]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c152:	4a24      	ldr	r2, [pc, #144]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c154:	f043 0301 	orr.w	r3, r3, #1
 800c158:	6313      	str	r3, [r2, #48]	@ 0x30
 800c15a:	4b22      	ldr	r3, [pc, #136]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c16a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c16c:	2300      	movs	r3, #0
 800c16e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c170:	2300      	movs	r3, #0
 800c172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c174:	f107 0314 	add.w	r3, r7, #20
 800c178:	4619      	mov	r1, r3
 800c17a:	481b      	ldr	r0, [pc, #108]	@ (800c1e8 <HAL_HCD_MspInit+0xc0>)
 800c17c:	f7f5 ffa8 	bl	80020d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c180:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c186:	2302      	movs	r3, #2
 800c188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c18e:	2303      	movs	r3, #3
 800c190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c192:	230a      	movs	r3, #10
 800c194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c196:	f107 0314 	add.w	r3, r7, #20
 800c19a:	4619      	mov	r1, r3
 800c19c:	4812      	ldr	r0, [pc, #72]	@ (800c1e8 <HAL_HCD_MspInit+0xc0>)
 800c19e:	f7f5 ff97 	bl	80020d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1a2:	4b10      	ldr	r3, [pc, #64]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c1a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ac:	6353      	str	r3, [r2, #52]	@ 0x34
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b6:	4a0b      	ldr	r2, [pc, #44]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c1b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c1bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800c1be:	4b09      	ldr	r3, [pc, #36]	@ (800c1e4 <HAL_HCD_MspInit+0xbc>)
 800c1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	2043      	movs	r0, #67	@ 0x43
 800c1d0:	f7f5 ff47 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1d4:	2043      	movs	r0, #67	@ 0x43
 800c1d6:	f7f5 ff60 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1da:	bf00      	nop
 800c1dc:	3728      	adds	r7, #40	@ 0x28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	40023800 	.word	0x40023800
 800c1e8:	40020000 	.word	0x40020000

0800c1ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe ff11 	bl	800b022 <USBH_LL_IncTimer>
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe ff4d 	bl	800b0b6 <USBH_LL_Connect>
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe ff56 	bl	800b0e4 <USBH_LL_Disconnect>
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
 800c24c:	4613      	mov	r3, r2
 800c24e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe ff03 	bl	800b076 <USBH_LL_PortEnabled>
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe ff03 	bl	800b092 <USBH_LL_PortDisabled>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d12a      	bne.n	800c2fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c2a6:	4a18      	ldr	r2, [pc, #96]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a15      	ldr	r2, [pc, #84]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2b6:	4b14      	ldr	r3, [pc, #80]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c2bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c2be:	4b12      	ldr	r3, [pc, #72]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c2c4:	4b10      	ldr	r3, [pc, #64]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c2dc:	480a      	ldr	r0, [pc, #40]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2de:	f7f6 f8c6 	bl	800246e <HAL_HCD_Init>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c2e8:	f7f4 fd1a 	bl	8000d20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c2ec:	4806      	ldr	r0, [pc, #24]	@ (800c308 <USBH_LL_Init+0x74>)
 800c2ee:	f7f6 fd03 	bl	8002cf8 <HAL_HCD_GetCurrentFrame>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fe fe84 	bl	800b004 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000834 	.word	0x20000834

0800c30c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c322:	4618      	mov	r0, r3
 800c324:	f7f6 fc70 	bl	8002c08 <HAL_HCD_Start>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f976 	bl	800c620 <USBH_Get_USB_Status>
 800c334:	4603      	mov	r3, r0
 800c336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c338:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c358:	4618      	mov	r0, r3
 800c35a:	f7f6 fc78 	bl	8002c4e <HAL_HCD_Stop>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f95b 	bl	800c620 <USBH_Get_USB_Status>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c380:	2301      	movs	r3, #1
 800c382:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f6 fcc2 	bl	8002d14 <HAL_HCD_GetCurrentSpeed>
 800c390:	4603      	mov	r3, r0
 800c392:	2b02      	cmp	r3, #2
 800c394:	d00c      	beq.n	800c3b0 <USBH_LL_GetSpeed+0x38>
 800c396:	2b02      	cmp	r3, #2
 800c398:	d80d      	bhi.n	800c3b6 <USBH_LL_GetSpeed+0x3e>
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <USBH_LL_GetSpeed+0x2c>
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d003      	beq.n	800c3aa <USBH_LL_GetSpeed+0x32>
 800c3a2:	e008      	b.n	800c3b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3a8:	e008      	b.n	800c3bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ae:	e005      	b.n	800c3bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3b4:	e002      	b.n	800c3bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ba:	bf00      	nop
  }
  return  speed;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b084      	sub	sp, #16
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f6 fc53 	bl	8002c88 <HAL_HCD_ResetPort>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 f919 	bl	800c620 <USBH_Get_USB_Status>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c40e:	78fa      	ldrb	r2, [r7, #3]
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f7f6 fc5b 	bl	8002cce <HAL_HCD_HC_GetXferCount>
 800c418:	4603      	mov	r3, r0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800c422:	b590      	push	{r4, r7, lr}
 800c424:	b089      	sub	sp, #36	@ 0x24
 800c426:	af04      	add	r7, sp, #16
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	4608      	mov	r0, r1
 800c42c:	4611      	mov	r1, r2
 800c42e:	461a      	mov	r2, r3
 800c430:	4603      	mov	r3, r0
 800c432:	70fb      	strb	r3, [r7, #3]
 800c434:	460b      	mov	r3, r1
 800c436:	70bb      	strb	r3, [r7, #2]
 800c438:	4613      	mov	r3, r2
 800c43a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c44a:	787c      	ldrb	r4, [r7, #1]
 800c44c:	78ba      	ldrb	r2, [r7, #2]
 800c44e:	78f9      	ldrb	r1, [r7, #3]
 800c450:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c452:	9302      	str	r3, [sp, #8]
 800c454:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	4623      	mov	r3, r4
 800c462:	f7f6 f86b 	bl	800253c <HAL_HCD_HC_Init>
 800c466:	4603      	mov	r3, r0
 800c468:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 f8d7 	bl	800c620 <USBH_Get_USB_Status>
 800c472:	4603      	mov	r3, r0
 800c474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c476:	7bbb      	ldrb	r3, [r7, #14]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd90      	pop	{r4, r7, pc}

0800c480 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c49a:	b590      	push	{r4, r7, lr}
 800c49c:	b089      	sub	sp, #36	@ 0x24
 800c49e:	af04      	add	r7, sp, #16
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	70fb      	strb	r3, [r7, #3]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70bb      	strb	r3, [r7, #2]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c4c2:	787c      	ldrb	r4, [r7, #1]
 800c4c4:	78ba      	ldrb	r2, [r7, #2]
 800c4c6:	78f9      	ldrb	r1, [r7, #3]
 800c4c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c4cc:	9303      	str	r3, [sp, #12]
 800c4ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c4d0:	9302      	str	r3, [sp, #8]
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4623      	mov	r3, r4
 800c4de:	f7f6 f8e5 	bl	80026ac <HAL_HCD_HC_SubmitRequest>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f899 	bl	800c620 <USBH_Get_USB_Status>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd90      	pop	{r4, r7, pc}

0800c4fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c50e:	78fa      	ldrb	r2, [r7, #3]
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7f6 fbc6 	bl	8002ca4 <HAL_HCD_HC_GetURBState>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	460b      	mov	r3, r1
 800c52c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800c52e:	20c8      	movs	r0, #200	@ 0xc8
 800c530:	f7f5 f93a 	bl	80017a8 <HAL_Delay>
  return USBH_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c53e:	b480      	push	{r7}
 800c540:	b085      	sub	sp, #20
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	460b      	mov	r3, r1
 800c548:	70fb      	strb	r3, [r7, #3]
 800c54a:	4613      	mov	r3, r2
 800c54c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c554:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c556:	78fa      	ldrb	r2, [r7, #3]
 800c558:	68f9      	ldr	r1, [r7, #12]
 800c55a:	4613      	mov	r3, r2
 800c55c:	011b      	lsls	r3, r3, #4
 800c55e:	1a9b      	subs	r3, r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	440b      	add	r3, r1
 800c564:	3317      	adds	r3, #23
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c56c:	78fa      	ldrb	r2, [r7, #3]
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	4613      	mov	r3, r2
 800c572:	011b      	lsls	r3, r3, #4
 800c574:	1a9b      	subs	r3, r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	440b      	add	r3, r1
 800c57a:	333c      	adds	r3, #60	@ 0x3c
 800c57c:	78ba      	ldrb	r2, [r7, #2]
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	e009      	b.n	800c596 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c582:	78fa      	ldrb	r2, [r7, #3]
 800c584:	68f9      	ldr	r1, [r7, #12]
 800c586:	4613      	mov	r3, r2
 800c588:	011b      	lsls	r3, r3, #4
 800c58a:	1a9b      	subs	r3, r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	333d      	adds	r3, #61	@ 0x3d
 800c592:	78ba      	ldrb	r2, [r7, #2]
 800c594:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c5ba:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c5bc:	78fa      	ldrb	r2, [r7, #3]
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	011b      	lsls	r3, r3, #4
 800c5c4:	1a9b      	subs	r3, r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	440b      	add	r3, r1
 800c5ca:	3317      	adds	r3, #23
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c5d2:	78fa      	ldrb	r2, [r7, #3]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	011b      	lsls	r3, r3, #4
 800c5da:	1a9b      	subs	r3, r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	440b      	add	r3, r1
 800c5e0:	333c      	adds	r3, #60	@ 0x3c
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	73fb      	strb	r3, [r7, #15]
 800c5e6:	e009      	b.n	800c5fc <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c5e8:	78fa      	ldrb	r2, [r7, #3]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	011b      	lsls	r3, r3, #4
 800c5f0:	1a9b      	subs	r3, r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	440b      	add	r3, r1
 800c5f6:	333d      	adds	r3, #61	@ 0x3d
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b082      	sub	sp, #8
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7f5 f8c8 	bl	80017a8 <HAL_Delay>
}
 800c618:	bf00      	nop
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	2b03      	cmp	r3, #3
 800c632:	d817      	bhi.n	800c664 <USBH_Get_USB_Status+0x44>
 800c634:	a201      	add	r2, pc, #4	@ (adr r2, 800c63c <USBH_Get_USB_Status+0x1c>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c64d 	.word	0x0800c64d
 800c640:	0800c653 	.word	0x0800c653
 800c644:	0800c659 	.word	0x0800c659
 800c648:	0800c65f 	.word	0x0800c65f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	e00b      	b.n	800c66a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c652:	2302      	movs	r3, #2
 800c654:	73fb      	strb	r3, [r7, #15]
    break;
 800c656:	e008      	b.n	800c66a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c658:	2301      	movs	r3, #1
 800c65a:	73fb      	strb	r3, [r7, #15]
    break;
 800c65c:	e005      	b.n	800c66a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c65e:	2302      	movs	r3, #2
 800c660:	73fb      	strb	r3, [r7, #15]
    break;
 800c662:	e002      	b.n	800c66a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c664:	2302      	movs	r3, #2
 800c666:	73fb      	strb	r3, [r7, #15]
    break;
 800c668:	bf00      	nop
  }
  return usb_status;
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <malloc>:
 800c678:	4b02      	ldr	r3, [pc, #8]	@ (800c684 <malloc+0xc>)
 800c67a:	4601      	mov	r1, r0
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	f000 b82d 	b.w	800c6dc <_malloc_r>
 800c682:	bf00      	nop
 800c684:	2000002c 	.word	0x2000002c

0800c688 <free>:
 800c688:	4b02      	ldr	r3, [pc, #8]	@ (800c694 <free+0xc>)
 800c68a:	4601      	mov	r1, r0
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f000 b903 	b.w	800c898 <_free_r>
 800c692:	bf00      	nop
 800c694:	2000002c 	.word	0x2000002c

0800c698 <sbrk_aligned>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	4e0f      	ldr	r6, [pc, #60]	@ (800c6d8 <sbrk_aligned+0x40>)
 800c69c:	460c      	mov	r4, r1
 800c69e:	6831      	ldr	r1, [r6, #0]
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	b911      	cbnz	r1, 800c6aa <sbrk_aligned+0x12>
 800c6a4:	f000 f8ae 	bl	800c804 <_sbrk_r>
 800c6a8:	6030      	str	r0, [r6, #0]
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	f000 f8a9 	bl	800c804 <_sbrk_r>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d103      	bne.n	800c6be <sbrk_aligned+0x26>
 800c6b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	1cc4      	adds	r4, r0, #3
 800c6c0:	f024 0403 	bic.w	r4, r4, #3
 800c6c4:	42a0      	cmp	r0, r4
 800c6c6:	d0f8      	beq.n	800c6ba <sbrk_aligned+0x22>
 800c6c8:	1a21      	subs	r1, r4, r0
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f000 f89a 	bl	800c804 <_sbrk_r>
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d1f2      	bne.n	800c6ba <sbrk_aligned+0x22>
 800c6d4:	e7ef      	b.n	800c6b6 <sbrk_aligned+0x1e>
 800c6d6:	bf00      	nop
 800c6d8:	20000c14 	.word	0x20000c14

0800c6dc <_malloc_r>:
 800c6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e0:	1ccd      	adds	r5, r1, #3
 800c6e2:	f025 0503 	bic.w	r5, r5, #3
 800c6e6:	3508      	adds	r5, #8
 800c6e8:	2d0c      	cmp	r5, #12
 800c6ea:	bf38      	it	cc
 800c6ec:	250c      	movcc	r5, #12
 800c6ee:	2d00      	cmp	r5, #0
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	db01      	blt.n	800c6f8 <_malloc_r+0x1c>
 800c6f4:	42a9      	cmp	r1, r5
 800c6f6:	d904      	bls.n	800c702 <_malloc_r+0x26>
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	6033      	str	r3, [r6, #0]
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7d8 <_malloc_r+0xfc>
 800c706:	f000 f869 	bl	800c7dc <__malloc_lock>
 800c70a:	f8d8 3000 	ldr.w	r3, [r8]
 800c70e:	461c      	mov	r4, r3
 800c710:	bb44      	cbnz	r4, 800c764 <_malloc_r+0x88>
 800c712:	4629      	mov	r1, r5
 800c714:	4630      	mov	r0, r6
 800c716:	f7ff ffbf 	bl	800c698 <sbrk_aligned>
 800c71a:	1c43      	adds	r3, r0, #1
 800c71c:	4604      	mov	r4, r0
 800c71e:	d158      	bne.n	800c7d2 <_malloc_r+0xf6>
 800c720:	f8d8 4000 	ldr.w	r4, [r8]
 800c724:	4627      	mov	r7, r4
 800c726:	2f00      	cmp	r7, #0
 800c728:	d143      	bne.n	800c7b2 <_malloc_r+0xd6>
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	d04b      	beq.n	800c7c6 <_malloc_r+0xea>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	4639      	mov	r1, r7
 800c732:	4630      	mov	r0, r6
 800c734:	eb04 0903 	add.w	r9, r4, r3
 800c738:	f000 f864 	bl	800c804 <_sbrk_r>
 800c73c:	4581      	cmp	r9, r0
 800c73e:	d142      	bne.n	800c7c6 <_malloc_r+0xea>
 800c740:	6821      	ldr	r1, [r4, #0]
 800c742:	1a6d      	subs	r5, r5, r1
 800c744:	4629      	mov	r1, r5
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ffa6 	bl	800c698 <sbrk_aligned>
 800c74c:	3001      	adds	r0, #1
 800c74e:	d03a      	beq.n	800c7c6 <_malloc_r+0xea>
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	442b      	add	r3, r5
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	f8d8 3000 	ldr.w	r3, [r8]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	bb62      	cbnz	r2, 800c7b8 <_malloc_r+0xdc>
 800c75e:	f8c8 7000 	str.w	r7, [r8]
 800c762:	e00f      	b.n	800c784 <_malloc_r+0xa8>
 800c764:	6822      	ldr	r2, [r4, #0]
 800c766:	1b52      	subs	r2, r2, r5
 800c768:	d420      	bmi.n	800c7ac <_malloc_r+0xd0>
 800c76a:	2a0b      	cmp	r2, #11
 800c76c:	d917      	bls.n	800c79e <_malloc_r+0xc2>
 800c76e:	1961      	adds	r1, r4, r5
 800c770:	42a3      	cmp	r3, r4
 800c772:	6025      	str	r5, [r4, #0]
 800c774:	bf18      	it	ne
 800c776:	6059      	strne	r1, [r3, #4]
 800c778:	6863      	ldr	r3, [r4, #4]
 800c77a:	bf08      	it	eq
 800c77c:	f8c8 1000 	streq.w	r1, [r8]
 800c780:	5162      	str	r2, [r4, r5]
 800c782:	604b      	str	r3, [r1, #4]
 800c784:	4630      	mov	r0, r6
 800c786:	f000 f82f 	bl	800c7e8 <__malloc_unlock>
 800c78a:	f104 000b 	add.w	r0, r4, #11
 800c78e:	1d23      	adds	r3, r4, #4
 800c790:	f020 0007 	bic.w	r0, r0, #7
 800c794:	1ac2      	subs	r2, r0, r3
 800c796:	bf1c      	itt	ne
 800c798:	1a1b      	subne	r3, r3, r0
 800c79a:	50a3      	strne	r3, [r4, r2]
 800c79c:	e7af      	b.n	800c6fe <_malloc_r+0x22>
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	bf0c      	ite	eq
 800c7a4:	f8c8 2000 	streq.w	r2, [r8]
 800c7a8:	605a      	strne	r2, [r3, #4]
 800c7aa:	e7eb      	b.n	800c784 <_malloc_r+0xa8>
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	6864      	ldr	r4, [r4, #4]
 800c7b0:	e7ae      	b.n	800c710 <_malloc_r+0x34>
 800c7b2:	463c      	mov	r4, r7
 800c7b4:	687f      	ldr	r7, [r7, #4]
 800c7b6:	e7b6      	b.n	800c726 <_malloc_r+0x4a>
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	42a3      	cmp	r3, r4
 800c7be:	d1fb      	bne.n	800c7b8 <_malloc_r+0xdc>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	6053      	str	r3, [r2, #4]
 800c7c4:	e7de      	b.n	800c784 <_malloc_r+0xa8>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	6033      	str	r3, [r6, #0]
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 f80c 	bl	800c7e8 <__malloc_unlock>
 800c7d0:	e794      	b.n	800c6fc <_malloc_r+0x20>
 800c7d2:	6005      	str	r5, [r0, #0]
 800c7d4:	e7d6      	b.n	800c784 <_malloc_r+0xa8>
 800c7d6:	bf00      	nop
 800c7d8:	20000c18 	.word	0x20000c18

0800c7dc <__malloc_lock>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	@ (800c7e4 <__malloc_lock+0x8>)
 800c7de:	f000 b84b 	b.w	800c878 <__retarget_lock_acquire_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	20000d54 	.word	0x20000d54

0800c7e8 <__malloc_unlock>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	@ (800c7f0 <__malloc_unlock+0x8>)
 800c7ea:	f000 b846 	b.w	800c87a <__retarget_lock_release_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	20000d54 	.word	0x20000d54

0800c7f4 <memset>:
 800c7f4:	4402      	add	r2, r0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <memset+0xa>
 800c7fc:	4770      	bx	lr
 800c7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c802:	e7f9      	b.n	800c7f8 <memset+0x4>

0800c804 <_sbrk_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d06      	ldr	r5, [pc, #24]	@ (800c820 <_sbrk_r+0x1c>)
 800c808:	2300      	movs	r3, #0
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	602b      	str	r3, [r5, #0]
 800c810:	f7f4 fc04 	bl	800101c <_sbrk>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	d102      	bne.n	800c81e <_sbrk_r+0x1a>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b103      	cbz	r3, 800c81e <_sbrk_r+0x1a>
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	20000d58 	.word	0x20000d58

0800c824 <__errno>:
 800c824:	4b01      	ldr	r3, [pc, #4]	@ (800c82c <__errno+0x8>)
 800c826:	6818      	ldr	r0, [r3, #0]
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	2000002c 	.word	0x2000002c

0800c830 <__libc_init_array>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	4d0d      	ldr	r5, [pc, #52]	@ (800c868 <__libc_init_array+0x38>)
 800c834:	4c0d      	ldr	r4, [pc, #52]	@ (800c86c <__libc_init_array+0x3c>)
 800c836:	1b64      	subs	r4, r4, r5
 800c838:	10a4      	asrs	r4, r4, #2
 800c83a:	2600      	movs	r6, #0
 800c83c:	42a6      	cmp	r6, r4
 800c83e:	d109      	bne.n	800c854 <__libc_init_array+0x24>
 800c840:	4d0b      	ldr	r5, [pc, #44]	@ (800c870 <__libc_init_array+0x40>)
 800c842:	4c0c      	ldr	r4, [pc, #48]	@ (800c874 <__libc_init_array+0x44>)
 800c844:	f000 f872 	bl	800c92c <_init>
 800c848:	1b64      	subs	r4, r4, r5
 800c84a:	10a4      	asrs	r4, r4, #2
 800c84c:	2600      	movs	r6, #0
 800c84e:	42a6      	cmp	r6, r4
 800c850:	d105      	bne.n	800c85e <__libc_init_array+0x2e>
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	f855 3b04 	ldr.w	r3, [r5], #4
 800c858:	4798      	blx	r3
 800c85a:	3601      	adds	r6, #1
 800c85c:	e7ee      	b.n	800c83c <__libc_init_array+0xc>
 800c85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c862:	4798      	blx	r3
 800c864:	3601      	adds	r6, #1
 800c866:	e7f2      	b.n	800c84e <__libc_init_array+0x1e>
 800c868:	0800c97c 	.word	0x0800c97c
 800c86c:	0800c97c 	.word	0x0800c97c
 800c870:	0800c97c 	.word	0x0800c97c
 800c874:	0800c980 	.word	0x0800c980

0800c878 <__retarget_lock_acquire_recursive>:
 800c878:	4770      	bx	lr

0800c87a <__retarget_lock_release_recursive>:
 800c87a:	4770      	bx	lr

0800c87c <memcpy>:
 800c87c:	440a      	add	r2, r1
 800c87e:	4291      	cmp	r1, r2
 800c880:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c884:	d100      	bne.n	800c888 <memcpy+0xc>
 800c886:	4770      	bx	lr
 800c888:	b510      	push	{r4, lr}
 800c88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c88e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c892:	4291      	cmp	r1, r2
 800c894:	d1f9      	bne.n	800c88a <memcpy+0xe>
 800c896:	bd10      	pop	{r4, pc}

0800c898 <_free_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4605      	mov	r5, r0
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d041      	beq.n	800c924 <_free_r+0x8c>
 800c8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a4:	1f0c      	subs	r4, r1, #4
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bfb8      	it	lt
 800c8aa:	18e4      	addlt	r4, r4, r3
 800c8ac:	f7ff ff96 	bl	800c7dc <__malloc_lock>
 800c8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c928 <_free_r+0x90>)
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	b933      	cbnz	r3, 800c8c4 <_free_r+0x2c>
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6014      	str	r4, [r2, #0]
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c0:	f7ff bf92 	b.w	800c7e8 <__malloc_unlock>
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d908      	bls.n	800c8da <_free_r+0x42>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	1821      	adds	r1, r4, r0
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf01      	itttt	eq
 800c8d0:	6819      	ldreq	r1, [r3, #0]
 800c8d2:	685b      	ldreq	r3, [r3, #4]
 800c8d4:	1809      	addeq	r1, r1, r0
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	e7ed      	b.n	800c8b6 <_free_r+0x1e>
 800c8da:	461a      	mov	r2, r3
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	b10b      	cbz	r3, 800c8e4 <_free_r+0x4c>
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d9fa      	bls.n	800c8da <_free_r+0x42>
 800c8e4:	6811      	ldr	r1, [r2, #0]
 800c8e6:	1850      	adds	r0, r2, r1
 800c8e8:	42a0      	cmp	r0, r4
 800c8ea:	d10b      	bne.n	800c904 <_free_r+0x6c>
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	4401      	add	r1, r0
 800c8f0:	1850      	adds	r0, r2, r1
 800c8f2:	4283      	cmp	r3, r0
 800c8f4:	6011      	str	r1, [r2, #0]
 800c8f6:	d1e0      	bne.n	800c8ba <_free_r+0x22>
 800c8f8:	6818      	ldr	r0, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	6053      	str	r3, [r2, #4]
 800c8fe:	4408      	add	r0, r1
 800c900:	6010      	str	r0, [r2, #0]
 800c902:	e7da      	b.n	800c8ba <_free_r+0x22>
 800c904:	d902      	bls.n	800c90c <_free_r+0x74>
 800c906:	230c      	movs	r3, #12
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	e7d6      	b.n	800c8ba <_free_r+0x22>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	1821      	adds	r1, r4, r0
 800c910:	428b      	cmp	r3, r1
 800c912:	bf04      	itt	eq
 800c914:	6819      	ldreq	r1, [r3, #0]
 800c916:	685b      	ldreq	r3, [r3, #4]
 800c918:	6063      	str	r3, [r4, #4]
 800c91a:	bf04      	itt	eq
 800c91c:	1809      	addeq	r1, r1, r0
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	6054      	str	r4, [r2, #4]
 800c922:	e7ca      	b.n	800c8ba <_free_r+0x22>
 800c924:	bd38      	pop	{r3, r4, r5, pc}
 800c926:	bf00      	nop
 800c928:	20000c18 	.word	0x20000c18

0800c92c <_init>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	bf00      	nop
 800c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c932:	bc08      	pop	{r3}
 800c934:	469e      	mov	lr, r3
 800c936:	4770      	bx	lr

0800c938 <_fini>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	bf00      	nop
 800c93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93e:	bc08      	pop	{r3}
 800c940:	469e      	mov	lr, r3
 800c942:	4770      	bx	lr
